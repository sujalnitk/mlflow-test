{"version":3,"file":"static/js/39.1bffe003.chunk.js","mappings":"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","sources":["common/static/chart-bar.svg","common/static/chart-contour.svg","common/static/chart-difference.svg","common/static/chart-image.svg","common/static/chart-line.svg","common/static/chart-parallel.svg","common/static/chart-scatter.svg","common/static/registered-model-grey-ok.svg","common/components/JsonFormatting.tsx","common/components/ToggleIconButton.tsx","common/hooks/useDragAndDropElement.tsx","common/hooks/useIsTabActive.tsx","common/utils/CssGrid.utils.ts","common/utils/LocalStorageUtils.ts","experiment-tracking/components/ExperimentSourceTypeIcon.tsx","experiment-tracking/components/RunStatusIcon.tsx","experiment-tracking/components/experiment-page/components/RunColorPill.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchemaTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchema.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetLink.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceType.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceURL.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDigest.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDrawer.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetWithContext.tsx","experiment-tracking/components/experiment-page/contexts/ExperimentPageUIStateContext.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentIds.ts","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/components/modals/ConfirmModal.tsx","experiment-tracking/components/modals/DeleteRunModal.tsx","experiment-tracking/components/modals/GenericInputModal.tsx","experiment-tracking/components/modals/RenameForm.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigure.common.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureBarChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureParallelChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureLineChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureLineChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureParallelChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureContourChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureScatterChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureDifferenceChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureDifferenceChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureImageChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureImageChart.preview.tsx","experiment-tracking/components/runs-charts/components/RunsChartsConfigureModal.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureBarChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureContourChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureScatterChart.preview.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFullScreenModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsTooltipBody.tsx","experiment-tracking/components/runs-charts/components/RunsContourPlot.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsBarPlot.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsLegend.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsLegendWrapper.tsx","experiment-tracking/components/runs-charts/hooks/useRunsChartsMultipleTracesTooltip.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsLinePlot.tsx","experiment-tracking/components/runs-charts/components/RunsMultipleTracesTooltipBody.tsx","experiment-tracking/components/runs-charts/components/RunsScatterPlot.tsx","experiment-tracking/components/runs-charts/components/cards/ChartCard.common.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsBarChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsLineChartCard.tsx","experiment-tracking/components/runs-charts/hooks/useCompareRunChartSelectedRange.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsScatterChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsContourChartCard.tsx","common/static/parallel-chart-placeholder.svg","experiment-tracking/components/runs-charts/components/cards/RunsChartsParallelChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsDifferenceChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsImageChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsCard.tsx","experiment-tracking/components/runs-charts/utils/differenceView.ts","experiment-tracking/components/runs-charts/components/charts/DifferenceViewPlot.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridSingleKeyPlot.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridMultipleKeyPlot.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.tsx","experiment-tracking/components/runs-charts/components/charts/LazyParallelCoordinatesPlot.tsx","experiment-tracking/components/MetricChartsAccordion.tsx","experiment-tracking/components/runs-charts/components/RunsChartsAddChartMenu.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSectionHeader.tsx","experiment-tracking/components/runs-charts/components/RunsCharts.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSection.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSectionAccordion.tsx","experiment-tracking/components/runs-charts/hooks/useChartImageDownloadHandler.tsx","experiment-tracking/components/runs-charts/hooks/useImageSliderStepMarks.tsx","experiment-tracking/components/runs-charts/hooks/useIsInViewport.tsx","experiment-tracking/components/runs-charts/hooks/useMutableHoverCallback.tsx","experiment-tracking/components/runs-charts/hooks/useRunsChartTraceHighlight.ts","experiment-tracking/components/runs-charts/hooks/useRunsChartsTooltip.tsx","experiment-tracking/components/runs-charts/hooks/useRunsChartsUIConfiguration.tsx","experiment-tracking/components/runs-charts/hooks/useSampledMetricHistory.tsx","experiment-tracking/components/runs-charts/runs-charts.types.ts","experiment-tracking/components/runs-charts/utils/findChartStepsByTimestamp.ts","experiment-tracking/components/runs-compare/hooks/useGroupedChartRunData.tsx","experiment-tracking/utils/DatasetUtils.ts","experiment-tracking/utils/NoteUtils.ts","shared/building_blocks/CopyButton.tsx","shared/building_blocks/Image.tsx","shared/web-shared/hooks/useMediaQuery.ts","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","shared/web-shared/snippet/theme/databricks-light.ts","shared/web-shared/snippet/index.tsx"],"sourcesContent":["var _path, _rect, _rect2, _rect3, _rect4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartBar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.16943,\n    y: 10.5763,\n    width: 2.16949,\n    height: 3.25424,\n    fill: \"#338ECC\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 6.42371,\n    y: 5.15259,\n    width: 2.16949,\n    height: 8.67797,\n    fill: \"#338ECC\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 9.67798,\n    y: 8.40686,\n    width: 2.16949,\n    height: 5.42373,\n    fill: \"#338ECC\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 12.9323,\n    y: 1.89832,\n    width: 2.16949,\n    height: 11.9322,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartBar);\nexport default __webpack_public_path__ + \"static/media/chart-bar.0fd4a63680fba840a7b69fbf07969f79.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartContour(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.9749 4.94148C12.9188 4.71702 12.221 4.73284 12.0618 4.71515C11.1779 4.61693 10.2817 4.66052 9.39271 4.66052C8.11919 4.66052 7.15648 4.97961 6.24753 5.90922C5.86197 6.30355 5.5235 6.77684 5.23295 7.24378C4.99434 7.62726 4.65544 7.93479 4.40569 8.31299C3.93777 9.02154 3.56281 9.80723 3.56281 10.6699C3.56281 11.1806 3.37479 11.598 3.76962 12.0669C4.19449 12.5714 4.6863 12.9507 5.27978 13.2649C5.88594 13.5858 6.42202 13.8619 7.13723 13.8619C7.74338 13.8619 8.34952 13.8619 8.95567 13.8619C9.45735 13.8619 9.96042 13.8731 10.4619 13.8619C11.1412 13.8468 11.9484 13.1895 12.413 12.7381C13.581 11.6035 14.2393 9.88016 14.2393 8.24665C14.2393 7.69923 14.3797 7.17063 14.3797 6.62723C14.3797 6.40084 14.4779 5.87696 14.2744 5.71411C13.9268 5.43606 13.5785 5.13789 13.1857 4.94148\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.9213 6.83789C11.2761 6.83789 10.6309 6.83789 9.98577 6.83789C9.19776 6.83789 8.80182 7.44144 8.2844 7.97734C7.58163 8.70521 7.28544 9.67306 7.28544 10.666C7.28544 10.9641 7.22004 11.177 7.46104 11.3645C7.6831 11.5372 8.10719 11.6142 8.37806 11.6142C9.07316 11.6142 9.91042 11.5583 10.4462 11.0523C10.9277 10.5975 11.473 10.3701 11.8159 9.75284C12.045 9.34042 12.2022 8.86324 12.2022 8.38317C12.2022 8.14903 12.2022 7.9149 12.2022 7.68077C12.2022 7.4241 12.0208 7.38817 11.9213 7.18909\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartContour);\nexport default __webpack_public_path__ + \"static/media/chart-contour.0d4b306f2669f3ad25375568935e3ce3.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _rect17, _rect18;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartDifference(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartDifference);\nexport default __webpack_public_path__ + \"static/media/chart-difference.16174216d6f3b7c24f40e3541fe0ca2c.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _line, _line2, _line3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartImage(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0.5,\n    y: 0.5,\n    width: 15,\n    height: 15,\n    stroke: \"#C4C4C4\"\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 8.5,\n    y1: 0.800049,\n    x2: 8.5,\n    y2: 16,\n    stroke: \"#C4C4C4\"\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 16,\n    y1: 5.69995,\n    x2: -2.63656e-8,\n    y2: 5.69995,\n    stroke: \"#C4C4C4\"\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 16,\n    y1: 10.9,\n    x2: -2.63656e-8,\n    y2: 10.9,\n    stroke: \"#C4C4C4\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartImage);\nexport default __webpack_public_path__ + \"static/media/chart-image.cc434c4dc50780966344e2385a15f8fe.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartLine(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.38977 15.717L8.79655 10.8113L12.5254 14.9622L19.644 7.03772\",\n    stroke: \"#338ECC\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V21H21\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartLine);\nexport default __webpack_public_path__ + \"static/media/chart-line.0adaa2036bb4eb5956db6d0c7e925a3d.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _path5;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartParallel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.21875 3.58289C4.55663 3.58289 4.88067 3.68935 5.21469 3.73008C5.6474 3.78285 6.02137 3.96513 6.37191 4.21552C6.76902 4.49917 7.0271 4.74589 7.24101 5.18954C7.44337 5.60925 7.59378 6.06989 7.72958 6.51432C7.86002 6.94121 8.09708 7.33726 8.19153 7.77803C8.25347 8.0671 8.34514 8.32427 8.44678 8.60015C8.58028 8.96252 8.80086 9.27915 8.96667 9.62583C9.15145 10.0122 9.216 10.4461 9.34876 10.8551C9.57831 11.5623 9.91132 12.4763 10.7205 12.6731C11.4284 12.8453 12.1459 12.8845 12.8705 12.8845C13.0981 12.8845 13.3979 12.898 13.5831 12.7499C13.6402 12.7042 13.7451 12.6907 13.8164 12.6591C13.8752 12.6329 14.0919 12.5871 14.1123 12.5463\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.16162 12.9805C4.32512 12.9805 4.4895 12.9859 4.65284 12.9805C4.84076 12.9742 5.0468 12.7952 5.2099 12.707C5.62236 12.4841 5.99426 12.0648 6.24299 11.6739C6.49491 11.2781 6.8776 10.9871 7.0887 10.5649C7.27767 10.187 7.50992 9.80749 7.73691 9.45078C7.93911 9.13304 8.10211 8.77722 8.28637 8.44554C8.43088 8.18544 8.45 7.88672 8.60542 7.62768C8.94898 7.05509 9.16215 6.418 9.45873 5.82484C9.72614 5.29001 9.96898 4.82426 10.4159 4.42207C10.5753 4.27853 10.8984 4.21824 11.0995 4.14861C11.3303 4.06873 11.579 4.02714 11.8136 3.93592C12.0394 3.84807 12.2521 3.84383 12.4795 3.77386C12.6993 3.70623 12.9319 3.63713 13.1632 3.63713C13.5192 3.63713 13.9089 3.59155 14.2798 3.59155\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.79248 2.74207V13.8225\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.873 3.04419V13.7217\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartParallel);\nexport default __webpack_public_path__ + \"static/media/chart-parallel.da7dedf539b2af4b654d377c679173e4.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle, _ellipse, _circle2, _circle3, _ellipse2, _ellipse3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartScatter(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 3.98301,\n    cy: 12.4746,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 9.40684,\n    cy: 10.8475,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 5.6102,\n    cy: 8.1356,\n    r: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 9.40684,\n    cy: 6.50852,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse2 || (_ellipse2 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 13.7457,\n    cy: 5.96616,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _ellipse3 || (_ellipse3 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 16.4576,\n    cy: 2.46128,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartScatter);\nexport default __webpack_public_path__ + \"static/media/chart-scatter.69118d0023a6ff3973f7fa913834ac47.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _g, _path2, _path3, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModelGreyOk(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 19,\n    height: 16,\n    viewBox: \"0 0 19 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_0_3\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 16,\n    height: 16\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0H0V16H16V0Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2.75 3.49999C2.05964 3.49999 1.5 4.05963 1.5 4.74999C1.5 5.44034 2.05964 5.99999 2.75 5.99999C3.44036 5.99999 4 5.44034 4 4.74999C4 4.05963 3.44036 3.49999 2.75 3.49999ZM0 4.74999C0 3.2312 1.23122 1.99999 2.75 1.99999C3.77682 1.99999 4.6722 2.56276 5.14452 3.39669L9.51655 2.44626C9.66772 1.0704 10.8338 0 12.25 0C13.7688 0 15 1.23122 15 2.75C15 3.87686 14.3222 4.84541 13.3521 5.27025L13.6341 7.52661C14.9711 7.71349 16 8.86158 16 10.25C16 11.7688 14.7687 13 13.25 13C12.3895 13 11.6214 12.6048 11.1172 11.9861L8.49749 13.1322C8.49913 13.1713 8.49997 13.2105 8.49997 13.25C8.49996 14.7688 7.26875 16 5.74997 16C4.23118 16 2.99997 14.7688 2.99996 13.25C2.99997 12.3569 3.42568 11.5633 4.08524 11.0609L3.01322 7.48755C2.92659 7.49578 2.83878 7.49999 2.75 7.49999C1.23122 7.49999 0 6.26877 0 4.74999ZM5.46534 5.18782C5.48277 5.07884 5.4938 4.96773 5.49804 4.85488L9.76409 3.92748C10.1528 4.74671 10.9346 5.34321 11.8658 5.47338L12.1478 7.72974C11.7709 7.89483 11.438 8.14204 11.1719 8.44873L5.46534 5.18782ZM4.82802 6.55126C4.70399 6.69422 4.56546 6.82424 4.41471 6.93906L5.48674 10.5124C5.57337 10.5042 5.66118 10.5 5.74997 10.5C6.69483 10.5 7.52839 10.9765 8.02345 11.7023L10.5231 10.6087C10.5079 10.4913 10.5 10.3716 10.5 10.25C10.5 10.101 10.5118 9.95475 10.5346 9.81218L4.82802 6.55126ZM12 10.25C12 9.55963 12.5596 8.99999 13.25 8.99999C13.9403 8.99999 14.5 9.55963 14.5 10.25C14.5 10.9403 13.9403 11.5 13.25 11.5C12.5596 11.5 12 10.9403 12 10.25ZM5.74997 12C5.05961 12 4.49997 12.5596 4.49997 13.25C4.49997 13.9403 5.05961 14.5 5.74997 14.5C6.44032 14.5 6.99997 13.9403 6.99997 13.25C6.99997 12.5596 6.44032 12 5.74997 12ZM11 2.75C11 2.05964 11.5596 1.5 12.25 1.5C12.9403 1.5 13.5 2.05964 13.5 2.75C13.5 3.44036 12.9403 4 12.25 4C11.5596 4 11 3.44036 11 2.75Z\",\n    fill: \"currentColor\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.5 14C15.433 14 17 12.433 17 10.5C17 8.567 15.433 7 13.5 7C11.567 7 10 8.567 10 10.5C10 12.433 11.567 14 13.5 14Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M11.125 11C11.125 9.41218 12.4122 8.125 14 8.125C15.5878 8.125 16.875 9.41218 16.875 11C16.875 12.5878 15.5878 13.875 14 13.875C12.4122 13.875 11.125 12.5878 11.125 11ZM14 6.625C11.5838 6.625 9.625 8.58375 9.625 11C9.625 13.4162 11.5838 15.375 14 15.375C16.4162 15.375 18.375 13.4162 18.375 11C18.375 8.58375 16.4162 6.625 14 6.625ZM14.0303 12.5303L16.0303 10.5303L14.9697 9.46967L13.5 10.9393L13.0303 10.4697L11.9697 11.5303L12.9697 12.5303L13.5 13.0607L14.0303 12.5303Z\",\n    fill: \"#3CAA60\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_0_3\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 19,\n    height: 16,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModelGreyOk);\nexport default __webpack_public_path__ + \"static/media/registered-model-grey-ok.8274b58d39504c8d1b8c358aa1c9aa35.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { isObject } from 'lodash';\n\ninterface JsonPreviewProps {\n  json: string;\n  wrapperStyle?: React.CSSProperties;\n  overlayStyle?: React.CSSProperties;\n  codeSnippetStyle?: React.CSSProperties;\n}\n\nexport const JsonPreview: React.FC<JsonPreviewProps> = ({ json, wrapperStyle, overlayStyle, codeSnippetStyle }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  const defaultWrapperStyle: React.CSSProperties = {\n    position: 'relative',\n    maxHeight: 'calc(1.5em * 9)',\n    overflow: 'hidden',\n  };\n\n  const defaultOverlayStyle: React.CSSProperties = {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    left: 6,\n    height: '2em',\n    background: 'linear-gradient(transparent, white)',\n  };\n\n  const defaultCodeSnippetStyle: React.CSSProperties = {\n    padding: '5px',\n    overflowX: 'hidden',\n  };\n\n  return (\n    <div style={{ ...defaultWrapperStyle, ...wrapperStyle }}>\n      {isJsonContent ? (\n        <>\n          <CodeSnippet language=\"json\" style={{ ...defaultCodeSnippetStyle, ...codeSnippetStyle }}>\n            {formattedJson}\n          </CodeSnippet>\n          <div css={{ ...defaultOverlayStyle, ...overlayStyle }}></div>\n        </>\n      ) : (\n        <>{json}</>\n      )}\n    </div>\n  );\n};\n\nexport function useFormattedJson(json: string) {\n  return React.useMemo(() => {\n    try {\n      const parsed = JSON.parse(json);\n      const isJson = isObject(parsed) && typeof parsed !== 'function' && !(parsed instanceof Date);\n      return {\n        formattedJson: isJson ? JSON.stringify(parsed, null, 2) : json,\n        isJsonContent: isJson,\n      };\n    } catch (e) {\n      return {\n        formattedJson: json,\n        isJsonContent: false,\n      };\n    }\n  }, [json]);\n}\n\nexport const FormattedJsonDisplay: React.FC<{ json: string }> = ({ json }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  return (\n    <div css={{ whiteSpace: 'pre-wrap' }}>\n      {isJsonContent ? (\n        <CodeSnippet language=\"json\" wrapLongLines>\n          {formattedJson}\n        </CodeSnippet>\n      ) : (\n        <span>{json}</span>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport {\n  DesignSystemEventProviderAnalyticsEventTypes,\n  DesignSystemEventProviderComponentTypes,\n  useDesignSystemEventComponentCallbacks,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\n\nexport interface ToggleIconButtonProps extends ButtonProps {\n  pressed?: boolean;\n}\n\n/**\n * WARNING: Temporary component!\n *\n * This component recreates \"Toggle button with icon\" pattern which is not\n * available in the design system yet.\n *\n * TODO: replace this component with the one from DuBois design system when available.\n */\nconst ToggleIconButton = React.forwardRef<HTMLButtonElement, ToggleIconButtonProps>(\n  (props: ToggleIconButtonProps, ref) => {\n    const {\n      pressed,\n      onClick,\n      icon,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      componentId,\n      analyticsEvents,\n      type,\n      ...remainingProps\n    } = props;\n    const { theme } = useDesignSystemTheme();\n\n    const eventContext = useDesignSystemEventComponentCallbacks({\n      componentType: DesignSystemEventProviderComponentTypes.Button,\n      componentId,\n      analyticsEvents: analyticsEvents ?? [DesignSystemEventProviderAnalyticsEventTypes.OnClick],\n    });\n\n    return (\n      <button\n        onClick={(event) => {\n          eventContext.onClick();\n          onClick?.(event);\n        }}\n        css={{\n          cursor: 'pointer',\n          width: theme.general.heightSm,\n          height: theme.general.heightSm,\n          borderRadius: theme.borders.borderRadiusMd,\n          lineHeight: theme.typography.lineHeightBase,\n          padding: 0,\n          border: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: pressed ? theme.colors.actionDefaultBackgroundPress : 'transparent',\n          color: pressed ? theme.colors.actionDefaultTextPress : theme.colors.textSecondary,\n          '&:hover': {\n            background: theme.colors.actionDefaultBackgroundHover,\n            color: theme.colors.actionDefaultTextHover,\n          },\n        }}\n        ref={ref}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        {...remainingProps}\n      >\n        {icon}\n      </button>\n    );\n  },\n);\n\nexport { ToggleIconButton };\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { type DragDropManager, createDragDropManager } from 'dnd-core';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { useDrag, useDrop, DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nexport interface useDragAndDropElementProps {\n  /**\n   * Unique drag element identifier, used in drop events\n   */\n  dragKey: string;\n  /**\n   * Group key - items are droppable only within a single group\n   */\n  dragGroupKey: string;\n  /**\n   * Callback function, conveys both dragged and target element key\n   */\n  onDrop: (draggedKey: string, targetDropKey: string) => void;\n\n  /**\n   * If true, drag and drop will be disabled\n   */\n  disabled?: boolean;\n}\n\ninterface DraggedItem {\n  key: string;\n  groupKey: string;\n}\n\n/**\n * A hook enabling drag-and-drop capabilities for any component.\n * Used component will serve as both DnD source and target.\n */\nexport const useDragAndDropElement = ({\n  dragGroupKey,\n  dragKey,\n  onDrop,\n  disabled = false,\n}: useDragAndDropElementProps) => {\n  const dropListener = useRef(onDrop);\n  useEffect(() => {\n    dropListener.current = onDrop;\n  }, [onDrop]);\n  const [{ isOver, draggedItem }, dropTargetRef] = useDrop<\n    DraggedItem,\n    never,\n    { isOver: boolean; draggedItem: DraggedItem }\n  >(\n    () => ({\n      canDrop: () => !disabled,\n      accept: `dnd-${dragGroupKey}`,\n      drop: ({ key: sourceKey }: { key: string }, monitor) => {\n        if (sourceKey === dragKey || monitor.didDrop()) {\n          return;\n        }\n        dropListener.current(sourceKey, dragKey);\n      },\n      collect: (monitor) => ({ isOver: monitor.isOver({ shallow: true }), draggedItem: monitor.getItem() }),\n    }),\n    [],\n  );\n\n  const [{ isDragging }, dragHandleRef, dragPreviewRef] = useDrag(\n    () => ({\n      canDrag: () => !disabled,\n      type: `dnd-${dragGroupKey}`,\n      item: { key: dragKey, groupKey: dragGroupKey },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n    }),\n    [],\n  );\n\n  const isDraggingOtherGroup = Boolean(draggedItem && draggedItem.groupKey !== dragGroupKey);\n\n  return { dropTargetRef, dragHandleRef, dragPreviewRef, isDragging, isOver, isDraggingOtherGroup };\n};\n\n/**\n * Create a scoped DndProvider that will limit its functionality to a single root element.\n * It should prevent HTML5Backend collisions, see:\n * https://github.com/react-dnd/react-dnd/blob/7c88c37489a53b5ac98699c46a506a8e085f1c03/packages/backend-html5/src/HTML5BackendImpl.ts#L107-L109\n */\nexport const DragAndDropProvider: React.FC = ({ children }) => {\n  const rootElementRef = useRef<HTMLDivElement>(null);\n  const [manager, setManager] = useState<DragDropManager | null>(null);\n\n  useLayoutEffect(() => {\n    const rootElement = rootElementRef.current;\n    const dragDropManager = createDragDropManager(HTML5Backend, undefined, { rootElement });\n    setManager(dragDropManager);\n    return () => {\n      dragDropManager.getBackend().teardown();\n    };\n  }, []);\n\n  return (\n    <div css={{ display: 'contents' }} ref={rootElementRef}>\n      {manager && <DndProvider manager={manager}>{children}</DndProvider>}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","const DEFAULT_MIN_COLUMNS = 1;\nconst DEFAULT_MAX_COLUMNS = 3;\nconst DEFAULT_MIN_COLUMN_WIDTH = 330;\nconst DEFAULT_GAP = 16;\n\n/**\n * Creates a CSS grid column setup with min/max number of columns.\n * See: https://stackoverflow.com/a/69154193\n */\nexport const getGridColumnSetup = ({\n  minColumns = DEFAULT_MIN_COLUMNS,\n  maxColumns = DEFAULT_MAX_COLUMNS,\n  minColumnWidth = DEFAULT_MIN_COLUMN_WIDTH,\n  gap = DEFAULT_GAP,\n  additionalBreakpoints = [],\n}: {\n  /**\n   * Minimum number of columns to display\n   */\n  minColumns?: number;\n  /**\n   * Maximum number of columns to display\n   */\n  maxColumns?: number;\n  /**\n   * Minimum column width\n   */\n  minColumnWidth?: number;\n  /**\n   * Gap between columns, in pixels\n   */\n  gap?: number;\n  /**\n   * Additional breakpoints to add to the grid. Defines the min breakpoint width and the minimum column width for that breakpoint.\n   * Does not use minimum and maximum use of columns.\n   */\n  additionalBreakpoints?: { breakpointWidth: number; minColumnWidthForBreakpoint?: number }[];\n}) => ({\n  display: 'grid',\n  gridTemplateColumns: `repeat(\n      auto-fit,\n      minmax(\n        min(\n          calc(\n            100%/${minColumns} - ${gap}px\n          ),\n          max(\n            ${minColumnWidth}px,\n            calc(100%/${maxColumns} - ${gap}px)\n          )\n        ),\n        1fr\n      )\n    )`,\n  gap,\n  ...additionalBreakpoints.reduce(\n    (acc, { breakpointWidth, minColumnWidthForBreakpoint }) => ({\n      ...acc,\n      [`@media (min-width: ${breakpointWidth}px)`]: {\n        gridTemplateColumns: `repeat(\n        auto-fit,\n        minmax(\n          ${minColumnWidthForBreakpoint}px,\n          1fr\n        )\n      )`,\n      },\n    }),\n    {},\n  ),\n});\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import { FolderBranchIcon, HomeIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <HomeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","import { CheckCircleIcon, ClockIcon, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nconst ErrorIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n};\n\nconst FinishedIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n};\n\nexport const RunStatusIcon = ({ status }: { status: string }) => {\n  switch (status) {\n    case 'FAILED':\n    case 'KILLED':\n      return <ErrorIcon />;\n    case 'FINISHED':\n      return <FinishedIcon />;\n    case 'SCHEDULED':\n    case 'RUNNING':\n      return <ClockIcon />; // This one is the same color as the link\n    default:\n      return null;\n  }\n};\n","// This media query applies to screens with a pixel density of 2 or higher\n\nimport { debounce } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { COLORS_PALETTE_DATALIST_ID } from '../../../../common/components/ColorsPaletteDatalist';\nimport { visuallyHidden } from '@databricks/design-system';\n\n// and higher resolution values (e.g. Retina displays). 192 dpi is double the \"default\" historical 96 dpi.\nconst HIGH_RESOLUTION_MEDIA_QUERY = '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n\nconst stripedHiddenBackgroundStyle = `repeating-linear-gradient(\n  135deg,\n  #959595 0,\n  #e7e7e7 1px,\n  #e7e7e7 2px,\n  #959595 3px,\n  #e7e7e7 4px,\n  #e7e7e7 5px,\n  #959595 6px,\n  #e7e7e7 7px,\n  #e7e7e7 8px,\n  #959595 9px,\n  #e7e7e7 10px,\n  #e7e7e7 11px,\n  #959595 12px,\n  #e7e7e7 13px,\n  #e7e7e7 14px\n)`;\n\n/**\n * Renders a colored rounded pill for a run.\n */\nexport const RunColorPill = ({\n  color,\n  hidden,\n  onChangeColor,\n  ...props\n}: {\n  color?: string;\n  hidden?: boolean;\n  onChangeColor?: (colorValue: string) => void;\n}) => {\n  const [colorValue, setColorValue] = useState<string | undefined>(undefined);\n\n  const onChangeColorDebounced = useMemo(() => {\n    // Implementations of <input type=\"color\"> vary from browser to browser, some browser\n    // fire an event on every color change so we debounce the event to avoid multiple\n    // calls to the onChangeColor handler.\n    if (onChangeColor) {\n      return debounce(onChangeColor, 300);\n    }\n    return () => {};\n  }, [onChangeColor]);\n\n  return (\n    <label\n      css={{\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        flexShrink: 0,\n        // Add a border to make the pill visible when using very light color\n        border: `1px solid ${hidden ? 'transparent' : 'rgba(0,0,0,0.1)'}`,\n        // Straighten it up on high-res screens\n        [HIGH_RESOLUTION_MEDIA_QUERY]: {\n          marginBottom: 1,\n        },\n        background: hidden ? stripedHiddenBackgroundStyle : undefined,\n        cursor: onChangeColor ? 'pointer' : 'default',\n        position: 'relative',\n        '&:hover': {\n          opacity: onChangeColor ? 0.8 : 1,\n        },\n      }}\n      style={{ backgroundColor: colorValue ?? color ?? 'transparent' }}\n      {...props}\n    >\n      <span\n        css={[\n          visuallyHidden,\n          {\n            userSelect: 'none',\n          },\n        ]}\n      >\n        {color}\n      </span>\n      {onChangeColor && (\n        <input\n          type=\"color\"\n          value={colorValue ?? color}\n          onChange={({ target }) => {\n            setColorValue(target.value);\n            onChangeColorDebounced(target.value);\n          }}\n          list={COLORS_PALETTE_DATALIST_ID}\n          css={{\n            appearance: 'none',\n            width: 0,\n            height: 0,\n            border: 0,\n            padding: 0,\n            position: 'absolute',\n            bottom: 0,\n            visibility: 'hidden',\n          }}\n        />\n      )}\n    </label>\n  );\n};\n","import { Table, TableCell, TableHeader, TableRow } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSchemaTableProps {\n  schema: any[];\n  filter: string;\n}\n\nexport const ExperimentViewDatasetSchemaTable = ({\n  schema,\n  filter,\n}: ExperimentViewDatasetSchemaTableProps): JSX.Element => {\n  const hasFilter = (name?: string, type?: string) => {\n    return (\n      filter === '' ||\n      name?.toLowerCase().includes(filter.toLowerCase()) ||\n      type?.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredSchema = schema.filter((row: { name: string; type: string }, _: number) =>\n    hasFilter(row.name, row.type),\n  );\n\n  const getNameHeader = () => {\n    return (\n      <FormattedMessage\n        defaultMessage=\"Name\"\n        description={'Header for \"name\" column in the experiment run dataset schema'}\n      />\n    );\n  };\n\n  const getTypeHeader = () => {\n    return <FormattedMessage defaultMessage=\"Type\" description={'Header for \"type\" column in the UC table schema'} />;\n  };\n\n  return (\n    <Table scrollable css={{ width: '100%' }}>\n      <TableRow isHeader>\n        <TableHeader>{getNameHeader()}</TableHeader>\n        <TableHeader>{getTypeHeader()}</TableHeader>\n      </TableRow>\n      <div onWheel={(e) => e.stopPropagation()}>\n        {filteredSchema.length === 0 ? (\n          <TableRow>\n            <TableCell>\n              <FormattedMessage\n                defaultMessage=\"No results match this search.\"\n                description=\"No results message in datasets drawer table\"\n              />\n            </TableCell>\n          </TableRow>\n        ) : (\n          filteredSchema.map((row: { name: string; type: string }, idx: number) => (\n            <TableRow key={`table-body-row-${idx}`}>\n              <TableCell>{row.name}</TableCell>\n              <TableCell>{row.type}</TableCell>\n            </TableRow>\n          ))\n        )}\n      </div>\n    </Table>\n  );\n};\n","import {\n  Header,\n  TableIcon,\n  useDesignSystemTheme,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableFilterInput,\n  Spacer,\n  Typography,\n} from '@databricks/design-system';\nimport { ExperimentViewDatasetSchemaTable } from './ExperimentViewDatasetSchemaTable';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport { useEffect, useMemo, useState } from 'react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface DatasetsCellRendererProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSchema = ({ datasetWithTags }: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset } = datasetWithTags;\n  const [filter, setFilter] = useState('');\n\n  if (dataset.schema === null || dataset.schema === '') {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100vh',\n        }}\n      >\n        <div\n          css={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignContent: 'center',\n          }}\n        >\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n  try {\n    const schema = JSON.parse(dataset.schema);\n    if ('mlflow_colspec' in schema) {\n      // if the dataset schema is colspec\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            height: '100vh',\n          }}\n        >\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              form: { width: '100%' },\n            }}\n          >\n            <TableFilterInput\n              value={filter}\n              placeholder=\"Search fields\"\n              onChange={(e) => setFilter(e.target.value)}\n              onClear={() => {\n                setFilter('');\n              }}\n              css={{ width: '100%' }}\n              containerProps={{ style: { width: 'auto' } }}\n            />\n          </div>\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              overflow: 'hidden',\n            }}\n          >\n            <ExperimentViewDatasetSchemaTable schema={schema.mlflow_colspec} filter={filter} />\n          </div>\n        </div>\n      );\n    } else if ('mlflow_tensorspec' in schema) {\n      // if the dataset schema is tensorspec\n      return (\n        <div css={{ height: '100vh' }}>\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n            }}\n          >\n            <TableIcon css={{ fontSize: '56px', color: theme.colors.grey600 }} />\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Array Datasource</div>} />\n            <Typography.Text color={theme.colors.grey600} css={{ textAlign: 'center' }}>\n              <FormattedMessage\n                defaultMessage=\"The dataset is an array. To see a preview of the dataset, view the dataset in the training notebook.\"\n                description=\"Notification when the dataset is an array data source in the experiment run dataset schema\"\n              />\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    } else {\n      // if the dataset schema is not colspec or tensorspec\n      return (\n        <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n          <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Unrecognized Schema Format</div>} />\n            <Typography.Text color={theme.colors.grey600}>\n              <FormattedMessage\n                defaultMessage=\"Raw Schema JSON: \"\n                description=\"Label for the raw schema JSON in the experiment run dataset schema\"\n              />\n              {JSON.stringify(schema)}\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    }\n  } catch {\n    return (\n      <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n        <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n};\n","import { Button, CopyIcon, NewWindowIcon, Typography } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\n\nexport interface DatasetLinkProps {\n  datasetWithTags: RunDatasetWithTags;\n  runTags: Record<string, { key: string; value: string }>;\n}\n\nexport const ExperimentViewDatasetLink = ({ datasetWithTags, runTags }: DatasetLinkProps) => {\n  const { dataset } = datasetWithTags;\n  if (dataset.sourceType === DatasetSourceTypes.HTTP || dataset.sourceType === DatasetSourceTypes.HUGGING_FACE) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <Button\n          type=\"primary\"\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_1\"\n          icon={<NewWindowIcon />}\n          href={url}\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Open dataset\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </Button>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.S3) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <CopyButton\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_2\"\n          icon={<CopyIcon />}\n          copyText={url}\n        >\n          <FormattedMessage\n            defaultMessage=\"Copy S3 URI to clipboard\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </CopyButton>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.EXTERNAL) {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_3\"\n        icon={<NewWindowIcon />}\n      >\n        <FormattedMessage\n          defaultMessage=\"Go to external location\"\n          description=\"Text for the external location link in the experiment run dataset drawer\"\n        />\n      </Button>\n    );\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSourceTypeProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceType = ({ datasetWithTags }: ExperimentViewDatasetSourceTypeProps) => {\n  const { dataset } = datasetWithTags;\n\n  const sourceType = dataset.sourceType;\n\n  const getSourceTypeLabel = () => {\n    if (sourceType === DatasetSourceTypes.HTTP || sourceType === DatasetSourceTypes.EXTERNAL) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"HTTP\"\n          description=\"Experiment dataset drawer > source type > HTTP source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"S3\"\n          description=\"Experiment dataset drawer > source type > S3 source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Hugging Face\"\n          description=\"Experiment dataset drawer > source type > Hugging Face source type label\"\n        />\n      );\n    }\n    return null;\n  };\n\n  const typeLabel = getSourceTypeLabel();\n\n  if (typeLabel) {\n    return (\n      <Typography.Hint>\n        <FormattedMessage\n          defaultMessage=\"Source type: {typeLabel}\"\n          description=\"Experiment dataset drawer > source type > label\"\n          values={{ typeLabel }}\n        />\n      </Typography.Hint>\n    );\n  }\n\n  return null;\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\n\nexport interface ExperimentViewDatasetSourceProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceURL = ({ datasetWithTags }: ExperimentViewDatasetSourceProps) => {\n  const { dataset } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  const sourceType = dataset.sourceType;\n\n  if (\n    sourceType === DatasetSourceTypes.HTTP ||\n    sourceType === DatasetSourceTypes.EXTERNAL ||\n    sourceType === DatasetSourceTypes.HUGGING_FACE\n  ) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <div\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            fontSize: theme.typography.fontSizeSm,\n            color: theme.colors.textSecondary,\n            columnGap: theme.spacing.xs,\n          }}\n          title={url}\n        >\n          URL:{' '}\n          <Typography.Link openInNewTab href={url} css={{ display: 'flex', overflow: 'hidden' }}>\n            <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{url}</span>\n          </Typography.Link>\n        </div>\n      );\n    }\n  }\n  if (sourceType === DatasetSourceTypes.S3) {\n    try {\n      const { uri } = JSON.parse(dataset.source);\n      if (uri) {\n        return (\n          <Typography.Hint\n            title={uri}\n            css={{\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            S3 URI: {uri}\n          </Typography.Hint>\n        );\n      }\n    } catch {\n      return null;\n    }\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport { RunDatasetWithTags } from '../../../../types';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentViewDatasetDigest = ({ datasetWithTags }: { datasetWithTags: RunDatasetWithTags }) => {\n  const { dataset } = datasetWithTags;\n  return (\n    <Typography.Hint>\n      <FormattedMessage\n        defaultMessage=\"Digest: {digest}\"\n        description=\"Experiment dataset drawer > digest > label and value\"\n        values={{ digest: <code>{dataset.digest}</code> }}\n      />\n    </Typography.Hint>\n  );\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport {\n  Button,\n  Drawer,\n  Header,\n  Spacer,\n  TableIcon,\n  Tag,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\nimport { Divider } from 'antd';\nimport { ExperimentViewDatasetSchema } from './ExperimentViewDatasetSchema';\nimport { ExperimentViewDatasetLink } from './ExperimentViewDatasetLink';\nimport { Link } from '../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewDatasetWithContext } from './ExperimentViewDatasetWithContext';\nimport { RunColorPill } from '../RunColorPill';\nimport { ExperimentViewDatasetSourceType } from './ExperimentViewDatasetSourceType';\nimport { ExperimentViewDatasetSourceURL } from './ExperimentViewDatasetSourceURL';\nimport { ExperimentViewDatasetDigest } from './ExperimentViewDatasetDigest';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../../../redux-types';\nimport { useGetExperimentRunColor } from '../../hooks/useExperimentRunColor';\n\nexport type DatasetWithRunType = {\n  datasetWithTags: RunDatasetWithTags;\n  runData: {\n    experimentId?: string;\n    tags?: Record<string, { key: string; value: string }>;\n    runUuid: string;\n    runName?: string;\n    datasets: RunDatasetWithTags[];\n  };\n};\n\nexport interface DatasetsCellRendererProps {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  selectedDatasetWithRun: DatasetWithRunType;\n  setSelectedDatasetWithRun: (datasetWithRun: DatasetWithRunType) => void;\n}\n\nconst DRAWER_WITDH = '800px';\nconst MAX_PROFILE_LENGTH = 80;\n\nexport const ExperimentViewDatasetDrawerImpl = ({\n  isOpen,\n  setIsOpen,\n  selectedDatasetWithRun,\n  setSelectedDatasetWithRun,\n}: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { datasetWithTags, runData } = selectedDatasetWithRun;\n  const contextTag = selectedDatasetWithRun\n    ? datasetWithTags?.tags?.find((tag) => tag.key === MLFLOW_RUN_DATASET_CONTEXT_TAG)\n    : undefined;\n  const fullProfile =\n    datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null'\n      ? datasetWithTags.dataset.profile\n      : undefined;\n\n  const getRunColor = useGetExperimentRunColor();\n  const { experimentId = '', tags = {} } = runData;\n\n  return (\n    <Drawer.Root\n      open={isOpen}\n      onOpenChange={(open) => {\n        if (!open) {\n          setIsOpen(false);\n        }\n      }}\n    >\n      <Drawer.Content\n        title={\n          <div css={{ display: 'flex', alignItems: 'center', height: '100%' }}>\n            <Typography.Title level={4} css={{ marginRight: theme.spacing.sm, marginBottom: 0 }}>\n              <FormattedMessage\n                defaultMessage=\"Data details for \"\n                description=\"Text for data details for the experiment run in the dataset drawer\"\n              />\n            </Typography.Title>\n            <Link to={Routes.getRunPageRoute(experimentId, runData.runUuid)} css={styles.runLink}>\n              <RunColorPill color={getRunColor(runData.runUuid)} />\n              <span css={styles.runName}>{runData.runName}</span>\n            </Link>\n          </div>\n        }\n        width={DRAWER_WITDH}\n        footer={<Spacer size=\"xs\" />}\n      >\n        <div\n          css={{\n            display: 'flex',\n            borderTop: `1px solid ${theme.colors.border}`,\n            height: '100%',\n            marginLeft: -theme.spacing.sm,\n          }}\n        >\n          {/* column for dataset selection */}\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '300px',\n              borderRight: `1px solid ${theme.colors.border}`,\n              height: '100%',\n            }}\n          >\n            <Typography.Text\n              color=\"secondary\"\n              css={{\n                marginBottom: theme.spacing.sm,\n                marginTop: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n              }}\n            >\n              {runData.datasets.length}{' '}\n              <FormattedMessage\n                defaultMessage=\"datasets used\"\n                description=\"Text for dataset count in the experiment run dataset drawer\"\n              />\n            </Typography.Text>\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n                overflow: 'auto',\n              }}\n              onWheel={(e) => e.stopPropagation()}\n            >\n              {runData.datasets.map((dataset) => (\n                <div\n                  key={`${dataset.dataset.name}-${dataset.dataset.digest}`}\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    backgroundColor:\n                      dataset.dataset.name === datasetWithTags.dataset.name &&\n                      dataset.dataset.digest === datasetWithTags.dataset.digest\n                        ? theme.colors.backgroundSecondary\n                        : 'transparent',\n                    borderTop: `1px solid ${theme.colors.border}`,\n                    paddingBottom: theme.spacing.sm,\n                    paddingTop: theme.spacing.sm,\n                    paddingLeft: theme.spacing.sm,\n                  }}\n                >\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetdrawer.tsx_151\"\n                    type=\"link\"\n                    css={{\n                      textAlign: 'left',\n                      overflowX: 'auto',\n                      overflowY: 'hidden',\n                    }}\n                    onClick={() => {\n                      setSelectedDatasetWithRun({ datasetWithTags: dataset, runData: runData });\n                      setIsOpen(true);\n                    }}\n                  >\n                    <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink={false} />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* column for dataset details */}\n          <div\n            css={{\n              overflow: 'hidden',\n              paddingLeft: theme.spacing.md,\n              paddingTop: theme.spacing.md,\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n            }}\n          >\n            {/* dataset metadata */}\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.sm,\n              }}\n            >\n              <div css={{ flex: '1' }}>\n                <Header\n                  title={\n                    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                      <TableIcon css={{ marginRight: theme.spacing.xs }} />\n                      <Tooltip title={datasetWithTags.dataset.name}>\n                        <Typography.Title ellipsis level={3} css={{ marginBottom: 0, maxWidth: 200 }}>\n                          {datasetWithTags.dataset.name}\n                        </Typography.Title>\n                      </Tooltip>\n                      {contextTag && (\n                        <Tag\n                          css={{\n                            textTransform: 'capitalize',\n                            marginLeft: theme.spacing.xs,\n                            marginRight: theme.spacing.xs,\n                          }}\n                        >\n                          {contextTag.value}\n                        </Tag>\n                      )}\n                    </div>\n                  }\n                />\n                <Typography.Title\n                  level={4}\n                  color=\"secondary\"\n                  css={{ marginBottom: theme.spacing.xs, marginTop: theme.spacing.xs }}\n                  title={fullProfile}\n                >\n                  {datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null' ? (\n                    datasetWithTags.dataset.profile.length > MAX_PROFILE_LENGTH ? (\n                      `${datasetWithTags.dataset.profile.substring(0, MAX_PROFILE_LENGTH)} ...`\n                    ) : (\n                      datasetWithTags.dataset.profile\n                    )\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage=\"No profile available\"\n                      description=\"Text for no profile available in the experiment run dataset drawer\"\n                    />\n                  )}\n                </Typography.Title>\n              </div>\n              <ExperimentViewDatasetLink datasetWithTags={datasetWithTags} runTags={tags} />\n            </div>\n            <div css={{ flexShrink: 0, display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n              <ExperimentViewDatasetDigest datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceType datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceURL datasetWithTags={datasetWithTags} />\n            </div>\n            {/* dataset schema */}\n            <Divider css={{ marginTop: theme.spacing.sm, marginBottom: theme.spacing.xs }} />\n            <ExperimentViewDatasetSchema datasetWithTags={datasetWithTags} />\n          </div>\n        </div>\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n\n// Memoize the component so it rerenders only when props change directly, preventing\n// rerenders caused e.g. by the overarching context provider.\nexport const ExperimentViewDatasetDrawer = React.memo(ExperimentViewDatasetDrawerImpl);\n\nconst styles = {\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    fontSize: '13px',\n  },\n};\n","import { TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\n\nexport interface DatasetWithContextProps {\n  datasetWithTags: RunDatasetWithTags;\n  displayTextAsLink: boolean;\n  className?: string;\n}\n\nexport const ExperimentViewDatasetWithContext = ({\n  datasetWithTags,\n  displayTextAsLink,\n  className,\n}: DatasetWithContextProps) => {\n  const { dataset, tags } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: theme.spacing.xs,\n        marginBottom: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      <TableIcon css={{ marginRight: theme.spacing.xs, color: theme.colors.textSecondary }} />\n      {displayTextAsLink ? (\n        <div>\n          {dataset.name} ({dataset.digest})\n        </div>\n      ) : (\n        <Typography.Text size=\"md\" css={{ marginBottom: 0 }}>\n          {dataset.name} ({dataset.digest})\n        </Typography.Text>\n      )}\n      <Tag\n        css={{\n          textTransform: 'capitalize',\n          marginLeft: theme.spacing.xs,\n          marginRight: theme.spacing.xs,\n        }}\n      >\n        {tags && tags.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG)?.value}\n      </Tag>\n    </div>\n  );\n};\n","import React, { ReactNode, useMemo } from 'react';\nimport { ExperimentPageUIState, createExperimentPageUIState } from '../models/ExperimentPageUIState';\n\nconst ExperimentPageUISetStateContext = React.createContext<\n  React.Dispatch<React.SetStateAction<ExperimentPageUIState>>\n>((state) => state);\n\n// Creates contexts for setting current UI state\nexport const ExperimentPageUIStateContextProvider = ({\n  children,\n  setUIState,\n}: {\n  children: ReactNode;\n  setUIState: React.Dispatch<React.SetStateAction<ExperimentPageUIState>>;\n}) => (\n  <ExperimentPageUISetStateContext.Provider value={setUIState}>{children}</ExperimentPageUISetStateContext.Provider>\n);\n\nexport const useUpdateExperimentViewUIState = () => React.useContext(ExperimentPageUISetStateContext);\n","import qs from 'qs';\nimport { useMemo } from 'react';\nimport { useParams, useLocation } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nexport type UseExperimentIdsResult = string[];\n\n/**\n * Hook that returns requested experiment IDs basing on the URL.\n * It extracts ids basing on either route match (in case of a single experiment)\n * or query params (in case of comparing experiments.).\n *\n * @returns array of strings with experiment IDs\n */\n\nexport const useExperimentIds = (): UseExperimentIdsResult => {\n  const params = useParams<{ experimentId?: string }>();\n  const location = useLocation();\n\n  const normalizedLocationSearch = useMemo(() => decodeURIComponent(location.search), [location.search]);\n\n  /**\n   * Memoized string containing experiment IDs for comparison (\"?experiments=...\")\n   */\n  const compareExperimentIdsQueryParam = useMemo(() => {\n    const queryParams = qs.parse(normalizedLocationSearch.substring(1));\n    if (queryParams['experiments']) {\n      const experimentIdsRaw = queryParams['experiments'];\n      return experimentIdsRaw?.toString() || '';\n    }\n\n    return '';\n  }, [normalizedLocationSearch]);\n\n  return useMemo(() => {\n    // Case #1: single experiment\n    if (params?.experimentId) {\n      return [params?.experimentId];\n    }\n\n    // Case #2: multiple (compare) experiments\n    if (compareExperimentIdsQueryParam) {\n      try {\n        return JSON.parse(compareExperimentIdsQueryParam);\n      } catch {\n        // Apparently URL is malformed\n        Utils.logErrorAndNotifyUser(`Could not parse experiment query parameter ${compareExperimentIdsQueryParam}`);\n        return '';\n      }\n    }\n\n    return [];\n  }, [compareExperimentIdsQueryParam, params?.experimentId]);\n};\n","import Utils from 'common/utils/Utils';\nimport { listImagesApi } from 'experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from 'experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from 'redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from 'experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal } from '@databricks/design-system';\n\ntype Props = {\n  isOpen: boolean;\n  handleSubmit: (...args: any[]) => any;\n  onClose: (...args: any[]) => any;\n  title: React.ReactNode;\n  helpText: React.ReactNode;\n  confirmButtonText: React.ReactNode;\n};\n\ntype State = any;\n\nexport class ConfirmModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onRequestCloseHandler = this.onRequestCloseHandler.bind(this);\n    this.handleSubmitWrapper = this.handleSubmitWrapper.bind(this);\n  }\n\n  state = {\n    isSubmitting: false,\n  };\n\n  onRequestCloseHandler() {\n    if (!this.state.isSubmitting) {\n      this.props.onClose();\n    }\n  }\n\n  handleSubmitWrapper() {\n    this.setState({ isSubmitting: true });\n    return this.props.handleSubmit().finally(() => {\n      this.props.onClose();\n      this.setState({ isSubmitting: false });\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"confirm-modal\"\n        title={this.props.title}\n        visible={this.props.isOpen}\n        onOk={this.handleSubmitWrapper}\n        okText={this.props.confirmButtonText}\n        confirmLoading={this.state.isSubmitting}\n        onCancel={this.onRequestCloseHandler}\n        // @ts-expect-error TS(2322): Type '{ children: Element; \"data-testid\": string; ... Remove this comment to see the full error message\n        centered\n      >\n        <div className=\"modal-explanatory-text\">{this.props.helpText}</div>\n      </Modal>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { IntlShape, injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\n\ntype Props = {\n  okText?: string;\n  cancelText?: string;\n  isOpen?: boolean;\n  onClose: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n  className?: string;\n  footer?: React.ReactNode;\n  handleSubmit: (...args: any[]) => any;\n  title: React.ReactNode;\n};\n\ntype State = any;\n\n/**\n * Generic modal that has a title and an input field with a save/submit button.\n * As of now, it is used to display the 'Rename Run' and 'Rename Experiment' modals.\n */\nexport class GenericInputModal extends Component<Props, State> {\n  state = {\n    isSubmitting: false,\n  };\n\n  formRef = React.createRef();\n\n  onSubmit = async () => {\n    this.setState({ isSubmitting: true });\n    try {\n      const values = await (this as any).formRef.current.validateFields();\n\n      // call handleSubmit from parent component, pass form values\n      // handleSubmit is expected to return a promise\n      return await this.props\n        .handleSubmit(values)\n        .then(this.resetAndClearModalForm)\n        .catch(this.handleSubmitFailure)\n        .finally(this.onRequestCloseHandler);\n    } catch (e) {\n      this.setState({ isSubmitting: false });\n      return Promise.reject(e);\n    }\n  };\n\n  resetAndClearModalForm = () => {\n    this.setState({ isSubmitting: false });\n    (this as any).formRef.current.resetFields();\n  };\n\n  handleSubmitFailure = (e: any) => {\n    this.setState({ isSubmitting: false });\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  onRequestCloseHandler = () => {\n    if (!this.state.isSubmitting) {\n      this.resetAndClearModalForm();\n      this.props.onClose();\n    }\n  };\n\n  handleCancel = () => {\n    this.onRequestCloseHandler();\n    // Check for optional `onCancel` method prop.\n    if (this.props.onCancel !== undefined) {\n      this.props.onCancel();\n    }\n  };\n\n  render() {\n    const { isSubmitting } = this.state;\n    const { okText, cancelText, isOpen, footer, children } = this.props;\n\n    // add props (ref) to passed component\n    const displayForm = React.Children.map(children, (child) => {\n      // Checking isValidElement is the safe way and avoids a typescript\n      // error too.\n      if (React.isValidElement(child)) {\n        // @ts-expect-error TODO: fix this\n        return React.cloneElement(child, { innerRef: this.formRef });\n      }\n      return child;\n    });\n\n    return (\n      <Modal\n        data-testid=\"mlflow-input-modal\"\n        className={this.props.className}\n        title={this.props.title}\n        // @ts-expect-error TS(2322): Type '{ children: {}[] | null | undefined; \"data-t... Remove this comment to see the full error message\n        width={540}\n        visible={isOpen}\n        onOk={this.onSubmit}\n        okText={okText}\n        cancelText={cancelText}\n        confirmLoading={isSubmitting}\n        onCancel={this.handleCancel}\n        footer={footer}\n        centered\n      >\n        {displayForm}\n      </Modal>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { Form, Input } from '@databricks/design-system';\n\nexport const NEW_NAME_FIELD = 'newName';\n\ntype Props = {\n  type: string;\n  name: string;\n  visible: boolean;\n  validator?: (...args: any[]) => any;\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for updating a run's or experiment's name.\n */\nclass RenameFormComponent extends Component<Props> {\n  inputToAutoFocus: any;\n\n  componentDidUpdate(prevProps: Props) {\n    this.autoFocus(prevProps);\n    this.resetFields(prevProps);\n  }\n\n  autoFocusInputRef = (inputToAutoFocus: any) => {\n    this.inputToAutoFocus = inputToAutoFocus;\n    inputToAutoFocus && inputToAutoFocus.focus();\n    inputToAutoFocus && inputToAutoFocus.select();\n  };\n\n  autoFocus = (prevProps: any) => {\n    if (prevProps.visible === false && this.props.visible === true) {\n      // focus on input field\n      this.inputToAutoFocus && this.inputToAutoFocus.focus();\n      // select text\n      this.inputToAutoFocus && this.inputToAutoFocus.select();\n    }\n  };\n\n  resetFields = (prevProps: any) => {\n    const formRef = this.props.innerRef;\n    if (prevProps.name !== this.props.name) {\n      // reset input field to reset displayed initialValue\n      formRef.current.resetFields([NEW_NAME_FIELD]);\n    }\n  };\n\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; layout: \"vert... Remove this comment to see the full error message\n      <Form ref={this.props.innerRef} layout=\"vertical\">\n        <Form.Item\n          name={NEW_NAME_FIELD}\n          initialValue={this.props.name}\n          rules={[\n            { required: true, message: `Please input a new name for the ${this.props.type}.` },\n            { validator: this.props.validator },\n          ]}\n          label={`New ${this.props.type} name`}\n        >\n          <Input\n            placeholder={`Input a ${this.props.type} name`}\n            ref={this.autoFocusInputRef}\n            data-testid=\"rename-modal-input\"\n          />\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport const RenameForm = RenameFormComponent;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IntlShape, injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: (...args: any[]) => any;\n  updateRunApi: (...args: any[]) => any;\n  intl: IntlShape;\n  onSuccess?: (...args: any[]) => any;\n};\n\nexport class RenameRunModalImpl extends Component<Props> {\n  handleRenameRun = (values: any) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          // @ts-expect-error TS(2769): No overload matches this call.\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import { LegacySelect, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { ComponentProps, PropsWithChildren } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { makeCanonicalSortKey } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\n\n/**\n * Represents a field in the compare run charts configuration modal.\n * Displays a title and content with proper margins.\n */\nexport const RunsChartsConfigureField = ({\n  title,\n  children,\n}: PropsWithChildren<{\n  title: string;\n}>) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ marginBottom: theme.spacing.md * 2 }} data-testid=\"experiment-view-compare-runs-config-field\">\n      <Typography.Title level={4}>{title}:</Typography.Title>\n      {children}\n    </div>\n  );\n};\n\n/**\n * A searchable select for selecting metric or param from a categorized list.\n */\nexport const RunsChartsMetricParamSelect = ({\n  value,\n  onChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  value: string;\n  onChange: ComponentProps<typeof LegacySelect>['onChange'];\n  metricKeyList?: string[];\n  paramKeyList?: string[];\n}) => {\n  const { formatMessage } = useIntl();\n\n  const isEmpty = !paramKeyList?.length && !metricKeyList?.length;\n\n  return (\n    <LegacySelect\n      css={styles.selectFull}\n      value={\n        isEmpty\n          ? formatMessage({\n              description:\n                'Message displayed when no metrics or params are available in the compare runs chart configure modal',\n              defaultMessage: 'No metrics or parameters available',\n            })\n          : value\n      }\n      disabled={isEmpty}\n      onChange={onChange}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList?.length ? (\n        <LegacySelect.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Metrics',\n            description: \"Label for 'metrics' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {metricKeyList.map((metric) => (\n            <LegacySelect.Option\n              key={makeCanonicalSortKey('METRIC', metric)}\n              value={makeCanonicalSortKey('METRIC', metric)}\n            >\n              {metric}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect.OptGroup>\n      ) : null}\n      {paramKeyList?.length ? (\n        <LegacySelect.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Params',\n            description: \"Label for 'params' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {paramKeyList.map((param) => (\n            <LegacySelect.Option\n              key={makeCanonicalSortKey('PARAM', param)}\n              value={makeCanonicalSortKey('PARAM', param)}\n            >\n              {param}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect.OptGroup>\n      ) : null}\n    </LegacySelect>\n  );\n};\n\nexport const RunsChartsRunNumberSelect = ({\n  onChange,\n  value,\n  options,\n}: {\n  value?: number;\n  onChange: ComponentProps<typeof LegacySelect<number>>['onChange'];\n  options: (number | { value: number; label: React.ReactNode })[];\n}) => {\n  const { formatMessage } = useIntl();\n\n  // After moving to the new run rows visibility model, we don't configure run count per chart\n  if (shouldUseNewRunRowsVisibilityModel()) {\n    return null;\n  }\n  return (\n    <RunsChartsConfigureField\n      title={formatMessage({\n        defaultMessage: 'Max. no of runs shown',\n        description: 'Label for the control allowing selection of number of runs displayed in a compare runs chart',\n      })}\n    >\n      <LegacySelect<number> css={styles.selectFull} value={value} onChange={onChange}>\n        {options.map((countOption) => {\n          const optionValue = typeof countOption === 'number' ? countOption : countOption.value;\n          const label = typeof countOption === 'number' ? countOption : countOption.label;\n          return (\n            <LegacySelect.Option key={optionValue} value={optionValue}>\n              {label}\n            </LegacySelect.Option>\n          );\n        })}\n      </LegacySelect>\n    </RunsChartsConfigureField>\n  );\n};\n\nexport const runsChartsRunCountDefaultOptions: { value: number; label: React.ReactNode }[] = [\n  // We're not using any procedural generation so react-intl extractor can parse it\n  {\n    value: 5,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"5\"\n        description=\"Label for 5 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 10,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"10\"\n        description=\"Label for 10 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 20,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"20\"\n        description=\"Label for 20 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n];\n\nconst styles = { selectFull: { width: '100%' } };\n","import { LegacySelect } from '@databricks/design-system';\nimport { useCallback, useEffect } from 'react';\nimport type { RunsChartsCardConfig, RunsChartsBarCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartsConfigureField,\n  runsChartsRunCountDefaultOptions,\n  RunsChartsRunNumberSelect,\n} from './RunsChartsConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureBarChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n}: {\n  metricKeyList: string[];\n  state: Partial<RunsChartsBarCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsBarCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string) => {\n      onStateChange((current) => ({ ...(current as RunsChartsBarCardConfig), metricKey }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsBarCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList]);\n\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <>\n      <RunsChartsConfigureField title=\"Metric\">\n        <LegacySelect\n          css={styles.selectFull}\n          value={emptyMetricsList ? 'No metrics available' : state.metricKey}\n          onChange={updateMetric}\n          disabled={emptyMetricsList}\n          dangerouslySetAntdProps={{ showSearch: true }}\n        >\n          {metricKeyList.map((metric) => (\n            <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n              {metric}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n      </RunsChartsConfigureField>\n      <RunsChartsRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={runsChartsRunCountDefaultOptions}\n      />\n    </>\n  );\n};\n\nconst styles = { selectFull: { width: '100%' } };\n","import { LegacySelect } from '@databricks/design-system';\nimport { useCallback } from 'react';\nimport type { RunsChartsCardConfig, RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureParallelChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: Partial<RunsChartsParallelCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsParallelCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating selected metrics and params\n   */\n\n  const updateSelectedParams = useCallback(\n    (selectedParams: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsParallelCardConfig),\n        selectedParams,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedMetrics = useCallback(\n    (selectedMetrics: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsParallelCardConfig),\n        selectedMetrics,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const emptyMetricsList = metricKeyList.length === 0;\n  const emptyParamsList = paramKeyList.length === 0;\n\n  return (\n    <>\n      <RunsChartsConfigureField title=\"Params\">\n        <LegacySelect\n          mode={emptyParamsList ? undefined : 'multiple'}\n          onChange={updateSelectedParams}\n          style={{\n            width: 300,\n          }}\n          value={emptyParamsList ? ('No parameters available' as any) : state.selectedParams}\n          disabled={emptyParamsList}\n        >\n          {paramKeyList.map((param) => (\n            <LegacySelect.Option value={param} key={param}>\n              {param}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"Metrics\">\n        <LegacySelect\n          mode={emptyMetricsList ? undefined : 'multiple'}\n          onChange={updateSelectedMetrics}\n          style={{\n            width: 300,\n          }}\n          value={emptyMetricsList ? ('No metrics available' as any) : state.selectedMetrics}\n          disabled={emptyMetricsList}\n        >\n          {metricKeyList.map((metric) => (\n            <LegacySelect.Option value={metric} key={metric}>\n              {metric}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import {\n  Radio,\n  LegacySelect,\n  Switch,\n  Tooltip,\n  QuestionMarkIcon,\n  Form,\n  useDesignSystemTheme,\n  ThemeType,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  InfoIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { RunsChartsCardConfig, RunsChartsLineCardConfig } from '../../runs-charts.types';\nimport { RunsChartsConfigureField, RunsChartsRunNumberSelect } from './RunsChartsConfigure.common';\nimport { shouldEnableDeepLearningUIPhase3 } from 'common/utils/FeatureUtils';\nimport { RunsChartsLineChartXAxisType } from 'experiment-tracking/components/runs-charts/components/RunsCharts.common';\nimport { LineSmoothSlider } from 'experiment-tracking/components/LineSmoothSlider';\n\nconst renderMetricSelectorV1 = ({\n  metricKeyList,\n  metricKey,\n  updateMetric,\n}: {\n  metricKeyList: string[];\n  metricKey?: string;\n  updateMetric: (metricKey: string) => void;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <LegacySelect\n      css={styles.selectFull}\n      value={emptyMetricsList ? 'No metrics available' : metricKey}\n      onChange={updateMetric}\n      disabled={emptyMetricsList}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList.map((metric) => (\n        <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n          {metric}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n};\n\nconst renderMetricSelectorV2 = ({\n  metricKeyList,\n  selectedMetricKeys,\n  updateSelectedMetrics,\n}: {\n  metricKeyList: string[];\n  selectedMetricKeys?: string[];\n  updateSelectedMetrics: (metricKeys: string[]) => void;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <LegacySelect\n      mode=\"multiple\"\n      placeholder={\n        emptyMetricsList ? (\n          <FormattedMessage\n            defaultMessage=\"No metrics available\"\n            description=\"Text shown in a disabled multi-selector when there are no selectable metrics.\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Select metrics\"\n            description=\"Placeholder text for a metric multi-selector when configuring a line chart\"\n          />\n        )\n      }\n      css={styles.selectFull}\n      value={emptyMetricsList ? [] : selectedMetricKeys}\n      onChange={updateSelectedMetrics}\n      disabled={emptyMetricsList}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList.map((metric) => (\n        <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n          {metric}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n};\n\nconst renderXAxisMetricSelector = ({\n  theme,\n  metricKeyList,\n  selectedXAxisMetricKey,\n  updateSelectedXAxisMetricKey,\n}: {\n  theme: ThemeType;\n  metricKeyList: string[];\n  selectedXAxisMetricKey?: string;\n  updateSelectedXAxisMetricKey: (metricKey: string) => void;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <Radio value={RunsChartsLineChartXAxisType.METRIC}>\n      <FormattedMessage\n        defaultMessage=\"Metric\"\n        description=\"Label for a radio button that configures the x-axis on a line chart. This option makes the X-axis a custom metric that the user selects.\"\n      />\n      <LegacySelect\n        css={{\n          marginTop: theme.spacing.xs,\n          width: '100%',\n        }}\n        value={selectedXAxisMetricKey || undefined}\n        placeholder={\n          emptyMetricsList ? (\n            <FormattedMessage\n              defaultMessage=\"No metrics available\"\n              description=\"Text shown in a disabled metric selector when there are no selectable metrics.\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Select metric\"\n              description=\"Placeholder text for a metric selector when configuring a line chart\"\n            />\n          )\n        }\n        onClick={(e: React.MouseEvent<HTMLElement>) => {\n          // this is to prevent the radio button\n          // from automatically closing the selector\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onChange={updateSelectedXAxisMetricKey}\n        disabled={emptyMetricsList}\n        dangerouslySetAntdProps={{ showSearch: true }}\n      >\n        {metricKeyList.map((metric) => (\n          <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n            {metric}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n    </Radio>\n  );\n};\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureLineChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n}: {\n  metricKeyList: string[];\n  state: Partial<RunsChartsLineCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsLineCardConfig) => void;\n}) => {\n  const shouldEnableMetricsOnXAxis = shouldEnableDeepLearningUIPhase3();\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const runSelectOptions = [5, 10, 20, 50, 100];\n\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string) => {\n      onStateChange((current) => ({ ...(current as RunsChartsLineCardConfig), metricKey }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedMetrics = useCallback(\n    (metricKeys: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        metricKey: metricKeys[0],\n        selectedMetricKeys: metricKeys,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateXAxisKey = useCallback(\n    (xAxisKey: RunsChartsLineCardConfig['xAxisKey']) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        xAxisKey,\n        selectedXAxisMetricKey: '',\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateXAxisScaleType = useCallback(\n    (isLogType: boolean) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        xAxisScaleType: isLogType ? 'log' : 'linear',\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedXAxisMetricKey = useCallback(\n    (selectedXAxisMetricKey: string) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        selectedXAxisMetricKey,\n        xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateYAxisType = useCallback(\n    (isLogType: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        scaleType: isLogType ? 'log' : 'linear',\n      })),\n    [onStateChange],\n  );\n\n  const updateSmoothing = useCallback(\n    (lineSmoothness: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        lineSmoothness: lineSmoothness,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList]);\n\n  // for backwards compatibility, if selectedMetricKeys\n  // is not present, set it using metricKey.\n  useEffect(() => {\n    if (state.selectedMetricKeys === undefined && state.metricKey !== undefined && state.metricKey !== '') {\n      updateSelectedMetrics([state.metricKey]);\n    }\n  }, [state.selectedMetricKeys, state.metricKey, updateSelectedMetrics]);\n\n  return (\n    <>\n      <RunsChartsConfigureField title=\"Metric (Y-axis)\">\n        {renderMetricSelectorV2({\n          metricKeyList,\n          selectedMetricKeys: state.selectedMetricKeys,\n          updateSelectedMetrics,\n        })}\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"X-axis\">\n        <Radio.Group\n          name=\"runs-charts-field-group-x-axis\"\n          value={state.xAxisKey}\n          onChange={({ target: { value } }) => updateXAxisKey(value)}\n        >\n          <Radio value={RunsChartsLineChartXAxisType.STEP}>\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the step number that the metrics were logged.\"\n            />\n          </Radio>\n          <Radio value={RunsChartsLineChartXAxisType.TIME}>\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the absolute time that the metrics were logged.\"\n            />\n            <Tooltip\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Absolute date and time\"\n                  description=\"A tooltip line chart configuration for the step function of wall time\"\n                />\n              }\n              placement=\"right\"\n            >\n              {' '}\n              <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n            </Tooltip>\n          </Radio>\n          <Radio value={RunsChartsLineChartXAxisType.TIME_RELATIVE}>\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Label for a radio button that configures the x-axis on a line chart. This option is for relative time since the first metric was logged.\"\n            />\n            <Tooltip\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Amount of time that has passed since the first metric value was logged\"\n                  description=\"A tooltip line chart configuration for the step function of relative time\"\n                />\n              }\n              placement=\"right\"\n            >\n              {' '}\n              <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n            </Tooltip>\n          </Radio>\n          {shouldEnableMetricsOnXAxis &&\n            renderXAxisMetricSelector({\n              theme,\n              metricKeyList,\n              selectedXAxisMetricKey: state.selectedXAxisMetricKey,\n              updateSelectedXAxisMetricKey,\n            })}\n        </Radio.Group>\n      </RunsChartsConfigureField>\n      {state.xAxisKey === RunsChartsLineChartXAxisType.STEP && (\n        <RunsChartsConfigureField title=\"X-axis log scale\">\n          <Switch checked={state.xAxisScaleType === 'log'} onChange={updateXAxisScaleType} label=\"Enabled\" />\n        </RunsChartsConfigureField>\n      )}\n      <RunsChartsConfigureField title=\"Y-axis log scale\">\n        <Switch checked={state.scaleType === 'log'} onChange={updateYAxisType} label=\"Enabled\" />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={intl.formatMessage({\n          defaultMessage: 'Display points',\n          description: 'Runs charts > line chart > display points > label',\n        })}\n      >\n        <SegmentedControlGroup\n          name={intl.formatMessage({\n            defaultMessage: 'Display points',\n            description: 'Runs charts > line chart > display points > label',\n          })}\n          value={state.displayPoints}\n          onChange={({ target }) => {\n            onStateChange((current) => ({\n              ...(current as RunsChartsLineCardConfig),\n              displayPoints: target.value,\n            }));\n          }}\n        >\n          <SegmentedControlButton\n            value={undefined}\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'Auto',\n                description: 'Runs charts > line chart > display points > auto setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"Auto\"\n              description=\"Runs charts > line chart > display points > auto setting label\"\n            />{' '}\n            <Tooltip\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Show points on line charts if there are fewer than 60 data points per trace\"\n                  description=\"Runs charts > line chart > display points > auto tooltip\"\n                />\n              }\n            >\n              <InfoIcon />\n            </Tooltip>\n          </SegmentedControlButton>\n          <SegmentedControlButton\n            value\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'On',\n                description: 'Runs charts > line chart > display points > on setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"On\"\n              description=\"Runs charts > line chart > display points > on setting label\"\n            />\n          </SegmentedControlButton>\n          <SegmentedControlButton\n            value={false}\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'Off',\n                description: 'Runs charts > line chart > display points > off setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"Off\"\n              description=\"Runs charts > line chart > display points > off setting label\"\n            />\n          </SegmentedControlButton>\n        </SegmentedControlGroup>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"Line smoothness\">\n        <LineSmoothSlider\n          data-testid=\"smoothness-toggle\"\n          min={0}\n          max={100}\n          onChange={updateSmoothing}\n          defaultValue={state.lineSmoothness ? state.lineSmoothness : 0}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={runSelectOptions}\n      />\n    </>\n  );\n};\n\nconst styles = {\n  selectFull: { width: '100%' },\n  timeStepQuestionMarkIcon: () => ({\n    svg: { width: 12, height: 12 },\n  }),\n};\n","import { LegacySkeleton } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState } from '../../../../../redux-types';\nimport { MetricHistoryByName } from '../../../../types';\nimport { RunsChartsLineChartXAxisType, type RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsMetricsLinePlot } from '../RunsMetricsLinePlot';\nimport { RunsChartsTooltipMode, useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsLineCardConfig } from '../../runs-charts.types';\nimport { shouldEnableDeepLearningUIPhase3 } from '../../../../../common/utils/FeatureUtils';\nimport { useSampledMetricHistory } from '../../hooks/useSampledMetricHistory';\nimport { compact, uniq } from 'lodash';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { useGroupedChartRunData } from '../../../runs-compare/hooks/useGroupedChartRunData';\n\nexport const RunsChartsConfigureLineChartPreviewImpl = ({\n  previewData,\n  cardConfig,\n  metricsByRunUuid,\n  groupBy,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsLineCardConfig;\n  groupBy: RunsGroupByConfig | null;\n\n  metricsByRunUuid: Record<string, MetricHistoryByName>;\n}) => {\n  const usingMultipleRunsHoverTooltip = shouldEnableDeepLearningUIPhase3();\n\n  const isGrouped = useMemo(() => previewData.some((r) => r.groupParentInfo), [previewData]);\n\n  const { aggregateFunction } = groupBy || {};\n\n  const runUuidsToFetch = useMemo(() => {\n    if (isGrouped) {\n      const runsInGroups = compact(previewData.map((r) => r.groupParentInfo)).flatMap((g) => g.runUuids);\n      const ungroupedRuns = compact(\n        previewData.filter((r) => !r.groupParentInfo && !r.belongsToGroup).map((r) => r.runInfo?.runUuid),\n      );\n      return [...runsInGroups, ...ungroupedRuns];\n    }\n    return compact(previewData.map((r) => r.runInfo)).map((g) => g.runUuid);\n  }, [previewData, isGrouped]);\n\n  const metricKeysToFetch = useMemo(() => {\n    const fallback = [cardConfig.metricKey];\n\n    const yAxisKeys = cardConfig.selectedMetricKeys ?? fallback;\n    const xAxisKeys = !cardConfig.selectedXAxisMetricKey ? [] : [cardConfig.selectedXAxisMetricKey];\n    return yAxisKeys.concat(xAxisKeys);\n  }, [cardConfig.metricKey, cardConfig.selectedMetricKeys, cardConfig.selectedXAxisMetricKey]);\n\n  const { resultsByRunUuid, isLoading } = useSampledMetricHistory({\n    runUuids: runUuidsToFetch,\n    metricKeys: metricKeysToFetch,\n    enabled: true,\n    maxResults: 320,\n    autoRefreshEnabled: false,\n  });\n\n  const sampledData = useMemo(\n    () =>\n      previewData.map((run) => {\n        const metricsHistory = metricKeysToFetch.reduce((acc: MetricHistoryByName, key) => {\n          const history = resultsByRunUuid[run.uuid]?.[key]?.metricsHistory;\n          if (history) {\n            acc[key] = history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...run,\n          metricsHistory,\n        };\n      }),\n    [metricKeysToFetch, resultsByRunUuid, previewData],\n  );\n\n  const sampledGroupData = useGroupedChartRunData({\n    enabled: isGrouped,\n    ungroupedRunsData: sampledData,\n    metricKeys: metricKeysToFetch,\n    sampledDataResultsByRunUuid: resultsByRunUuid,\n    aggregateFunction,\n    selectedXAxisMetricKey:\n      cardConfig.xAxisKey === RunsChartsLineChartXAxisType.METRIC ? cardConfig.selectedXAxisMetricKey : undefined,\n  });\n\n  // Use grouped data traces only if enabled and if there are any groups\n  const chartData = isGrouped ? sampledGroupData : sampledData;\n\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip(\n    cardConfig,\n    usingMultipleRunsHoverTooltip ? RunsChartsTooltipMode.MultipleTracesWithScanline : RunsChartsTooltipMode.Simple,\n  );\n\n  if (isLoading) {\n    return <LegacySkeleton />;\n  }\n\n  return (\n    <RunsMetricsLinePlot\n      runsData={chartData}\n      metricKey={cardConfig.metricKey}\n      selectedMetricKeys={cardConfig.selectedMetricKeys}\n      scaleType={cardConfig.scaleType}\n      xAxisScaleType={cardConfig.xAxisScaleType}\n      lineSmoothness={cardConfig.lineSmoothness}\n      xAxisKey={cardConfig.xAxisKey}\n      selectedXAxisMetricKey={cardConfig.selectedXAxisMetricKey}\n      displayPoints={cardConfig.displayPoints}\n      useDefaultHoverBox={false}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  );\n};\n\nconst mapStateToProps = ({ entities: { metricsByRunUuid } }: ReduxState) => ({\n  metricsByRunUuid,\n});\n\n/**\n * Preview of line chart used in compare runs configuration modal\n */\nexport const RunsChartsConfigureLineChartPreview = connect(mapStateToProps, undefined, undefined, {\n  areStatesEqual: (nextState, prevState) => nextState.entities.metricsByRunUuid === prevState.entities.metricsByRunUuid,\n})(RunsChartsConfigureLineChartPreviewImpl);\n","import { RunsChartsRunData } from '../RunsCharts.common';\nimport LazyParallelCoordinatesPlot, { processParallelCoordinateData } from '../charts/LazyParallelCoordinatesPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport const RunsChartsConfigureParallelChartPreview = ({\n  previewData,\n  cardConfig,\n  groupBy,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsParallelCardConfig;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  const selectedParamsCount = cardConfig.selectedParams?.length || 0;\n  const selectedMetricsCount = cardConfig.selectedMetrics?.length || 0;\n\n  const isConfigured = selectedParamsCount + selectedMetricsCount >= 2;\n\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip(cardConfig);\n\n  const containsStringValues = useMemo(\n    () =>\n      cardConfig.selectedParams?.some(\n        (paramKey) => previewData?.some((dataTrace) => isNaN(Number(dataTrace.params[paramKey]?.value))),\n        [cardConfig.selectedParams, previewData],\n      ),\n    [cardConfig.selectedParams, previewData],\n  );\n\n  if (containsStringValues && groupBy) {\n    return (\n      <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center' }}>\n        <FormattedMessage\n          defaultMessage=\"Parallel coordinates chart does not support aggregated string values. Use other parameters or disable run grouping to continue.\"\n          description=\"Experiment page > compare runs > parallel coordinates chart configuration modal > unsupported string values warning\"\n        />\n      </div>\n    );\n  }\n\n  const filteredData = isConfigured\n    ? processParallelCoordinateData(previewData, cardConfig.selectedParams, cardConfig.selectedMetrics)\n    : [];\n\n  if (!isConfigured) {\n    return (\n      <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        Select at least two metrics and params first\n      </div>\n    );\n  }\n\n  return filteredData.length ? (\n    /* Avoid displaying empty set, otherwise parcoord-es crashes */\n    <LazyParallelCoordinatesPlot\n      selectedMetrics={cardConfig.selectedMetrics}\n      selectedParams={cardConfig.selectedParams}\n      data={filteredData}\n      axesRotateThreshold={6}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  ) : null;\n};\n","import { useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsChartsCardConfig, RunsChartsContourCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartsMetricParamSelect,\n  RunsChartsConfigureField,\n  RunsChartsRunNumberSelect,\n} from './RunsChartsConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsChartsContourCardConfig, 'xaxis' | 'yaxis' | 'zaxis'>;\n\n/**\n * Form containing configuration controls for Contour runs compare chart.\n */\nexport const RunsChartsConfigureContourChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsChartsContourCardConfig;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsContourCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n  const runSelectOptions = [5, 10, 20, 50, 100];\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsChartsContourCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsContourCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n    if (!state.zaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'zaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'zaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, state.zaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description: 'Label for X axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description: 'Label for Y axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Z axis',\n          description: 'Label for Z axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.zaxis.key ? makeCanonicalSortKey(state.zaxis.type, state.zaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'zaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={runSelectOptions}\n      />\n    </>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsChartsCardConfig, RunsChartsScatterCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartsMetricParamSelect,\n  RunsChartsConfigureField,\n  RunsChartsRunNumberSelect,\n  runsChartsRunCountDefaultOptions,\n} from './RunsChartsConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsChartsScatterCardConfig, 'xaxis' | 'yaxis'>;\n\nconst scatterPlotDefaultOptions = runsChartsRunCountDefaultOptions;\nscatterPlotDefaultOptions.push(\n  {\n    value: 100,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"100\"\n        description=\"Label for 100 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 250,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"250\"\n        description=\"Label for 250 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 500,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"500\"\n        description=\"Label for 500 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n);\n\n/**\n * Form containing configuration controls for scatter runs compare chart.\n */\nexport const RunsChartsConfigureScatterChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsChartsScatterCardConfig;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsScatterCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsChartsScatterCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsScatterCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description: 'Label for X axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description: 'Label for Y axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={scatterPlotDefaultOptions}\n      />\n    </>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport {\n  DifferenceCardConfigCompareGroup,\n  RunsChartsCardConfig,\n  RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { DifferenceViewPlot } from '../charts/DifferenceViewPlot';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport const RunsChartsConfigureDifferenceChartPreview = ({\n  previewData,\n  groupBy,\n  cardConfig,\n  setCardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  groupBy: RunsGroupByConfig | null;\n  cardConfig: RunsChartsDifferenceCardConfig;\n  setCardConfig: (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => void;\n}) => {\n  return (\n    <div css={{ width: '100%', overflow: 'auto hidden', height: '100%' }}>\n      <DifferenceViewPlot\n        previewData={previewData}\n        groupBy={groupBy}\n        cardConfig={cardConfig}\n        setCardConfig={setCardConfig}\n      />\n    </div>\n  );\n};\n","import {\n  Checkbox,\n  Input,\n  Switch,\n  useDesignSystemTheme,\n  Tooltip,\n  InfoIcon,\n  InfoTooltip,\n} from '@databricks/design-system';\nimport {\n  DISABLED_GROUP_WHEN_GROUPBY,\n  DifferenceCardConfigCompareGroup,\n  RunsChartsCardConfig,\n  RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\nimport { useCallback } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\n/**\n * Form containing configuration controls for runs compare difference view chart.\n */\nexport const RunsChartsConfigureDifferenceChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n  groupBy,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: Partial<RunsChartsDifferenceCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  /**\n   * Callback for updating compare groups\n   */\n  const updateCompareGroups = useCallback(\n    (compareGroup: DifferenceCardConfigCompareGroup) => {\n      onStateChange((current) => {\n        const currentConfig = current as RunsChartsDifferenceCardConfig;\n        const compareGroups = currentConfig.compareGroups;\n        if (compareGroups.includes(compareGroup)) {\n          return {\n            ...(current as RunsChartsDifferenceCardConfig),\n            compareGroups: compareGroups.filter((group) => group !== compareGroup),\n          };\n        } else {\n          return { ...(current as RunsChartsDifferenceCardConfig), compareGroups: [...compareGroups, compareGroup] };\n        }\n      });\n    },\n    [onStateChange],\n  );\n\n  const updateChartName = useCallback(\n    (e) => onStateChange((current) => ({ ...(current as RunsChartsDifferenceCardConfig), chartName: e.target.value })),\n    [onStateChange],\n  );\n\n  const updateShowChangeFromBaseline = useCallback(\n    (showChangeFromBaseline: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsChartsDifferenceCardConfig),\n        showChangeFromBaseline,\n      })),\n    [onStateChange],\n  );\n\n  const updateShowDifferencesOnly = useCallback(\n    (showDifferencesOnly: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsChartsDifferenceCardConfig),\n        showDifferencesOnly,\n      })),\n    [onStateChange],\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Compare',\n          description:\n            'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Compare config section',\n        })}\n      >\n        <Checkbox.Group id=\"checkbox-group\" defaultValue={state.compareGroups}>\n          {Object.values(DifferenceCardConfigCompareGroup).map((group) => {\n            const groupedCondition = groupBy ? DISABLED_GROUP_WHEN_GROUPBY.includes(group) : false;\n            return (\n              <div css={{ display: 'inline-flex', alignItems: 'center' }}>\n                <Checkbox\n                  key={group}\n                  value={group}\n                  isChecked={state.compareGroups?.includes(group)}\n                  onChange={() => updateCompareGroups(group)}\n                  disabled={groupedCondition}\n                >\n                  {group}\n                </Checkbox>\n                {groupedCondition && (\n                  <InfoTooltip\n                    title={\n                      <FormattedMessage\n                        defaultMessage=\"Disable grouped runs to compare\"\n                        description=\"Experiment tracking > components > runs-charts > RunsChartsConfigureDifferenceCharts > disable grouped runs info message\"\n                      />\n                    }\n                  />\n                )}\n              </div>\n            );\n          })}\n        </Checkbox.Group>\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            padding: `${theme.spacing.md}px 0px`,\n            gap: theme.spacing.sm,\n          }}\n        >\n          <Switch\n            checked={state.showChangeFromBaseline}\n            onChange={updateShowChangeFromBaseline}\n            label={formatMessage({\n              defaultMessage: 'Show change from baseline',\n              description:\n                'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Show change from baseline toggle',\n            })}\n          />\n          <Switch\n            checked={state.showDifferencesOnly}\n            onChange={updateShowDifferencesOnly}\n            label={formatMessage({\n              defaultMessage: 'Show differences only',\n              description:\n                'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Show differences only toggle',\n            })}\n          />\n        </div>\n      </RunsChartsConfigureField>\n\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Chart name',\n          description:\n            'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Chart name config section',\n        })}\n      >\n        <Input value={state.chartName} onChange={updateChartName} />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import { useCallback } from 'react';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { Input } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\nimport { DialogCombobox } from '@databricks/design-system';\nimport { DialogComboboxContent } from '@databricks/design-system';\nimport { DialogComboboxTrigger } from '@databricks/design-system';\nimport { DialogComboboxOptionListCheckboxItem } from '@databricks/design-system';\nimport { DialogComboboxOptionList } from '@databricks/design-system';\nimport { useImageSliderStepMarks } from '../../hooks/useImageSliderStepMarks';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { Slider } from 'antd';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { LineSmoothSlider } from 'experiment-tracking/components/LineSmoothSlider';\n\nexport const RunsChartsConfigureImageChart = ({\n  previewData,\n  state,\n  onStateChange,\n  imageKeyList,\n}: {\n  previewData: RunsChartsRunData[];\n  imageKeyList: string[];\n  state: Partial<RunsChartsImageCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n}) => {\n  const IMAGE_CONFIG_WIDTH = 300;\n\n  const { stepMarks, maxMark, minMark } = useImageSliderStepMarks({\n    data: previewData,\n    selectedImageKeys: state.imageKeys || [],\n  });\n\n  const updateImageKeys = useCallback(\n    (imageKeys: string[]) => {\n      onStateChange((current) => {\n        return { ...(current as RunsChartsImageCardConfig), imageKeys };\n      });\n    },\n    [onStateChange],\n  );\n\n  const updateStep = useCallback(\n    (step: number) => {\n      onStateChange((current) => {\n        return { ...(current as RunsChartsImageCardConfig), step };\n      });\n    },\n    [onStateChange],\n  );\n\n  const { formatMessage } = useIntl();\n\n  const handleUpdate = (imageKey: string) => {\n    onStateChange((current) => {\n      const currentConfig = current as RunsChartsImageCardConfig;\n      if (currentConfig.imageKeys?.includes(imageKey)) {\n        return {\n          ...currentConfig,\n          imageKeys: currentConfig.imageKeys?.filter((key) => key !== imageKey),\n        };\n      } else {\n        return { ...currentConfig, imageKeys: [...(currentConfig.imageKeys || []), imageKey] };\n      }\n    });\n  };\n\n  const handleClear = () => {\n    onStateChange((current) => {\n      return { ...(current as RunsChartsImageCardConfig), imageKeys: [] };\n    });\n  };\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Images',\n          description: 'Runs charts > components > config > RunsChartsConfigureImageGrid > Images section',\n        })}\n      >\n        <DialogCombobox value={state.imageKeys} label=\"Images\" multiSelect>\n          <DialogComboboxTrigger onClear={handleClear} minWidth={IMAGE_CONFIG_WIDTH} />\n          <DialogComboboxContent matchTriggerWidth>\n            <DialogComboboxOptionList>\n              {imageKeyList.map((imageKey) => {\n                return (\n                  <DialogComboboxOptionListCheckboxItem\n                    key={imageKey}\n                    value={imageKey}\n                    onChange={handleUpdate}\n                    checked={state.imageKeys?.includes(imageKey)}\n                  />\n                );\n              })}\n            </DialogComboboxOptionList>\n          </DialogComboboxContent>\n        </DialogCombobox>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"Step\">\n        <LineSmoothSlider\n          max={maxMark}\n          min={minMark}\n          marks={stepMarks}\n          defaultValue={state.step}\n          disabled={Object.keys(stepMarks).length <= 1}\n          onChange={updateStep}\n          step={null}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import { RunsGroupByConfig } from 'experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { ImageGridPlot } from '../charts/ImageGridPlot';\n\nexport const RunsChartsConfigureImageChartPreview = ({\n  previewData,\n  cardConfig,\n  setCardConfig,\n  groupBy,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  setCardConfig: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  return (\n    <div css={{ width: '100%', overflow: 'auto hidden' }}>\n      <ImageGridPlot\n        previewData={previewData}\n        cardConfig={cardConfig}\n        setCardConfig={setCardConfig}\n        containerWidth={500}\n        groupBy={groupBy}\n      />\n    </div>\n  );\n};\n","/**\n * TODO: implement actual UI for this modal, it's a crude placeholder with minimal logic for now\n */\nimport { Modal, LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\nimport { Interpolation, Theme } from '@emotion/react';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsLineCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsScatterCardConfig,\n  RunsChartsParallelCardConfig,\n  RunsChartsDifferenceCardConfig,\n  RunsChartsImageCardConfig,\n} from '../runs-charts.types';\n\nimport { ReactComponent as ChartBarIcon } from '../../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../../common/static/chart-scatter.svg';\nimport { ReactComponent as ChartDifferenceIcon } from '../../../../common/static/chart-difference.svg';\nimport { ReactComponent as ChartImageIcon } from '../../../../common/static/chart-image.svg';\nimport { RunsChartsConfigureBarChart } from './config/RunsChartsConfigureBarChart';\nimport { RunsChartsConfigureParallelChart } from './config/RunsChartsConfigureParallelChart';\nimport type { RunsChartsRunData } from './RunsCharts.common';\nimport { RunsChartsConfigureField } from './config/RunsChartsConfigure.common';\nimport { RunsChartsConfigureLineChart } from './config/RunsChartsConfigureLineChart';\nimport { RunsChartsConfigureLineChartPreview } from './config/RunsChartsConfigureLineChart.preview';\nimport { RunsChartsConfigureBarChartPreview } from './config/RunsChartsConfigureBarChart.preview';\nimport { RunsChartsConfigureContourChartPreview } from './config/RunsChartsConfigureContourChart.preview';\nimport { RunsChartsConfigureScatterChartPreview } from './config/RunsChartsConfigureScatterChart.preview';\nimport { RunsChartsConfigureParallelChartPreview } from './config/RunsChartsConfigureParallelChart.preview';\nimport { RunsChartsConfigureContourChart } from './config/RunsChartsConfigureContourChart';\nimport { RunsChartsConfigureScatterChart } from './config/RunsChartsConfigureScatterChart';\nimport { RunsChartsTooltipBody } from './RunsChartsTooltipBody';\nimport { RunsChartsTooltipWrapper } from '../hooks/useRunsChartsTooltip';\nimport {\n  shouldEnableDifferenceViewCharts,\n  shouldEnableImageGridCharts,\n  shouldUseNewRunRowsVisibilityModel,\n} from 'common/utils/FeatureUtils';\nimport { RunsChartsConfigureDifferenceChartPreview } from './config/RunsChartsConfigureDifferenceChart.preview';\nimport { RunsChartsConfigureDifferenceChart } from './config/RunsChartsConfigureDifferenceChart';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsConfigureImageChart } from './config/RunsChartsConfigureImageChart';\nimport { RunsChartsConfigureImageChartPreview } from './config/RunsChartsConfigureImageChart.preview';\n\nconst previewComponentsMap: Record<\n  RunsChartType,\n  React.FC<{\n    previewData: RunsChartsRunData[];\n    cardConfig: any;\n    groupBy: RunsGroupByConfig | null;\n    setCardConfig: (\n      setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig | RunsChartsImageCardConfig,\n    ) => void;\n  }>\n> = {\n  [RunsChartType.BAR]: RunsChartsConfigureBarChartPreview,\n  [RunsChartType.CONTOUR]: RunsChartsConfigureContourChartPreview,\n  [RunsChartType.LINE]: RunsChartsConfigureLineChartPreview,\n  [RunsChartType.PARALLEL]: RunsChartsConfigureParallelChartPreview,\n  [RunsChartType.SCATTER]: RunsChartsConfigureScatterChartPreview,\n  [RunsChartType.DIFFERENCE]: RunsChartsConfigureDifferenceChartPreview,\n  [RunsChartType.IMAGE]: RunsChartsConfigureImageChartPreview,\n};\n\nexport const RunsChartsConfigureModal = ({\n  onCancel,\n  onSubmit,\n  config,\n  chartRunData,\n  metricKeyList,\n  paramKeyList,\n  groupBy,\n  supportedChartTypes,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  config: RunsChartsCardConfig;\n  chartRunData: RunsChartsRunData[];\n  onCancel: () => void;\n  groupBy: RunsGroupByConfig | null;\n  onSubmit: (formData: Partial<RunsChartsCardConfig>) => void;\n  supportedChartTypes?: RunsChartType[] | undefined;\n}) => {\n  const isChartTypeSupported = (type: RunsChartType) => !supportedChartTypes || supportedChartTypes.includes(type);\n  const { theme } = useDesignSystemTheme();\n\n  const [currentFormState, setCurrentFormState] = useState<RunsChartsCardConfig>(config);\n\n  const isEditing = Boolean(currentFormState.uuid);\n\n  const updateChartType = useCallback((type?: RunsChartType) => {\n    if (!type) {\n      return;\n    }\n    const emptyChartCard = RunsChartsCardConfig.getEmptyChartCardByType(type, true);\n    if (emptyChartCard) {\n      setCurrentFormState(emptyChartCard);\n    }\n  }, []);\n\n  const previewData = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, currentFormState.runsCountToCompare).reverse();\n  }, [chartRunData, currentFormState.runsCountToCompare]);\n\n  const imageKeyList = useMemo(() => {\n    const imageKeys = new Set<string>();\n    previewData.forEach((run) => {\n      Object.keys(run.images).forEach((imageKey) => {\n        imageKeys.add(imageKey);\n      });\n    });\n    return Array.from(imageKeys).sort();\n  }, [previewData]);\n\n  const renderConfigOptionsforChartType = (type?: RunsChartType) => {\n    if (type === RunsChartType.BAR) {\n      return (\n        <RunsChartsConfigureBarChart\n          metricKeyList={metricKeyList}\n          state={currentFormState as RunsChartsBarCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.CONTOUR) {\n      return (\n        <RunsChartsConfigureContourChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsContourCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.LINE) {\n      return (\n        <RunsChartsConfigureLineChart\n          metricKeyList={metricKeyList}\n          state={currentFormState as RunsChartsLineCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.PARALLEL) {\n      return (\n        <RunsChartsConfigureParallelChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsParallelCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.SCATTER) {\n      return (\n        <RunsChartsConfigureScatterChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsScatterCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (shouldEnableDifferenceViewCharts() && type === RunsChartType.DIFFERENCE) {\n      return (\n        <RunsChartsConfigureDifferenceChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsDifferenceCardConfig}\n          onStateChange={setCurrentFormState}\n          groupBy={groupBy}\n        />\n      );\n    }\n    if (shouldEnableImageGridCharts() && type === RunsChartType.IMAGE) {\n      return (\n        <RunsChartsConfigureImageChart\n          previewData={previewData}\n          imageKeyList={imageKeyList}\n          state={currentFormState as RunsChartsImageCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    return null;\n  };\n\n  const renderPreviewChartType = (type?: RunsChartType) => {\n    if (!type) {\n      return null;\n    }\n    const PreviewComponent = previewComponentsMap[type];\n    if (!PreviewComponent) {\n      return null;\n    }\n    return (\n      <PreviewComponent\n        previewData={previewData}\n        cardConfig={currentFormState}\n        groupBy={groupBy}\n        setCardConfig={setCurrentFormState}\n      />\n    );\n  };\n\n  const { formatMessage } = useIntl();\n\n  let disableSaveButton = false;\n  if (currentFormState.type === RunsChartType.LINE) {\n    const lineCardConfig = currentFormState as RunsChartsLineCardConfig;\n    disableSaveButton = (lineCardConfig.selectedMetricKeys ?? []).length === 0;\n  }\n\n  return (\n    <Modal\n      visible\n      onCancel={onCancel}\n      onOk={() => onSubmit(currentFormState)}\n      title={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Edit chart',\n              description: 'Title of the modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add new chart',\n              description: 'Title of the modal when adding a new runs comparison chart',\n            })\n      }\n      okButtonProps={{\n        'data-testid': 'experiment-view-compare-runs-chart-modal-confirm',\n        disabled: disableSaveButton,\n      }}\n      cancelText={formatMessage({\n        defaultMessage: 'Cancel',\n        description: 'Cancel button label within a modal for adding/editing a new runs comparison chart',\n      })}\n      okText={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Save changes',\n              description: 'Confirm button label within a modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add chart',\n              description: 'Confirm button label within a modal when adding a new runs comparison chart',\n            })\n      }\n      size=\"wide\"\n      css={{ width: 1280 }}\n    >\n      <div css={styles.wrapper}>\n        <div>\n          {!isEditing && (\n            <RunsChartsConfigureField title=\"Type\">\n              <LegacySelect<RunsChartType>\n                css={{ width: '100%' }}\n                value={currentFormState.type}\n                onChange={updateChartType}\n              >\n                {isChartTypeSupported(RunsChartType.BAR) && (\n                  <LegacySelect.Option value={RunsChartType.BAR}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartBarIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Bar chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > bar chart\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {isChartTypeSupported(RunsChartType.SCATTER) && (\n                  <LegacySelect.Option value={RunsChartType.SCATTER}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartScatterIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Scatter chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > scatter plot\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {isChartTypeSupported(RunsChartType.LINE) && (\n                  <LegacySelect.Option value={RunsChartType.LINE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartLineIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Line chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > line chart\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {isChartTypeSupported(RunsChartType.PARALLEL) && (\n                  <LegacySelect.Option value={RunsChartType.PARALLEL}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartParallelIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Parallel coordinates\"\n                        description=\"Experiment tracking > runs charts > add chart menu > parallel coordinates\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {isChartTypeSupported(RunsChartType.CONTOUR) && (\n                  <LegacySelect.Option value={RunsChartType.CONTOUR}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartContourIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Contour chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > contour chart\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {shouldEnableDifferenceViewCharts() && isChartTypeSupported(RunsChartType.DIFFERENCE) && (\n                  <LegacySelect.Option value={RunsChartType.DIFFERENCE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartDifferenceIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Difference view\"\n                        description=\"Experiment tracking > runs charts > add chart menu > difference view\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n                {shouldEnableImageGridCharts() && isChartTypeSupported(RunsChartType.IMAGE) && (\n                  <LegacySelect.Option value={RunsChartType.IMAGE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartImageIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Image grid\"\n                        description=\"Experiment tracking > runs charts > add chart menu > image grid\"\n                      />\n                    </div>\n                  </LegacySelect.Option>\n                )}\n              </LegacySelect>\n            </RunsChartsConfigureField>\n          )}\n          {renderConfigOptionsforChartType(currentFormState.type)}\n        </div>\n        <RunsChartsTooltipWrapper contextData={{ runs: chartRunData }} component={RunsChartsTooltipBody} hoverOnly>\n          <div css={styles.chartWrapper}>{renderPreviewChartType(currentFormState.type)}</div>\n        </RunsChartsTooltipWrapper>\n      </div>\n    </Modal>\n  );\n};\n\nconst styles = {\n  chartTypeOption: (theme: Theme) =>\n    ({\n      display: 'grid',\n      gridTemplateColumns: `${theme.general.iconSize + theme.spacing.xs}px 1fr`,\n      gap: theme.spacing.xs,\n      alignItems: 'center',\n    } as Interpolation<Theme>),\n  wrapper: {\n    // TODO: wait for modal dimensions decision\n    display: 'grid',\n    gridTemplateColumns: '300px 1fr',\n    gap: 32,\n  } as Interpolation<Theme>,\n  field: {\n    // TODO: wait for modal dimensions decision\n    display: 'grid',\n    gridTemplateColumns: '80px 1fr',\n    marginBottom: 16,\n  } as Interpolation<Theme>,\n  chartWrapper: {\n    height: 400,\n    width: 500,\n  },\n};\n","import { barChartCardDefaultMargin } from '../cards/RunsChartsBarChartCard';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsMetricsBarPlot } from '../RunsMetricsBarPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsBarCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureBarChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsBarCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  return (\n    <RunsMetricsBarPlot\n      useDefaultHoverBox={false}\n      displayRunNames={false}\n      displayMetricKey={false}\n      metricKey={cardConfig.metricKey}\n      runsData={previewData}\n      margin={barChartCardDefaultMargin}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  );\n};\n","import { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsContourPlot } from '../RunsContourPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsContourCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureContourChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsContourCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  return (\n    <RunsContourPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      zAxis={cardConfig.zaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n    />\n  );\n};\n","import { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsScatterPlot } from '../RunsScatterPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsScatterCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureScatterChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsScatterCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  return (\n    <RunsScatterPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n    />\n  );\n};\n","import { ReactNode } from 'react';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { RunsChartsRunData } from './RunsCharts.common';\nimport { Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsTooltipBodyProps, RunsChartsTooltipWrapper } from '../hooks/useRunsChartsTooltip';\nimport { RunsChartsCard } from './cards/RunsChartsCard';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport const RunsChartsFullScreenModal = <TContext,>({\n  chartData,\n  isMetricHistoryLoading = false,\n  groupBy,\n  fullScreenChart,\n  onCancel,\n  tooltipContextValue,\n  tooltipComponent,\n  autoRefreshEnabled,\n}: {\n  chartData: RunsChartsRunData[];\n  isMetricHistoryLoading?: boolean;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  fullScreenChart: { config: RunsChartsCardConfig; title: string; subtitle: ReactNode } | undefined;\n  onCancel: () => void;\n  tooltipContextValue: TContext;\n  tooltipComponent: React.ComponentType<RunsChartsTooltipBodyProps<TContext>>;\n}) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const emptyReorderProps = {\n    canMoveDown: false,\n    canMoveUp: false,\n    onMoveDown: () => {},\n    onMoveUp: () => {},\n    onReorderWith: () => {},\n  };\n\n  const emptyConfigureProps = {\n    onRemoveChart: () => {},\n    onReorderCharts: () => {},\n    onStartEditChart: () => {},\n    setFullScreenChart: () => {},\n  };\n\n  if (!fullScreenChart) {\n    return null;\n  }\n\n  return (\n    <Modal\n      visible\n      onCancel={onCancel}\n      title={\n        <div css={{ display: 'flex', flexDirection: 'column' }}>\n          {fullScreenChart.title}\n          <span\n            css={{\n              color: theme.colors.textSecondary,\n              fontSize: theme.typography.fontSizeSm,\n              marginRight: theme.spacing.xs,\n            }}\n          >\n            {fullScreenChart.subtitle}\n          </span>\n        </div>\n      }\n      footer={null}\n      verticalSizing=\"maxed_out\"\n      dangerouslySetAntdProps={{ width: '95%' }}\n      css={{\n        [`.${getPrefixedClassName('modal-body')}`]: {\n          flex: 1,\n        },\n      }}\n    >\n      <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={tooltipComponent}>\n        <RunsChartsCard\n          cardConfig={fullScreenChart.config}\n          chartRunData={chartData}\n          groupBy={groupBy}\n          index={0}\n          sectionIndex={0}\n          fullScreen\n          autoRefreshEnabled={autoRefreshEnabled}\n          {...emptyConfigureProps}\n          {...emptyReorderProps}\n        />\n      </RunsChartsTooltipWrapper>\n    </Modal>\n  );\n};\n","import { isNil } from 'lodash';\nimport { Button, CloseIcon, PinIcon, PinFillIcon, Tooltip, VisibleIcon, Typography } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { useExperimentIds } from '../../experiment-page/hooks/useExperimentIds';\nimport { RunsChartsRunData, RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport {\n  RunsChartsTooltipBodyProps,\n  RunsChartsTooltipMode,\n  containsMultipleRunsTooltipData,\n} from '../hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsScatterCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsLineCardConfig,\n  RunsChartsParallelCardConfig,\n} from '../runs-charts.types';\nimport {\n  type RunsCompareMultipleTracesTooltipData,\n  type RunsMetricsSingleTraceTooltipData,\n} from './RunsMetricsLinePlot';\nimport { RunsMultipleTracesTooltipBody } from './RunsMultipleTracesTooltipBody';\nimport { shouldEnableRelativeTimeDateAxis } from 'common/utils/FeatureUtils';\n\ninterface RunsChartsContextMenuContentDataType {\n  runs: RunsChartsRunData[];\n  onTogglePin?: (runUuid: string) => void;\n  onHideRun?: (runUuid: string) => void;\n}\n\ntype RunsChartContextMenuHoverDataType = RunsChartsCardConfig;\n\nconst createBarChartValuesBox = (cardConfig: RunsChartsBarCardConfig, activeRun: RunsChartsRunData) => {\n  const { metricKey } = cardConfig;\n  const metric = activeRun?.metrics[metricKey];\n\n  if (!metric) {\n    return null;\n  }\n\n  return (\n    <div css={styles.value}>\n      <strong>{metric.key}:</strong> {metric.value}\n    </div>\n  );\n};\n\nconst createScatterChartValuesBox = (cardConfig: RunsChartsScatterCardConfig, activeRun: RunsChartsRunData) => {\n  const { xaxis, yaxis } = cardConfig;\n  const xKey = xaxis.key;\n  const yKey = yaxis.key;\n\n  const xValue = xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue = yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xKey}):</strong> {xValue}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yKey}):</strong> {yValue}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst createContourChartValuesBox = (cardConfig: RunsChartsContourCardConfig, activeRun: RunsChartsRunData) => {\n  const { xaxis, yaxis, zaxis } = cardConfig;\n  const xKey = xaxis.key;\n  const yKey = yaxis.key;\n  const zKey = zaxis.key;\n\n  const xValue = xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue = yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  const zValue = zaxis.type === 'METRIC' ? activeRun.metrics[zKey]?.value : activeRun.params[zKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xKey}):</strong> {xValue}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yKey}):</strong> {yValue}\n        </div>\n      )}\n      {zValue && (\n        <div css={styles.value}>\n          <strong>Z ({zKey}):</strong> {zValue}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst normalizeRelativeTimeChartTooltipValue = (value: string | number) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value.split(' ')[1] || '00:00:00';\n};\n\nconst getTooltipXValue = (\n  hoverData: RunsMetricsSingleTraceTooltipData | undefined,\n  xAxisKey: RunsChartsLineChartXAxisType,\n) => {\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    return hoverData?.xValue ?? '';\n  }\n\n  if (shouldEnableRelativeTimeDateAxis() && xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n    return normalizeRelativeTimeChartTooltipValue(hoverData?.xValue ?? '');\n  }\n\n  // Default return for other cases\n  return hoverData?.xValue;\n};\n\nconst createLineChartValuesBox = (\n  cardConfig: RunsChartsLineCardConfig,\n  activeRun: RunsChartsRunData,\n  hoverData?: RunsMetricsSingleTraceTooltipData,\n) => {\n  const { metricKey: metricKeyFromConfig, xAxisKey } = cardConfig;\n  const metricKey = hoverData?.metricEntity?.key || metricKeyFromConfig;\n\n  // If there's available value from x axis (step or time), extract entry from\n  // metric history instead of latest metric.\n  const metricValue = hoverData?.yValue ?? activeRun?.metrics[metricKey].value;\n\n  if (isNil(metricValue)) {\n    return null;\n  }\n\n  const xValue = getTooltipXValue(hoverData, xAxisKey);\n\n  return (\n    <>\n      {hoverData && (\n        <div css={styles.value}>\n          <strong>{hoverData.label}:</strong> {xValue}\n        </div>\n      )}\n      <div css={styles.value}>\n        <strong>{metricKey}:</strong> {metricValue}\n      </div>\n    </>\n  );\n};\n\nconst createParallelChartValuesBox = (\n  cardConfig: RunsChartsParallelCardConfig,\n  activeRun: RunsChartsRunData,\n  isHovering?: boolean,\n) => {\n  const { selectedParams, selectedMetrics } = cardConfig as RunsChartsParallelCardConfig;\n  const paramsList = selectedParams.map((paramKey) => {\n    const param = activeRun?.params[paramKey];\n    if (param) {\n      return (\n        <div key={paramKey}>\n          <strong>{param.key}:</strong> {param.value}\n        </div>\n      );\n    }\n    return true;\n  });\n  const metricsList = selectedMetrics.map((metricKey) => {\n    const metric = activeRun?.metrics[metricKey];\n    if (metric) {\n      return (\n        <div key={metricKey}>\n          <strong>{metric.key}:</strong> {metric.value}\n        </div>\n      );\n    }\n    return true;\n  });\n\n  // show only first 3 params and primary metric if hovering, else show all\n  if (isHovering) {\n    return (\n      <>\n        {paramsList.slice(0, 3)}\n        {(paramsList.length > 3 || metricsList.length > 1) && <div>...</div>}\n        {metricsList[metricsList.length - 1]}\n      </>\n    );\n  } else {\n    return (\n      <>\n        {paramsList}\n        {metricsList}\n      </>\n    );\n  }\n};\n\n/**\n * Internal component that displays metrics/params - its final design\n * is a subject to change\n */\nconst ValuesBox = ({\n  activeRun,\n  cardConfig,\n  isHovering,\n  hoverData,\n}: {\n  activeRun: RunsChartsRunData;\n  cardConfig: RunsChartsCardConfig;\n  isHovering?: boolean;\n  hoverData?: RunsMetricsSingleTraceTooltipData;\n}) => {\n  if (cardConfig.type === RunsChartType.BAR) {\n    return createBarChartValuesBox(cardConfig as RunsChartsBarCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.SCATTER) {\n    return createScatterChartValuesBox(cardConfig as RunsChartsScatterCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.CONTOUR) {\n    return createContourChartValuesBox(cardConfig as RunsChartsContourCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.LINE) {\n    return createLineChartValuesBox(cardConfig as RunsChartsLineCardConfig, activeRun, hoverData);\n  }\n\n  if (cardConfig.type === RunsChartType.PARALLEL) {\n    return createParallelChartValuesBox(cardConfig as RunsChartsParallelCardConfig, activeRun, isHovering);\n  }\n\n  return null;\n};\n\nexport const RunsChartsTooltipBody = ({\n  closeContextMenu,\n  contextData,\n  hoverData,\n  chartData,\n  runUuid,\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  RunsChartsContextMenuContentDataType,\n  RunsChartContextMenuHoverDataType,\n  RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const { runs, onTogglePin, onHideRun } = contextData;\n  const [experimentId] = useExperimentIds();\n  const activeRun = runs?.find((run) => run.uuid === runUuid);\n\n  if (\n    containsMultipleRunsTooltipData(hoverData) &&\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n\n  if (!activeRun) {\n    return null;\n  }\n\n  const runName = activeRun.displayName || activeRun.uuid;\n  const metricSuffix = singleTraceHoverData?.metricEntity ? ` (${singleTraceHoverData.metricEntity.key})` : '';\n\n  return (\n    <div>\n      <div css={styles.contentWrapper}>\n        <div css={styles.header}>\n          <div css={styles.colorPill} style={{ backgroundColor: activeRun.color }} />\n          {activeRun.groupParentInfo ? (\n            <Typography.Text>{runName + metricSuffix}</Typography.Text>\n          ) : (\n            <Link\n              to={Routes.getRunPageRoute(experimentId, runUuid)}\n              target=\"_blank\"\n              css={styles.runLink}\n              onClick={closeContextMenu}\n            >\n              {runName + metricSuffix}\n            </Link>\n          )}\n        </div>\n        {!isHovering && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_259\"\n            size=\"small\"\n            onClick={closeContextMenu}\n            icon={<CloseIcon />}\n          />\n        )}\n      </div>\n\n      <ValuesBox\n        isHovering={isHovering}\n        activeRun={activeRun}\n        cardConfig={chartData}\n        hoverData={singleTraceHoverData}\n      />\n\n      <div css={styles.actionsWrapper}>\n        {activeRun.pinnable && onTogglePin && (\n          <Tooltip\n            title={\n              activeRun.pinned ? (\n                <FormattedMessage\n                  defaultMessage=\"Unpin run\"\n                  description=\"A tooltip for the pin icon button in the runs table next to the pinned run\"\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage=\"Click to pin the run\"\n                  description=\"A tooltip for the pin icon button in the runs chart tooltip next to the not pinned run\"\n                />\n              )\n            }\n            placement=\"bottom\"\n          >\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_282\"\n              size=\"small\"\n              onClick={() => {\n                onTogglePin(runUuid);\n                closeContextMenu();\n              }}\n              icon={activeRun.pinned ? <PinFillIcon /> : <PinIcon />}\n            />\n          </Tooltip>\n        )}\n        {onHideRun && (\n          <Tooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Click to hide the run\"\n                description='A tooltip for the \"hide\" icon button in the runs chart tooltip'\n              />\n            }\n            placement=\"bottom\"\n          >\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_302\"\n              data-testid=\"experiment-view-compare-runs-tooltip-visibility-button\"\n              size=\"small\"\n              onClick={() => {\n                onHideRun(runUuid);\n                closeContextMenu();\n              }}\n              icon={<VisibleIcon />}\n            />\n          </Tooltip>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  runLink: (theme: Theme) => ({\n    color: theme.colors.primary,\n    '&:hover': {},\n  }),\n  actionsWrapper: {\n    marginTop: 8,\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  header: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  value: {\n    maxWidth: 300,\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  contentWrapper: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    marginBottom: 12,\n    justifyContent: 'space-between',\n    height: 24,\n  },\n  colorPill: { width: 12, height: 12, borderRadius: '100%' },\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightScatterTraces, useRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  RunsChartAxisDef,\n  runsChartDefaultContourMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\n\nexport interface RunsContourPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: RunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: RunsChartAxisDef;\n\n  /**\n   * Depth dimension with a metric or a param\n   */\n  zAxis: RunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: RunsChartsRunData[];\n\n  /**\n   * Sets the color scale in [[0.35, 'rgb(40,60,190)'],[0.5, 'rgb(70,100,245)'],...] format.\n   * Leave unset to use the defualt scale.\n   */\n  colorScale?: [number, string][];\n\n  /**\n   * Set to `true` in order to reverse the color scale.\n   */\n  reverseScale?: boolean;\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nconst DEFAULT_COLOR_SCALE: [number, string][] = [\n  [0, 'rgb(5,10,172)'],\n  [0.35, 'rgb(40,60,190)'],\n  [0.5, 'rgb(70,100,245)'],\n  [0.6, 'rgb(90,120,245)'],\n  [0.7, 'rgb(106,137,247)'],\n  [1, 'rgb(220,220,220)'],\n];\n\nexport const createTooltipTemplate = (zAxisTitle: string) =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  `<b>${zAxisTitle}:</b> %{customdata[2]:.2f}` +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * contour plot comparing values for a given\n * set of experiments runs\n */\nexport const RunsContourPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    zAxis,\n    markerSize = 10,\n    className,\n    reverseScale,\n    margin = runsChartDefaultContourMargin,\n    colorScale = DEFAULT_COLOR_SCALE,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsContourPlotProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const zValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const { metrics, params, color, uuid, displayName } = runData;\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n        const zAxisData = zAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.key]?.value || undefined;\n        const y = yAxisData?.[yAxis.key]?.value || undefined;\n        const z = zAxisData?.[zAxis.key]?.value || undefined;\n\n        if (x && y && z) {\n          xValues.push(x);\n          yValues.push(y);\n          zValues.push(z);\n          colors.push(color || theme.colors.primary);\n          tooltipData.push([uuid, displayName || uuid, z] as any);\n        }\n      }\n\n      // Let's compile chart layers\n      const layers = [\n        // The top layer with the scatter plot (dots)\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          text: runsData.map(({ displayName }) => displayName),\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate(zAxis.key) : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          textposition: 'bottom center',\n          marker: {\n            size: markerSize,\n            color: colors,\n            line: {\n              color: 'black',\n              width: 1,\n            },\n          },\n        },\n      ] as Data[];\n\n      // If there are at least two runs, add a contour chart layer\n      if (runsData.length > 1) {\n        layers.unshift({\n          x: xValues,\n          y: yValues,\n          z: zValues,\n          type: 'contour',\n          connectgaps: true,\n          hoverinfo: 'none',\n          contours: {\n            coloring: 'heatmap',\n          },\n          colorscale: colorScale,\n          reversescale: reverseScale,\n          colorbar: {\n            tickfont: { size: 11, color: theme.colors.textSecondary, family: '' },\n          },\n        } as Data);\n      }\n      return layers;\n    }, [\n      colorScale,\n      reverseScale,\n      markerSize,\n      runsData,\n      xAxis.type,\n      xAxis.key,\n      yAxis.type,\n      yAxis.key,\n      zAxis.type,\n      zAxis.key,\n      theme.colors.primary,\n      theme.colors.textSecondary,\n      useDefaultHoverBox,\n    ]);\n\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      yaxis: {\n        ticks: 'inside',\n        title: { standoff: 32, text: yAxis.key },\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n      },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = { standoff: 32, text: yAxis.key };\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find hover event corresponding to the second curve (scatter plot) only\n        const scatterPoints = points.find(({ curveNumber }) => curveNumber === 1);\n\n        setHoveredPointIndex(scatterPoints?.pointIndex ?? -1);\n\n        if (!scatterPoints) {\n          return;\n        }\n\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (scatterPoints as any)?.customdata?.[0];\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      const dataToExport: Data[] = plotData.map((trace: Data) => ({\n        ...trace,\n        mode: 'text+markers',\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layout));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), commonRunsChartStyles.scatterChartHighlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Config, Data, Layout } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightBarTraces, useRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  normalizeChartValue,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport type { MetricEntity } from '../../../types';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\n\n// We're not using params in bar plot\nexport type BarPlotRunData = Omit<RunsChartsRunData, 'params' | 'tags' | 'images'>;\n\nexport interface RunsMetricsBarPlotHoverData {\n  xValue: string;\n  yValue: number;\n  index: number;\n  metricEntity?: MetricEntity;\n}\n\nexport interface RunsMetricsBarPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Determines which metric are we comparing by\n   */\n  metricKey: string;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: BarPlotRunData[];\n\n  /**\n   * Relative width of the plot bar\n   */\n  barWidth?: number;\n\n  /**\n   * Display run names on the Y axis\n   */\n  displayRunNames?: boolean;\n\n  /**\n   * Display metric key on the X axis\n   */\n  displayMetricKey?: boolean;\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  scrollZoom: false,\n  doubleClick: 'autosize',\n  showTips: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nexport const Y_AXIS_PARAMS = {\n  ticklabelposition: 'inside',\n  tickfont: { size: 11 },\n  fixedrange: true,\n};\n\nconst getFixedPointValue = (val: string | number, places = 2) => (typeof val === 'number' ? val.toFixed(places) : val);\n\n/**\n * Implementation of plotly.js chart displaying\n * bar plot comparing metrics for a given\n * set of experiments runs\n */\nexport const RunsMetricsBarPlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    className,\n    margin = runsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    barWidth = 3 / 4,\n    width,\n    height,\n    displayRunNames = true,\n    useDefaultHoverBox = true,\n    displayMetricKey = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsMetricsBarPlotProps) => {\n    const plotData = useMemo(() => {\n      // Run uuids\n      const ids = runsData.map((d) => d.uuid);\n\n      // Trace names\n      const names = runsData.map(({ displayName }) => displayName);\n\n      // Actual metric values\n      const values = runsData.map((d) => normalizeChartValue(d.metrics[metricKey]?.value));\n\n      // Displayed metric values\n      const textValues = runsData.map((d) => getFixedPointValue(d.metrics[metricKey]?.value));\n\n      // Colors corresponding to each run\n      const colors = runsData.map((d) => d.color);\n\n      return [\n        {\n          y: ids,\n          x: values,\n          names,\n          text: textValues,\n          textposition: values.map((value) => (value === 0 ? 'outside' : 'auto')),\n          textfont: {\n            size: 11,\n          },\n          metrics: runsData.map((d) => d.metrics[metricKey]),\n          // Display run name on hover. \"<extra></extra>\" removes plotly's \"extra\" tooltip that\n          // is unnecessary here.\n          type: 'bar' as any,\n          hovertemplate: useDefaultHoverBox ? '%{label}<extra></extra>' : undefined,\n          hoverinfo: useDefaultHoverBox ? 'y' : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          width: barWidth,\n\n          orientation: 'h',\n          marker: {\n            color: colors,\n          },\n        } as Data & { names: string[] },\n      ];\n    }, [runsData, metricKey, barWidth, useDefaultHoverBox]);\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n    const { theme } = useDesignSystemTheme();\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: {\n        title: displayMetricKey ? metricKey : undefined,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n      },\n      yaxis: {\n        showticklabels: displayRunNames,\n        title: displayRunNames\n          ? formatMessage({\n              defaultMessage: 'Run name',\n              description: 'Label for Y axis in bar chart when comparing metrics between runs',\n            })\n          : undefined,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        fixedrange: true,\n      },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => ({\n        ...current,\n        width: width || layoutWidth,\n        height: height || layoutHeight,\n        margin,\n        xaxis: {\n          ...current.xaxis,\n          title: displayMetricKey ? metricKey : undefined,\n        },\n      }));\n    }, [layoutWidth, layoutHeight, margin, metricKey, width, height, displayMetricKey]);\n\n    const { setHoveredPointIndex } = useRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightBarTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points, event }) => {\n        const metricEntity = points[0].data?.metrics[points[0].pointIndex];\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        const hoverData: RunsMetricsBarPlotHoverData = {\n          xValue: points[0].x,\n          yValue: points[0].value,\n          // The index of the X datum\n          index: points[0].pointIndex,\n          metricEntity,\n        };\n\n        const runUuid = points[0]?.label;\n        if (runUuid) {\n          onHover?.(runUuid, event, hoverData);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      // Prepare layout and data traces to export\n      const layoutToExport = {\n        ...layout,\n        yaxis: {\n          ...layout.yaxis,\n          showticklabels: true,\n          automargin: true,\n        },\n      };\n\n      const dataToExport = plotData.map((trace) => ({\n        ...trace,\n        // In exported image, use names for Y axes\n        y: trace.names,\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layoutToExport));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.trace.bars g.point path': {\n      transition: 'var(--trace-transition)',\n    },\n    '.trace.bars.is-highlight g.point path': {\n      opacity: 'var(--trace-opacity-dimmed-high) !important',\n    },\n    '.trace.bars g.point.is-hover-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.trace.bars g.point.is-selection-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n  },\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport React from 'react';\nimport { Dash } from 'plotly.js';\n\nconst STROKE_WIDTH = 3;\n\n/**\n * Replicating plotly.js's dasharrays for each dash type, with smaller spaces\n * https://github.com/plotly/plotly.js/blob/master/src/components/drawing/index.js#L162\n */\nconst getDashArray = (dashType: Dash) => {\n  switch (dashType) {\n    case 'dot':\n      return `${STROKE_WIDTH}`;\n    case 'dash':\n      return `${2 * STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'longdash':\n      return `${3 * STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'dashdot':\n      return `${2 * STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'longdashdot':\n      return `${3 * STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    default:\n      return '';\n  }\n};\n\nexport type LegendLabelData = {\n  label: string;\n  color: string;\n  dashStyle?: Dash;\n  uuid?: string;\n  metricKey?: string;\n};\n\nconst TraceLabel: React.FC<LegendLabelData> = ({ label, color, dashStyle }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        textOverflow: 'ellipsis',\n        flexShrink: 0,\n        marginRight: theme.spacing.md,\n        maxWidth: '100%',\n      }}\n    >\n      <TraceLabelColorIndicator color={color} dashStyle={dashStyle} />\n      <Typography.Text\n        color=\"secondary\"\n        size=\"sm\"\n        css={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}\n      >\n        {label}\n      </Typography.Text>\n    </div>\n  );\n};\n\nexport const TraceLabelColorIndicator: React.FC<Pick<LegendLabelData, 'color' | 'dashStyle'>> = ({\n  color,\n  dashStyle,\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const strokeDasharray = dashStyle ? getDashArray(dashStyle) : undefined;\n  const pathYOffset = theme.typography.fontSizeSm / 2;\n\n  return (\n    <svg\n      css={{\n        height: theme.typography.fontSizeSm,\n        width: STROKE_WIDTH * 8,\n        marginRight: theme.spacing.xs,\n        flexShrink: 0,\n      }}\n    >\n      <path\n        d={`M0,${pathYOffset}h${STROKE_WIDTH * 8}`}\n        style={{\n          strokeWidth: STROKE_WIDTH,\n          stroke: color,\n          strokeDasharray,\n        }}\n      />\n    </svg>\n  );\n};\ntype RunsMetricsLegendProps = {\n  labelData: LegendLabelData[];\n  height: number;\n  fullScreen?: boolean;\n};\n\nconst RunsMetricsLegend: React.FC<RunsMetricsLegendProps> = ({ labelData, height, fullScreen }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        height,\n        alignContent: fullScreen ? 'flex-start' : 'normal',\n        gap: fullScreen ? theme.spacing.sm : 0,\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        marginTop: fullScreen ? theme.spacing.lg : theme.spacing.sm,\n      }}\n    >\n      {labelData.map((labelDatum) => (\n        <TraceLabel key={labelDatum.label} {...labelDatum} />\n      ))}\n    </div>\n  );\n};\n\nexport default RunsMetricsLegend;\n","import React from 'react';\n\nimport RunsMetricsLegend, { LegendLabelData } from './RunsMetricsLegend';\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nconst RunsMetricsLegendWrapper = ({\n  labelData,\n  fullScreen,\n  children,\n}: React.PropsWithChildren<{\n  labelData: LegendLabelData[];\n  fullScreen?: boolean;\n}>) => {\n  const { theme } = useDesignSystemTheme();\n\n  const FULL_SCREEN_LEGEND_HEIGHT = 100;\n  const LEGEND_HEIGHT = 32;\n\n  const height = fullScreen ? FULL_SCREEN_LEGEND_HEIGHT : LEGEND_HEIGHT;\n  const heightBuffer = fullScreen ? theme.spacing.lg : theme.spacing.md;\n\n  return (\n    <>\n      <div css={{ height: `calc(100% - ${height + heightBuffer}px)` }}>{children}</div>\n      <RunsMetricsLegend labelData={labelData} height={height} fullScreen={fullScreen} />\n    </>\n  );\n};\n\nexport default RunsMetricsLegendWrapper;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { Figure } from 'react-plotly.js';\nimport type {\n  LineChartTraceData,\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsLinePlotProps,\n  RunsMetricsSingleTraceTooltipData,\n} from '../components/RunsMetricsLinePlot';\nimport { compact, isNumber, isString, isUndefined, orderBy, throttle, uniq } from 'lodash';\nimport type { LegendLabelData } from '../components/RunsMetricsLegend';\nimport { RunsChartsLineChartXAxisType } from '../components/RunsCharts.common';\n\n// Plotly-specific selectors for finding particular elements of interest in the plot DOM structure\nconst PLOTLY_SVG_SELECTOR = '.main-svg';\nconst PLOTLY_DRAGLAYER_SELECTOR = '.main-svg .draglayer .nsewdrag';\n\n// Interval for throttling the tooltip data update handler\nconst TOOLTIP_DATA_UPDATE_INTERVAL = 50;\n\n/**\n * Utility function, parses the microseconds from the plotly's axis boundary string\n * which are not supported by JavaScript's Date object and have to be added manually.\n *\n * E.g. transforms 2024-02-02 14:35:37.5747 into 0.7\n */\nconst parseMicroseconds = (plotlyAxisBoundary: string) => {\n  const microsecondsString =\n    isString(plotlyAxisBoundary) && plotlyAxisBoundary.match(/[0-9]{2}:[0-9]{2}:[0-9]{2}\\.([0-9]+)/)?.[1];\n  if (!microsecondsString) {\n    return 0;\n  }\n\n  // We turn the microseconds into a fraction of a millisecond, e.g. 0.5743 -> 574.3 -> 0.3\n  return (Number(`0.${microsecondsString}`) * 1000) % 1;\n};\n\nexport const useRunsMultipleTracesTooltipData = ({\n  onUnhover,\n  onHover,\n  runsData,\n  plotData,\n  legendLabelData,\n  containsMultipleMetricKeys,\n  xAxisKeyLabel,\n  xAxisKey,\n  disabled,\n  setHoveredPointIndex,\n  xAxisScaleType = 'linear',\n}: Pick<RunsMetricsLinePlotProps, 'runsData' | 'onHover' | 'onUnhover'> & {\n  plotData: LineChartTraceData[];\n  legendLabelData: LegendLabelData[];\n  containsMultipleMetricKeys?: boolean;\n  xAxisKeyLabel: string;\n  disabled: boolean;\n  xAxisKey: RunsChartsLineChartXAxisType;\n  setHoveredPointIndex: (value: number) => void;\n  xAxisScaleType?: 'linear' | 'log';\n}) => {\n  // Save current boundaries/dimensions of the plot in the mutable ref object\n  const chartBoundaries = useRef<{\n    containerLeftPixels: number;\n    plotWidthPixels: number;\n    plotOffsetPixels: number;\n    lowerBoundValue: number;\n    valueRange: number;\n    mainContainer: SVGElement | null;\n    dragLayer: SVGElement | null;\n    initialized: boolean;\n  }>({\n    containerLeftPixels: 0,\n    plotWidthPixels: 0,\n    plotOffsetPixels: 0,\n    lowerBoundValue: 0,\n    valueRange: 0,\n    mainContainer: null,\n    dragLayer: null,\n    initialized: false,\n  });\n\n  // Keep the reference to the scanline element\n  const scanlineElementRef = useRef<HTMLDivElement>(null);\n\n  // Keep the reference to the current hovered trace data\n  const currentHoveredDataPoint = useRef<RunsMetricsSingleTraceTooltipData | undefined>(undefined);\n\n  // Calculate all visible X values each time the plot data changes\n  const visibleXValues = useMemo(() => uniq(plotData.map(({ x }) => x).flat()) as number[], [plotData]);\n\n  // Store the reference to the initialized plotly's figure object, helps keep track when the plot is initialized\n  const [initializedFigure, setInitializedFigure] = useState<{\n    figure: Readonly<Figure>;\n    graphDiv: Readonly<HTMLElement>;\n  } | null>(null);\n\n  // We are calculating the tooltip data outside of React to avoid unnecessary re-renders,\n  // so we're copying all the input data to the mutable ref objects\n  const immediateHoverData = useRef<RunsCompareMultipleTracesTooltipData | undefined>(undefined);\n  const immediateLegendLabelData = useRef(legendLabelData);\n  const immediateRunsData = useRef(runsData);\n  const immediatePlotData = useRef(plotData);\n  const immediateXValuesData = useRef(visibleXValues);\n\n  // Update the mutable ref objects when the input data changes\n  immediateLegendLabelData.current = legendLabelData;\n  immediateRunsData.current = runsData;\n  immediatePlotData.current = plotData;\n  immediateXValuesData.current = visibleXValues;\n\n  // Setup the boundaries of the plot\n  const setupBoundaries = useCallback((figure: Readonly<Figure>) => {\n    const lowerAxisValue = figure.layout.xaxis?.range?.[0];\n    const upperAxisValue = figure.layout.xaxis?.range?.[1];\n\n    // If the axis values are numbers, use them as is, otherwise convert them to timestamps\n    let lowerBoundary = isNumber(lowerAxisValue) ? lowerAxisValue : new Date(lowerAxisValue ?? 0).getTime();\n    let upperBoundary = isNumber(upperAxisValue) ? upperAxisValue : new Date(upperAxisValue ?? 0).getTime();\n\n    lowerBoundary += parseMicroseconds(lowerAxisValue);\n    upperBoundary += parseMicroseconds(upperAxisValue);\n\n    // Save the boundaries to the mutable ref object\n    chartBoundaries.current.lowerBoundValue = lowerBoundary ?? 0;\n    chartBoundaries.current.valueRange = (upperBoundary ?? 0) - chartBoundaries.current.lowerBoundValue;\n  }, []);\n\n  const updateContainerPosition = useCallback(() => {\n    const { mainContainer, dragLayer } = chartBoundaries.current;\n\n    if (mainContainer && dragLayer) {\n      const containerRect = mainContainer.getBoundingClientRect();\n      const dragLayerRect = dragLayer.getBoundingClientRect();\n\n      // Save the boundaries to the mutable ref object\n      chartBoundaries.current.containerLeftPixels = containerRect.x;\n      chartBoundaries.current.plotWidthPixels = dragLayerRect.width;\n      chartBoundaries.current.plotOffsetPixels = dragLayerRect.x - containerRect.x;\n      chartBoundaries.current.initialized = dragLayerRect.width > 0;\n    }\n  }, []);\n\n  // This is a handler of plotly's onUpdate callback.\n  // It is called when the plot is initialized and when the plot is updated.\n  const onUpdatePlotHandler = useCallback(\n    (figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n      setupBoundaries(figure);\n\n      const mainContainer: SVGElement | null = graphDiv.querySelector(PLOTLY_SVG_SELECTOR);\n      const dragLayer: SVGElement | null = graphDiv.querySelector(PLOTLY_DRAGLAYER_SELECTOR);\n\n      chartBoundaries.current.mainContainer = mainContainer;\n      chartBoundaries.current.dragLayer = dragLayer;\n      updateContainerPosition();\n    },\n    [setupBoundaries, updateContainerPosition],\n  );\n\n  // This is a handler of plotly's onInit callback.\n  const onInitPlotHandler = useCallback(\n    (figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n      setInitializedFigure({ figure, graphDiv });\n      onUpdatePlotHandler(figure, graphDiv);\n    },\n    [onUpdatePlotHandler],\n  );\n\n  // Hides the scanline when the mouse leaves the plot\n  const pointerLeavePlotCallback = useCallback(\n    (e: PointerEvent) => {\n      // Noop if the mouse is moving to plotly's dragcover element\n      if (e.relatedTarget instanceof Element && e.relatedTarget.classList.contains('dragcover')) {\n        return;\n      }\n      onUnhover?.();\n      if (scanlineElementRef.current) {\n        scanlineElementRef.current.style.display = 'none';\n      }\n    },\n    [onUnhover],\n  );\n\n  // This is a handler of plotly's onHover callback.\n  const onPointHoverCallback = useCallback(\n    ({ points }) => {\n      const hoveredPoint = points[0];\n      const hoveredPointData = hoveredPoint?.data;\n\n      setHoveredPointIndex(hoveredPoint?.curveNumber ?? -1);\n\n      if (!hoveredPointData) {\n        return;\n      }\n\n      // Extract metric entity\n      const metricEntity = hoveredPointData.metricHistory?.[hoveredPoint.pointIndex];\n\n      const singleTraceData: RunsMetricsSingleTraceTooltipData = {\n        // Value of the \"x\" axis (time, step)\n        xValue: hoveredPoint.x,\n        // Value of the \"y\" axis\n        yValue: hoveredPoint.y,\n        // Metric entity value\n        metricEntity,\n        // The index of the X datum\n        index: hoveredPoint.pointIndex,\n        // Current label (\"Step\", \"Time\" etc.)\n        label: xAxisKeyLabel,\n        // Run/group UUID\n        traceUuid: hoveredPointData.uuid,\n      };\n\n      // Save the hovered point/trace data to the mutable ref object\n      currentHoveredDataPoint.current = singleTraceData;\n    },\n    [xAxisKeyLabel, setHoveredPointIndex],\n  );\n\n  // This is a handler of plotly's onUnhover callback.\n  const onPointUnhoverCallback = useCallback(() => {\n    currentHoveredDataPoint.current = undefined;\n    setHoveredPointIndex(-1);\n  }, [setHoveredPointIndex]);\n\n  const getClosestXValue = useCallback(\n    (pointerClientX: number) => {\n      const boundaries = chartBoundaries.current;\n      // Calculate the X value of the hovered point\n      const resultX =\n        (pointerClientX - boundaries.plotOffsetPixels - boundaries.containerLeftPixels) / boundaries.plotWidthPixels;\n\n      // Calculate the current step based on the X value and precalculated boundaries\n      let currentStep = boundaries.lowerBoundValue + boundaries.valueRange * resultX;\n      if (xAxisScaleType === 'log') {\n        currentStep = 10 ** currentStep;\n      }\n      // Find the closest existing X value to the currently hovered value\n      const closestXValue = immediateXValuesData.current.reduce((acc, x) => {\n        if (Math.abs(x - currentStep) < Math.abs(acc - currentStep)) {\n          return x;\n        }\n        return acc;\n      }, immediateXValuesData.current[0]);\n      return closestXValue;\n    },\n    [xAxisScaleType],\n  );\n\n  useEffect(() => {\n    // Return early if this tooltip is disabled\n    if (disabled) {\n      return;\n    }\n    // Return early if the figure is not initialized yet\n    if (!initializedFigure) {\n      return;\n    }\n\n    // Setup the boundaries of the plot at the beginning\n    setupBoundaries(initializedFigure.figure);\n\n    // Get the drag layer element - this is the event-sensitive layer of rendered plotly chart\n    const dragLayer: SVGElement | null = initializedFigure.graphDiv.querySelector(PLOTLY_DRAGLAYER_SELECTOR);\n\n    // This is a throttled handler of the pointermove event, it contains some heavier logic so it's throttled for 50ms\n    const tooltipDataUpdateHandler = throttle(\n      (e: PointerEvent) => {\n        // If for some reason the chart sizing is not initialized yet, do it now\n        if (!chartBoundaries.current.initialized) {\n          updateContainerPosition();\n        }\n        const closestXValue = getClosestXValue(e.clientX);\n\n        // Calculate the tooltip data - based on existing legend, plot and runs data\n        const data = immediateLegendLabelData.current.map((legendEntry) => {\n          // First, find the corresponding data entry (from chart components's input data) and trace (from data prepared for plotly)\n          const correspondingDataEntry = immediateRunsData.current.find(({ uuid }) => uuid === legendEntry.uuid);\n          const correspondingDataTrace = immediatePlotData.current.find(\n            ({ uuid, metricKey }) => uuid === legendEntry.uuid && legendEntry.metricKey === metricKey,\n          );\n\n          if (!correspondingDataTrace) {\n            return undefined;\n          }\n\n          // Determine the display name of the metric - if there are multiple metrics, use the legend label,\n          // otherwise use the display name of the corresponding data entry.\n          const displayName = containsMultipleMetricKeys ? legendEntry.label : correspondingDataEntry?.displayName;\n\n          // Find the value of the corresponding data trace at the closest X value\n          const xIndex = correspondingDataTrace.x?.indexOf(closestXValue);\n          if (isUndefined(xIndex) || xIndex === -1) {\n            return undefined;\n          }\n          const value = correspondingDataTrace.y?.[xIndex];\n\n          // Construct the tooltip legend entry\n          return {\n            displayName: displayName || '',\n            value: isNumber(value) ? value : undefined,\n            color: legendEntry?.color,\n            dashStyle: legendEntry?.dashStyle,\n            uuid: `${legendEntry.uuid}.${legendEntry.metricKey}`,\n          };\n        });\n\n        // Save the tooltip data to the mutable ref object\n        immediateHoverData.current = {\n          tooltipLegendItems: orderBy(compact(data), 'value', 'desc'),\n          hoveredDataPoint: currentHoveredDataPoint?.current,\n          xValue: closestXValue,\n          xAxisKey,\n          xAxisKeyLabel,\n        };\n      },\n      TOOLTIP_DATA_UPDATE_INTERVAL,\n      { leading: true },\n    );\n\n    const windowResizeHandler = throttle(updateContainerPosition, TOOLTIP_DATA_UPDATE_INTERVAL);\n\n    // This is a handler of the pointermove event.\n    // It's not throttled: it just updates the scanline and tooltip position and pass precalculated tooltip data\n    const hoverHandler = (e: PointerEvent) => {\n      if (!immediateHoverData.current) {\n        return;\n      }\n\n      const boundaries = chartBoundaries.current;\n      const closestXValue = getClosestXValue(e.clientX);\n      const closestXValueLeftX =\n        ((xAxisScaleType === 'log' ? Math.log10(closestXValue) : closestXValue) - boundaries.lowerBoundValue) /\n        boundaries.valueRange;\n      const closestXValueLeftInPixels = closestXValueLeftX * boundaries.plotWidthPixels;\n\n      // Enable and reposition the scanline\n      if (scanlineElementRef.current) {\n        scanlineElementRef.current.style.display = 'block';\n        scanlineElementRef.current.style.left = `${boundaries.plotOffsetPixels + closestXValueLeftInPixels}px`;\n      }\n\n      onHover?.(\n        immediateHoverData.current?.hoveredDataPoint?.traceUuid || '',\n        {\n          x: boundaries.containerLeftPixels + boundaries.plotOffsetPixels + closestXValueLeftInPixels,\n          y: e.clientY,\n          originalEvent: e,\n        },\n        immediateHoverData.current,\n      );\n    };\n\n    if (dragLayer) {\n      // Assign two separate handlers for move: one for updating the tooltip data, one for updating the scanline and tooltip position\n      dragLayer.addEventListener('pointermove', tooltipDataUpdateHandler);\n      dragLayer.addEventListener('pointermove', hoverHandler);\n      window.addEventListener('resize', windowResizeHandler);\n\n      // Assign a handler that hides the scanline and tooltip\n      dragLayer.addEventListener('pointerleave', pointerLeavePlotCallback);\n      return () => {\n        dragLayer.removeEventListener('pointermove', tooltipDataUpdateHandler);\n        dragLayer.removeEventListener('pointermove', hoverHandler);\n        dragLayer.removeEventListener('pointerleave', pointerLeavePlotCallback);\n        window.removeEventListener('resize', windowResizeHandler);\n      };\n    }\n\n    return () => {};\n  }, [\n    pointerLeavePlotCallback,\n    initializedFigure,\n    setupBoundaries,\n    onHover,\n    containsMultipleMetricKeys,\n    currentHoveredDataPoint,\n    disabled,\n    xAxisKey,\n    xAxisKeyLabel,\n    xAxisScaleType,\n    getClosestXValue,\n    updateContainerPosition,\n  ]);\n\n  const scanlineElement = disabled ? null : (\n    <div\n      css={{\n        top: 0,\n        width: 0,\n        borderLeft: `1px dashed rgba(0,0,0,0.5)`,\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n      }}\n      ref={scanlineElementRef}\n      style={{ display: 'none' }}\n    />\n  );\n\n  return {\n    updateHandler: onUpdatePlotHandler,\n    initHandler: onInitPlotHandler,\n    scanlineElement,\n    onPointHover: onPointHoverCallback,\n    onPointUnhover: onPointUnhoverCallback,\n  };\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, isEmpty, isEqual, maxBy, minBy } from 'lodash';\nimport { Config, Dash, Data as PlotlyData, Datum, Layout, LayoutAxis, TypedArray } from 'plotly.js';\nimport { Figure } from 'react-plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { MetricEntity } from '../../../types';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightLineTraces, useRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  normalizeChartValue,\n  useDynamicPlotSize,\n  getLineChartLegendData,\n  lineDashStyles,\n  containsDuplicateXValues,\n  createFadedTraceColor,\n  getChartAxisLabelDescriptor,\n  RunsChartsLineChartXAxisType,\n} from './RunsCharts.common';\nimport { EMA } from '../../MetricsPlotView';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { shouldEnableDeepLearningUIPhase3, shouldEnableRelativeTimeDateAxis } from 'common/utils/FeatureUtils';\nimport { useRunsMultipleTracesTooltipData } from '../hooks/useRunsChartsMultipleTracesTooltip';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\nimport {\n  EPOCH_RELATIVE_TIME,\n  HOUR_IN_MILLISECONDS,\n  LINE_CHART_RELATIVE_TIME_THRESHOLD,\n} from 'experiment-tracking/constants';\n\nexport type LineChartTraceData = PlotlyData & {\n  x?: number[] | undefined;\n  y?: number[];\n  uuid?: string;\n  metricKey?: string;\n};\n\n// Display markers only if there are less than 60 points in the single data trace\nconst MARKER_DISPLAY_THRESHOLD = 60;\n\nconst getDataTraceForRun = ({\n  runEntry,\n  metricKey,\n  xAxisKey,\n  selectedXAxisMetricKey,\n  useDefaultHoverBox,\n  lineSmoothness,\n  lineShape,\n  lineDash,\n  displayPoints,\n}: {\n  runEntry: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>;\n  metricKey: RunsMetricsLinePlotProps['metricKey'];\n  xAxisKey: RunsMetricsLinePlotProps['xAxisKey'];\n  selectedXAxisMetricKey: RunsMetricsLinePlotProps['selectedXAxisMetricKey'];\n  useDefaultHoverBox: RunsMetricsLinePlotProps['useDefaultHoverBox'];\n  lineSmoothness: RunsMetricsLinePlotProps['lineSmoothness'];\n  lineShape: RunsMetricsLinePlotProps['lineShape'];\n  lineDash?: Dash;\n  displayPoints?: boolean;\n}): LineChartTraceData => {\n  if (!runEntry.metricsHistory) {\n    return {};\n  }\n\n  const sortedMetricsHistory = runEntry.metricsHistory[metricKey]?.sort((a, b) =>\n    xAxisKey === RunsChartsLineChartXAxisType.STEP ? a.step - b.step : a.timestamp - b.timestamp,\n  );\n\n  let xValues;\n  let yValues;\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    const xValuesWithSteps = prepareXAxisDataForMetricType(runEntry.metricsHistory[selectedXAxisMetricKey]);\n    const stepOrder = xValuesWithSteps.map(({ step }) => step);\n    const yValueHistory = orderBySteps(sortedMetricsHistory ?? [], stepOrder);\n\n    xValues = xValuesWithSteps.map(({ value }) => value);\n    yValues = orderBySteps(yValueHistory, stepOrder).map(({ value }) => normalizeChartValue(value));\n  } else {\n    xValues = prepareMetricHistoryByAxisType(sortedMetricsHistory, xAxisKey);\n    yValues = sortedMetricsHistory?.map(({ value }) => normalizeChartValue(value));\n  }\n\n  // If there are any duplicate X values, use linear line shape\n  // to avoid bending splines in the wrong direction\n  const optimizedLineShape = containsDuplicateXValues(xValues) ? 'linear' : lineShape;\n\n  // Use chart card's configuration or if its unset, use the automatic behavior by checking the number of points\n  const shouldDisplayMarkers = displayPoints ?? xValues.length < MARKER_DISPLAY_THRESHOLD;\n\n  const containsSingleValue = yValues?.length === 1;\n\n  return {\n    // Let's add UUID to each run so it can be distinguished later (e.g. on hover)\n    uuid: runEntry.uuid,\n    name: runEntry.runInfo?.runName || '',\n    x: xValues,\n    // The actual value is on Y axis\n    y: EMA(yValues ?? [], lineSmoothness),\n    // Save the metric history\n    metricHistory: sortedMetricsHistory,\n    metricKey,\n    hovertext: runEntry.runInfo?.runName || '',\n    text: 'x',\n    textposition: 'outside',\n    textfont: {\n      size: 11,\n    },\n    mode: containsSingleValue || shouldDisplayMarkers ? 'lines+markers' : 'lines',\n    hovertemplate: useDefaultHoverBox ? createTooltipTemplate(runEntry.runInfo?.runName || '') : undefined,\n    hoverinfo: useDefaultHoverBox ? undefined : 'none',\n    hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n    type: 'scatter',\n    line: { dash: lineDash, shape: optimizedLineShape },\n    marker: {\n      color: runEntry.color,\n    },\n  } as LineChartTraceData;\n};\n\nconst getBandTraceForRun = ({\n  runEntry,\n  metricKey,\n  lineShape,\n  xAxisKey,\n  selectedXAxisMetricKey,\n}: {\n  runEntry: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>;\n  metricKey: RunsMetricsLinePlotProps['metricKey'];\n  lineShape: RunsMetricsLinePlotProps['lineShape'];\n  xAxisKey: RunsChartsLineChartXAxisType;\n  selectedXAxisMetricKey: RunsMetricsLinePlotProps['selectedXAxisMetricKey'];\n}): LineChartTraceData => {\n  if (!runEntry.aggregatedMetricsHistory) {\n    return {};\n  }\n\n  // Get upper and lower boundaries to draw a band\n  const { max, min } = runEntry.aggregatedMetricsHistory[metricKey];\n\n  let xMins, xMaxes, yMins, yMaxes;\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    if (!runEntry.metricsHistory) {\n      return {};\n    }\n    const xValuesWithSteps = prepareXAxisDataForMetricType(runEntry.metricsHistory[selectedXAxisMetricKey]);\n    const stepOrder = xValuesWithSteps.map((e) => e.step);\n    const xValues = xValuesWithSteps.map((e) => e.value);\n\n    yMins = orderBySteps(min, stepOrder)\n      .map(({ value }) => normalizeChartValue(value))\n      .reverse();\n    yMaxes = orderBySteps(max, stepOrder).map(({ value }) => normalizeChartValue(value));\n    xMins = xValues.slice().reverse();\n    xMaxes = xValues;\n  } else {\n    // Reverse one of the arrays so that the band is drawn correctly\n    const minReversed = min.slice().reverse();\n    xMins = prepareMetricHistoryByAxisType(minReversed, xAxisKey);\n    xMaxes = prepareMetricHistoryByAxisType(max, xAxisKey);\n    yMins = minReversed.map(({ value }) => normalizeChartValue(value));\n    yMaxes = max.map(({ value }) => normalizeChartValue(value));\n  }\n\n  // Place a null value in the middle to create a gap, otherwise Plotly will\n  // connect the lines and the fill will be drawn incorrectly\n  const xValues = [...xMins, null, ...xMaxes];\n  const bandValues = [...yMins, null, ...yMaxes];\n\n  return {\n    name: runEntry.runInfo?.runName || '',\n    x: xValues,\n    y: bandValues,\n    fillcolor: createFadedTraceColor(runEntry.color, 0.2),\n    hovertemplate: undefined,\n    hoverlabel: undefined,\n    hoverinfo: 'skip',\n    line: { color: 'transparent', shape: lineShape },\n    fill: 'tozeroy',\n    type: 'scatter',\n  } as LineChartTraceData;\n};\n\n/**\n * This function takes a list of metric entities and returns a copy ordered by\n * the step order provided. This is used in metric-type X axes, where the Y values\n * need to be ordered by the X values.\n *\n * For example:\n * dataPoints = [{step: 0, value: 1}, {step: 1, value: 2}, {step: 2, value: 3}]\n * stepOrder = [2, 0, 1]\n * return = [{step: 2, value: 3}, {step: 0, value: 1}, {step: 1, value: 2}]\n */\nconst orderBySteps = (dataPoints: MetricEntity[], stepOrder: number[]) => {\n  const stepIndexes = stepOrder.reduce((acc, step, idx) => {\n    acc[step] = idx;\n    return acc;\n  }, {} as Record<number, number>);\n\n  return dataPoints.slice().sort((a, b) => stepIndexes[a.step] - stepIndexes[b.step]);\n};\n\nexport interface RunsMetricsSingleTraceTooltipData {\n  xValue: string | number;\n  yValue: number;\n  index: number;\n  label: string;\n  traceUuid?: string;\n  metricEntity?: MetricEntity;\n}\n\nexport interface RunsCompareMultipleTracesTooltipData {\n  tooltipLegendItems: {\n    uuid: string;\n    color?: string;\n    dashStyle?: Dash;\n    displayName: string;\n    value?: string | number;\n  }[];\n  xValue: string | number;\n  xAxisKey: RunsChartsLineChartXAxisType;\n  xAxisKeyLabel: string;\n  hoveredDataPoint?: RunsMetricsSingleTraceTooltipData;\n}\n\nexport interface RunsMetricsLinePlotProps extends RunsPlotsCommonProps {\n  /**\n   * Determines which metric are we comparing by\n   * NOTE: used only as a fallback in V2 charts\n   */\n  metricKey: string;\n\n  /**\n   * Determines which metric keys to display in V2 charts\n   * NOTE: this prop may not be present in V1 chart configs\n   */\n  selectedMetricKeys?: string[];\n\n  /**\n   * Smoothing factor for EMA\n   */\n  lineSmoothness?: number;\n\n  /**\n   * X axis mode\n   */\n  xAxisScaleType?: 'linear' | 'log';\n\n  /**\n   * Y axis mode\n   */\n  scaleType?: 'linear' | 'log';\n\n  /**\n   * Use spline or polyline. Spline is default mode.\n   */\n  lineShape?: 'linear' | 'spline';\n\n  /**\n   * Choose X axis mode - numeric step or absolute time\n   */\n  xAxisKey?: RunsChartsLineChartXAxisType;\n\n  /**\n   * Name of the metric to use for the X axis. Used when xAxisKey is set to 'metric'\n   */\n  selectedXAxisMetricKey: string;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>[];\n\n  /**\n   * Currently visible range on x-axis.\n   */\n  xRange?: [number | string, number | string];\n\n  /**\n   * Currently visible range on y-axis\n   */\n  yRange?: [number | string, number | string];\n\n  /**\n   * If set to true, only x-axis can be zoomed by dragging\n   */\n  lockXAxisZoom?: boolean;\n\n  /**\n   * Display points on the line chart. Undefined means \"auto\" mode, i.e. display points only when\n   * there are fewer than 60 datapoints on the chart.\n   */\n  displayPoints?: boolean;\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  doubleClick: 'autosize',\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nexport const createTooltipTemplate = (runName: string) =>\n  `<b>${runName}</b>:<br>` +\n  '<b>%{xaxis.title.text}:</b> %{x}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Prepares dataset's X axis according to selected visualization type: step, time-wall and time-relative\n *\n * NOTE: metric-type X axes are handled by `prepareXAxisDataForMetricType()`, since we need to retain\n *       step information in order to format the Y axis data correctly.\n */\nconst prepareMetricHistoryByAxisType = (\n  metricHistory?: MetricEntity[],\n  axisType?: RunsMetricsLinePlotProps['xAxisKey'],\n) => {\n  if (!metricHistory) {\n    return [];\n  }\n  if (axisType === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n    const { timestamp: minTimestamp } = minBy(metricHistory, 'timestamp') || {};\n    if (minTimestamp) {\n      if (shouldEnableRelativeTimeDateAxis()) {\n        return metricHistory.map(({ timestamp }) => timestamp - minTimestamp + EPOCH_RELATIVE_TIME);\n      }\n      return metricHistory.map(({ timestamp }) => (timestamp - minTimestamp) / 1000); // Milliseconds -> seconds\n    }\n    return metricHistory.map(({ step }) => step);\n  } else if (shouldEnableRelativeTimeDateAxis() && axisType === RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS) {\n    const { timestamp: minTimestamp } = minBy(metricHistory, 'timestamp') || {};\n    if (minTimestamp) {\n      return metricHistory.map(({ timestamp }) => (timestamp - minTimestamp) / HOUR_IN_MILLISECONDS);\n    }\n  } else if (axisType === RunsChartsLineChartXAxisType.TIME) {\n    return metricHistory.map(({ timestamp }) => timestamp);\n  }\n\n  return metricHistory.map(({ step }) => step);\n};\n\n/**\n * Prepares dataset's X axis when axisType is 'metric'. This is separate from\n * `prepareMetricHistoryByAxisType` because we need to keep track of the `step`\n * in addition to the `value`, so that the Y axis data can be associated to the\n * correct X datapoint.\n */\nconst prepareXAxisDataForMetricType = (\n  metricHistory?: MetricEntity[],\n): Array<{\n  value: number | undefined;\n  step: number;\n}> => {\n  if (!metricHistory) {\n    return [];\n  }\n\n  return metricHistory\n    .map((datapoint) => ({\n      value: normalizeChartValue(datapoint.value),\n      step: datapoint.step,\n    }))\n    .sort((a, b) => {\n      // sort by value in ascending order\n      return Number(a.value) - Number(b.value);\n    });\n};\n\n/**\n * Implementation of plotly.js chart displaying\n * line plot comparing metrics' history for a given\n * set of experiments runs\n */\nexport const RunsMetricsLinePlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    selectedMetricKeys,\n    scaleType = 'linear',\n    xAxisScaleType = 'linear',\n    xAxisKey = RunsChartsLineChartXAxisType.STEP,\n    selectedXAxisMetricKey = '',\n    lineSmoothness = 70,\n    className,\n    margin = runsChartDefaultMargin,\n    lineShape = 'linear',\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    xRange,\n    yRange,\n    lockXAxisZoom,\n    fullScreen,\n    displayPoints,\n    onSetDownloadHandler,\n  }: RunsMetricsLinePlotProps) => {\n    const { theme } = useDesignSystemTheme();\n    const usingMultipleRunsHoverTooltip = shouldEnableDeepLearningUIPhase3();\n\n    const dynamicXAxisKey = useMemo(() => {\n      let dynamicXAxisKey = xAxisKey;\n      if (shouldEnableRelativeTimeDateAxis() && xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n        const metricKeys = selectedMetricKeys || [metricKey];\n        let maxDiff = 0;\n        runsData.forEach((runData) => {\n          const metricHistory = runData.metricsHistory;\n          if (metricHistory) {\n            metricKeys.forEach((metricKey) => {\n              if (metricHistory[metricKey]) {\n                const { timestamp: minTimestamp } = minBy(metricHistory[metricKey], 'timestamp') || {};\n                const { timestamp: maxTimestamp } = maxBy(metricHistory[metricKey], 'timestamp') || {};\n                if (maxTimestamp && minTimestamp) {\n                  const diff = maxTimestamp - minTimestamp;\n                  maxDiff = Math.max(maxDiff, diff);\n                }\n              }\n            });\n          }\n        });\n\n        if (maxDiff >= LINE_CHART_RELATIVE_TIME_THRESHOLD) {\n          dynamicXAxisKey = RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS;\n        }\n      }\n      return dynamicXAxisKey;\n    }, [runsData, selectedMetricKeys, metricKey, xAxisKey]);\n\n    const plotData = useMemo(() => {\n      // Generate a data trace for each metric in each run\n      const metricKeys = selectedMetricKeys ?? [metricKey];\n      return runsData\n        .map((runEntry) =>\n          metricKeys\n            // Discard creating traces for metrics that don't have any history for a given run\n            .filter((metricKey) => !isEmpty(runEntry.metricsHistory?.[metricKey]))\n            .map((metricKey, idx) => {\n              return getDataTraceForRun({\n                runEntry,\n                metricKey,\n                xAxisKey: dynamicXAxisKey,\n                selectedXAxisMetricKey,\n                useDefaultHoverBox,\n                lineSmoothness,\n                lineShape,\n                lineDash: lineDashStyles[idx % lineDashStyles.length],\n                displayPoints,\n              });\n            }),\n        )\n        .flat();\n    }, [\n      runsData,\n      lineShape,\n      dynamicXAxisKey,\n      lineSmoothness,\n      metricKey,\n      useDefaultHoverBox,\n      selectedMetricKeys,\n      selectedXAxisMetricKey,\n      displayPoints,\n    ]);\n\n    const bandsData = useMemo(() => {\n      const metricKeys = selectedMetricKeys ?? [metricKey];\n      return runsData\n        .filter(({ groupParentInfo }) => groupParentInfo)\n        .flatMap((runEntry) =>\n          metricKeys.map((metricKey) =>\n            getBandTraceForRun({\n              runEntry,\n              metricKey,\n              lineShape,\n              xAxisKey: dynamicXAxisKey,\n              selectedXAxisMetricKey,\n            }),\n          ),\n        );\n    }, [lineShape, metricKey, runsData, selectedMetricKeys, dynamicXAxisKey, selectedXAxisMetricKey]);\n\n    const plotDataWithBands = useMemo(() => [...bandsData, ...plotData], [plotData, bandsData]);\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n\n    const { setHoveredPointIndex } = useRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      plotDataWithBands,\n      highlightLineTraces,\n      bandsData.length,\n    );\n\n    const xAxisKeyLabel = useMemo(() => {\n      if (dynamicXAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n        return selectedXAxisMetricKey;\n      }\n\n      return formatMessage(getChartAxisLabelDescriptor(dynamicXAxisKey));\n    }, [formatMessage, dynamicXAxisKey, selectedXAxisMetricKey]);\n\n    const yAxisParams: Partial<LayoutAxis> = useMemo(\n      () => ({\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        type: scaleType === 'log' ? 'log' : 'linear',\n        fixedrange: lockXAxisZoom,\n      }),\n      [scaleType, lockXAxisZoom, theme],\n    );\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: {\n        title: xAxisKeyLabel,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n      },\n      yaxis: yAxisParams,\n      showlegend: false,\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const updatedLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n          yaxis: yAxisParams,\n          showlegend: false,\n        };\n        if (isEqual(updatedLayout, current)) {\n          return current;\n        }\n        return updatedLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, yAxisParams, width, height, xAxisKeyLabel]);\n\n    const containsMultipleMetricKeys = useMemo(() => (selectedMetricKeys?.length || 0) > 1, [selectedMetricKeys]);\n\n    const hoverCallback = useCallback(\n      ({ points, event }) => {\n        const hoveredPoint = points[0];\n        const hoveredPointData = hoveredPoint?.data;\n        setHoveredPointIndex(hoveredPoint?.curveNumber ?? -1);\n\n        if (!hoveredPointData) {\n          return;\n        }\n        const runUuid = hoveredPointData.uuid;\n\n        // Extract metric entity\n        const metricEntity = hoveredPointData.metricHistory?.[hoveredPoint.pointIndex];\n\n        const data: RunsMetricsSingleTraceTooltipData = {\n          // Value of the \"x\" axis (time, step)\n          xValue: hoveredPoint.x,\n          // Value of the \"y\" axis\n          yValue: hoveredPoint.y,\n          // Metric entity value\n          metricEntity,\n          // The index of the X datum\n          index: hoveredPoint.pointIndex,\n          // Current label (\"Step\", \"Time\" etc.)\n          label: xAxisKeyLabel,\n        };\n        if (runUuid) {\n          onHover?.(runUuid, event, data);\n        }\n      },\n      [onHover, setHoveredPointIndex, xAxisKeyLabel],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    const themedPlotlyLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const getXAxisType = (xAxisKey: RunsChartsLineChartXAxisType, xAxisScaleType: 'linear' | 'log') => {\n      if (\n        xAxisKey === RunsChartsLineChartXAxisType.TIME ||\n        (shouldEnableRelativeTimeDateAxis() && dynamicXAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE)\n      ) {\n        return 'date';\n      }\n      if (xAxisKey === RunsChartsLineChartXAxisType.STEP && xAxisScaleType === 'log') {\n        return 'log';\n      }\n      return 'linear';\n    };\n\n    const getXAxisRange = (\n      xAxisKey: RunsChartsLineChartXAxisType,\n      xRange: [number | string, number | string],\n      xAxisScaleType: 'linear' | 'log',\n    ) => {\n      if (\n        xAxisKey === RunsChartsLineChartXAxisType.STEP &&\n        typeof xRange[0] === 'number' &&\n        typeof xRange[1] === 'number'\n      ) {\n        if (xAxisScaleType === 'log') {\n          if (xRange[0] < 0 && xRange[1] < 0) {\n            // If both are negative, autoscale\n            return undefined;\n          } else if (xRange[0] < 0) {\n            // If only the lower bound is negative, set it to 0\n            return [0, xRange[1]];\n          }\n        }\n      }\n      return [...xRange];\n    };\n\n    // When switching axis title, Plotly.js mutates its layout object\n    // internally which leads to desync problems and automatic axis range\n    // ends up with an invalid value. In order to fix it, we are mutating\n    // axis object and injecting metric key as title in\n    // the render phase.\n    // It could be fixed by wrapping plotly.js directly instead of using\n    // react-plotly.js - but the effort does not correspond to the plan of\n    // moving away from plotly soon.\n    const immediateLayout = layout;\n    if (immediateLayout.xaxis) {\n      immediateLayout.xaxis.title = xAxisKeyLabel;\n      immediateLayout.xaxis.type = getXAxisType(xAxisKey, xAxisScaleType);\n      if (xRange) {\n        immediateLayout.xaxis.range = getXAxisRange(xAxisKey, xRange, xAxisScaleType);\n      }\n      immediateLayout.xaxis.tickformat =\n        shouldEnableRelativeTimeDateAxis() && dynamicXAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE\n          ? '%H:%M:%S'\n          : undefined;\n    }\n    immediateLayout.template = { layout: themedPlotlyLayout };\n\n    if (yRange && immediateLayout.yaxis) {\n      immediateLayout.yaxis.range = yRange;\n      immediateLayout.yaxis.automargin = true;\n      immediateLayout.yaxis.tickformat = 'f';\n    }\n\n    const legendLabelData = useMemo(\n      () => getLineChartLegendData(runsData, selectedMetricKeys, metricKey),\n      [runsData, selectedMetricKeys, metricKey],\n    );\n\n    const {\n      scanlineElement,\n      initHandler,\n      updateHandler: updateHandlerMultipleRuns,\n      onPointHover: hoverCallbackMultipleRuns,\n      onPointUnhover: unhoverCallbackMultipleRuns,\n    } = useRunsMultipleTracesTooltipData({\n      legendLabelData,\n      plotData,\n      runsData,\n      containsMultipleMetricKeys,\n      onHover,\n      onUnhover: unhoverCallback,\n      xAxisKeyLabel,\n      xAxisKey: dynamicXAxisKey,\n      xAxisScaleType: xAxisKey === RunsChartsLineChartXAxisType.STEP ? xAxisScaleType : 'linear',\n      setHoveredPointIndex,\n      disabled: !usingMultipleRunsHoverTooltip,\n    });\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(\n      usingMultipleRunsHoverTooltip ? hoverCallbackMultipleRuns : hoverCallback,\n    );\n\n    // Prepare data for image download handler\n    useEffect(() => {\n      // Check if we are using multiple metric keys. If so, we also need to append\n      // the metric key to  the trace name in the exported image.\n      const usingMultipleMetricKeys = (selectedMetricKeys?.length || 0) > 1;\n      const dataToExport = usingMultipleMetricKeys\n        ? plotDataWithBands.map((dataTrace) =>\n            dataTrace.metricKey\n              ? {\n                  ...dataTrace,\n                  name: `${dataTrace.name} (${dataTrace.metricKey})`,\n                }\n              : dataTrace,\n          )\n        : plotDataWithBands;\n\n      const layoutToExport: Partial<Layout> = {\n        ...layout,\n        showlegend: true,\n        legend: {\n          orientation: 'h',\n        },\n      };\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layoutToExport));\n    }, [layout, onSetDownloadHandler, plotDataWithBands, selectedMetricKeys?.length]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotDataWithBands}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={(figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n            if (usingMultipleRunsHoverTooltip) {\n              updateHandlerMultipleRuns(figure, graphDiv);\n            }\n            onUpdate?.(figure, graphDiv);\n          }}\n          layout={immediateLayout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={usingMultipleRunsHoverTooltip ? unhoverCallbackMultipleRuns : unhoverCallback}\n          onInitialized={initHandler}\n        />\n        {scanlineElement}\n      </div>\n    );\n\n    return (\n      <RunsMetricsLegendWrapper labelData={legendLabelData} fullScreen={fullScreen}>\n        {chart}\n      </RunsMetricsLegendWrapper>\n    );\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.scatterlayer g.trace': {\n      transition: 'var(--trace-transition)',\n    },\n    '.scatterlayer.is-highlight g.trace:not(.is-band)': {\n      opacity: 'var(--trace-opacity-dimmed-low) !important',\n    },\n    '.scatterlayer g.trace.is-hover-highlight:not(.is-band)': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight:not(.is-band)': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight path.point': {\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n    '.scatterlayer.is-highlight g.trace.is-band:not(.is-band-highlighted)': {\n      opacity: 'var(--trace-opacity-dimmed) !important',\n    },\n  },\n};\n","import { isUndefined } from 'lodash';\n\nimport { RunsCompareMultipleTracesTooltipData } from './RunsMetricsLinePlot';\nimport React from 'react';\nimport { TraceLabelColorIndicator } from './RunsMetricsLegend';\nimport { FormattedDate, FormattedTime, useIntl } from 'react-intl';\nimport { getChartAxisLabelDescriptor, RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldEnableRelativeTimeDateAxis } from 'common/utils/FeatureUtils';\n\n// Sadly when hovering outside data point, we can't get the date-time value from Plotly chart\n// so we have to format it ourselves in a way that resembles Plotly's logic\nconst PlotlyLikeFormattedTime = ({ value }: { value: string | number }) => (\n  <>\n    <FormattedDate value={value} year=\"numeric\" />-\n    <FormattedDate value={value} month=\"2-digit\" />-\n    <FormattedDate value={value} day=\"2-digit\" /> <FormattedTime value={value} hour=\"numeric\" hourCycle=\"h24\" />:\n    <FormattedTime value={value} minute=\"2-digit\" />:\n    {/* @ts-expect-error \"fractionalSecondDigits\" is supported but missing from TS types */}\n    <FormattedTime value={value} second=\"2-digit\" fractionalSecondDigits={3} />\n  </>\n);\n\n// Sadly when hovering outside data point, we can't get the date-time value from Plotly chart\n// so we have to format it ourselves in a way that resembles Plotly's logic\nconst PlotlyLikeFormattedTimestamp = ({ value }: { value: string | number }) => (\n  <>\n    <FormattedTime value={value} hour=\"2-digit\" hourCycle=\"h23\" />:\n    <FormattedTime value={value} minute=\"2-digit\" />:\n    {/* @ts-expect-error \"fractionalSecondDigits\" is supported but missing from TS types */}\n    <FormattedTime value={value} second=\"2-digit\" fractionalSecondDigits={3} />\n  </>\n);\n\n/**\n * Variant of the tooltip body for the line chart that displays multiple traces at once.\n * Used in the compare runs page and run details metrics page.\n */\nexport const RunsMultipleTracesTooltipBody = ({ hoverData }: { hoverData: RunsCompareMultipleTracesTooltipData }) => {\n  const { tooltipLegendItems, hoveredDataPoint: singleTraceHoverData, xValue, xAxisKeyLabel } = hoverData;\n  const { traceUuid: runUuid, metricEntity } = singleTraceHoverData || {};\n\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const hoveredTraceUuid = `${runUuid}.${metricEntity?.key}`;\n  const displayedXValueLabel =\n    hoverData.xAxisKey === RunsChartsLineChartXAxisType.METRIC\n      ? xAxisKeyLabel\n      : intl.formatMessage(getChartAxisLabelDescriptor(hoverData.xAxisKey));\n\n  if (tooltipLegendItems) {\n    return (\n      <div>\n        {!isUndefined(xValue) && (\n          <div css={{ marginBottom: theme.spacing.xs }}>\n            <span css={{ fontWeight: 'bold' }}>{displayedXValueLabel}</span>{' '}\n            {hoverData.xAxisKey === RunsChartsLineChartXAxisType.TIME ? (\n              <PlotlyLikeFormattedTime value={xValue} />\n            ) : shouldEnableRelativeTimeDateAxis() &&\n              hoverData.xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE ? (\n              <PlotlyLikeFormattedTimestamp value={xValue} />\n            ) : (\n              xValue\n            )}\n          </div>\n        )}\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: `${theme.general.iconSize}px auto auto`,\n            columnGap: theme.spacing.sm,\n            rowGap: theme.spacing.sm / 4,\n            alignItems: 'center',\n          }}\n        >\n          {tooltipLegendItems.map(({ displayName, color, uuid, value, dashStyle }) => (\n            <React.Fragment key={uuid}>\n              <TraceLabelColorIndicator color={color || 'transparent'} dashStyle={dashStyle} />\n\n              <div\n                css={{\n                  marginRight: theme.spacing.md,\n                  fontSize: theme.typography.fontSizeSm,\n                  color: hoveredTraceUuid === uuid ? 'unset' : theme.colors.textPlaceholder,\n                }}\n              >\n                {displayName}\n              </div>\n              <div>\n                {!isUndefined(value) && (\n                  <span\n                    css={{\n                      fontWeight: hoveredTraceUuid === uuid ? 'bold' : 'normal',\n                      color: hoveredTraceUuid === uuid ? 'unset' : theme.colors.textPlaceholder,\n                    }}\n                  >\n                    {value}\n                  </span>\n                )}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightScatterTraces, useRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  RunsChartAxisDef,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\n\nexport interface RunsScatterPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: RunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: RunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: RunsChartsRunData[];\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nexport const createTooltipTemplate = () =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * scatter plot comparing values for a given\n * set of experiments runs\n */\nexport const RunsScatterPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    markerSize = 10,\n    className,\n    margin = runsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsScatterPlotProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const { runInfo, metrics, params, color, uuid, displayName } = runData;\n        const { runUuid, runName } = runInfo || {};\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.key]?.value || undefined;\n        const y = yAxisData?.[yAxis.key]?.value || undefined;\n\n        if (x && y) {\n          xValues.push(x);\n          yValues.push(y);\n          colors.push(color || theme.colors.primary);\n          if (runUuid) {\n            tooltipData.push([runUuid, runName || runUuid] as any);\n          } else {\n            tooltipData.push([uuid, displayName] as any);\n          }\n        }\n      }\n\n      return [\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          text: runsData.map(({ displayName }) => displayName),\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate() : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          textposition: 'bottom center',\n          marker: {\n            size: markerSize,\n            color: colors,\n          },\n        } as Data,\n      ];\n    }, [runsData, xAxis, yAxis, theme, markerSize, useDefaultHoverBox]);\n\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      yaxis: { title: yAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = yAxis.key;\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (points[0] as any)?.customdata?.[0];\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      const dataToExport: Data[] = plotData.map((trace: Data) => ({\n        ...trace,\n        mode: 'text+markers',\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layout));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), commonRunsChartStyles.scatterChartHighlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onUpdate={onUpdate}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n","import {\n  Button,\n  DragIcon,\n  DropdownMenu,\n  OverflowIcon,\n  Typography,\n  useDesignSystemTheme,\n  InfoTooltip,\n  FullscreenIcon,\n  Switch,\n  Spinner,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { PropsWithChildren, ReactNode } from 'react';\nimport { useDragAndDropElement } from '../../../../../common/hooks/useDragAndDropElement';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { FormattedMessage } from 'react-intl';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsCardConfig } from '../../runs-charts.types';\nimport type { ExperimentChartImageDownloadFileFormat } from '../../hooks/useChartImageDownloadHandler';\n\nexport enum RunsChartsChartsDragGroup {\n  PARALLEL_CHARTS_AREA = 'PARALLEL_CHARTS_AREA',\n  GENERAL_AREA = 'GENERAL_AREA',\n}\n\nexport interface RunsChartCardReorderProps {\n  onReorderWith: (draggedKey: string, targetDropKey: string) => void;\n  canMoveUp: boolean;\n  canMoveDown: boolean;\n  onMoveUp: () => void;\n  onMoveDown: () => void;\n}\n\nexport type RunsChartCardSetFullscreenFn = (chart: {\n  config: RunsChartsCardConfig;\n  title: string;\n  subtitle: ReactNode;\n}) => void;\n\nexport interface RunsChartCardFullScreenProps {\n  fullScreen?: boolean;\n  setFullScreenChart?: RunsChartCardSetFullscreenFn;\n}\n\nexport interface ChartCardToggleProps {\n  toggleLabel: string;\n  currentToggle: boolean;\n  setToggle: () => void;\n}\n\nexport interface ChartCardWrapperProps extends RunsChartCardReorderProps {\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n  onEdit: () => void;\n  onDelete: () => void;\n  tooltip?: string;\n  uuid?: string;\n  dragGroupKey: RunsChartsChartsDragGroup;\n  additionalMenuContent?: React.ReactNode;\n  toggleFullScreenChart?: () => void;\n  toggles?: ChartCardToggleProps[];\n  isRefreshing?: boolean;\n  onClickDownload?: (format: ExperimentChartImageDownloadFileFormat | 'csv' | 'csv-full') => void;\n  supportedDownloadFormats?: (ExperimentChartImageDownloadFileFormat | 'csv' | 'csv-full')[];\n}\n\nexport const ChartRunsCountIndicator = ({ runsOrGroups }: { runsOrGroups: RunsChartsRunData[] }) => {\n  const containsGroups = runsOrGroups.some(({ groupParentInfo }) => groupParentInfo);\n  const containsRuns = runsOrGroups.some(({ runInfo }) => runInfo);\n\n  // After moving to the new run rows visibility model, we don't configure run count per chart\n  if (shouldUseNewRunRowsVisibilityModel()) {\n    return null;\n  }\n\n  return containsRuns && containsGroups ? (\n    <FormattedMessage\n      defaultMessage=\"Comparing first {count} groups and runs\"\n      values={{ count: runsOrGroups.length }}\n      description=\"Experiment page > compare runs > chart header > compared groups and runs count label\"\n    />\n  ) : containsGroups ? (\n    <FormattedMessage\n      defaultMessage=\"Comparing first {count} groups\"\n      values={{ count: runsOrGroups.length }}\n      description=\"Experiment page > compare runs > chart header > compared groups count label\"\n    />\n  ) : (\n    <FormattedMessage\n      defaultMessage=\"Comparing first {count} runs\"\n      values={{ count: runsOrGroups.length }}\n      description=\"Experiment page > compare runs > chart header > compared runs count label\"\n    />\n  );\n};\n\n/**\n * Wrapper components for all chart cards. Provides styles and adds\n * a dropdown menu with actions for configure and delete.\n */\nexport const RunsChartCardWrapper = ({\n  title,\n  subtitle,\n  onDelete,\n  onEdit,\n  children,\n  uuid,\n  dragGroupKey,\n  tooltip = '',\n  onReorderWith = () => {},\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  additionalMenuContent,\n  toggleFullScreenChart,\n  toggles,\n  supportedDownloadFormats = [],\n  onClickDownload,\n  isRefreshing = false,\n}: PropsWithChildren<ChartCardWrapperProps>) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { dragHandleRef, dragPreviewRef, dropTargetRef, isDraggingOtherGroup, isOver } = useDragAndDropElement({\n    dragGroupKey,\n    dragKey: uuid || '',\n    onDrop: onReorderWith,\n    disabled: false,\n  });\n\n  return (\n    <div\n      css={{\n        height: 360,\n        overflow: 'hidden',\n        display: 'grid',\n        gridTemplateRows: 'auto 1fr',\n        backgroundColor: theme.colors.backgroundPrimary,\n        padding: 12,\n        // have a slightly smaller padding when the enableDeepLearningUI\n        // flag is on to accomodate the legend in the charts\n        paddingBottom: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.general.borderRadiusBase,\n        transition: 'opacity 0.12s',\n        position: 'relative',\n      }}\n      style={{\n        opacity: isDraggingOtherGroup ? 0.1 : isOver ? 0.5 : 1,\n      }}\n      data-testid=\"experiment-view-compare-runs-card\"\n      ref={(element) => {\n        // Use this element for both drag preview and drop target\n        dragPreviewRef?.(element);\n        dropTargetRef?.(element);\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          overflow: 'hidden',\n        }}\n      >\n        <div\n          ref={dragHandleRef}\n          data-testid=\"experiment-view-compare-runs-card-drag-handle\"\n          css={{\n            marginTop: theme.spacing.xs,\n            marginRight: theme.spacing.sm,\n            cursor: 'grab',\n          }}\n        >\n          <DragIcon />\n        </div>\n        <div css={{ overflow: 'hidden', flex: 1, flexShrink: 1 }}>\n          <Typography.Title\n            title={String(title)}\n            level={4}\n            css={{\n              marginBottom: 0,\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            {title}\n          </Typography.Title>\n          {subtitle && <span css={styles.subtitle(theme)}>{subtitle}</span>}\n          {tooltip && <InfoTooltip css={{ verticalAlign: 'middle' }} title={tooltip} />}\n        </div>\n        {isRefreshing && (\n          <div\n            css={{\n              width: theme.general.heightSm,\n              height: theme.general.heightSm,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        )}\n        {toggles && (\n          <div\n            css={{\n              display: 'flex',\n              padding: `0px ${theme.spacing.lg}px`,\n              gap: theme.spacing.md,\n              alignItems: 'flex-start',\n            }}\n          >\n            {toggles.map((toggle) => {\n              return (\n                <Switch\n                  key={toggle.toggleLabel}\n                  checked={toggle.currentToggle}\n                  onChange={toggle.setToggle}\n                  label={toggle.toggleLabel}\n                />\n              );\n            })}\n          </div>\n        )}\n        <Button\n          componentId=\"fullscreen_button_chartcard\"\n          icon={<FullscreenIcon />}\n          onClick={toggleFullScreenChart}\n          disabled={!toggleFullScreenChart}\n        />\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_cards_chartcard.common.tsx_158\"\n              type=\"tertiary\"\n              icon={<OverflowIcon />}\n              data-testid=\"experiment-view-compare-runs-card-menu\"\n            />\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content align=\"end\" minWidth={100}>\n            <DropdownMenu.Item onClick={onEdit} data-testid=\"experiment-view-compare-runs-card-edit\">\n              Configure\n            </DropdownMenu.Item>\n            <DropdownMenu.Item onClick={onDelete} data-testid=\"experiment-view-compare-runs-card-delete\">\n              Delete\n            </DropdownMenu.Item>\n            {supportedDownloadFormats.length > 0 && onClickDownload && (\n              <>\n                <DropdownMenu.Separator />\n                {supportedDownloadFormats.includes('csv') && (\n                  <DropdownMenu.Item onClick={() => onClickDownload('csv')}>\n                    <FormattedMessage\n                      defaultMessage=\"Export as CSV\"\n                      description=\"Experiment page > compare runs tab > chart header > export CSV data option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n                {supportedDownloadFormats.includes('svg') && (\n                  <DropdownMenu.Item onClick={() => onClickDownload('svg')}>\n                    <FormattedMessage\n                      defaultMessage=\"Download as SVG\"\n                      description=\"Experiment page > compare runs tab > chart header > download as SVG option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n                {supportedDownloadFormats.includes('png') && (\n                  <DropdownMenu.Item onClick={() => onClickDownload('png')}>\n                    <FormattedMessage\n                      defaultMessage=\"Download as PNG\"\n                      description=\"Experiment page > compare runs tab > chart header > download as PNG option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n              </>\n            )}\n            <DropdownMenu.Separator />\n            <DropdownMenu.Item\n              disabled={!canMoveUp}\n              onClick={onMoveUp}\n              data-testid=\"experiment-view-compare-runs-move-up\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Move up\"\n                description=\"Experiment page > compare runs tab > chart header > move up option\"\n              />\n            </DropdownMenu.Item>\n            <DropdownMenu.Item\n              disabled={!canMoveDown}\n              onClick={onMoveDown}\n              data-testid=\"experiment-view-compare-runs-move-down\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Move down\"\n                description=\"Experiment page > compare runs tab > chart header > move down option\"\n              />\n            </DropdownMenu.Item>\n            {additionalMenuContent}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nconst styles = {\n  chartEntry: (theme: Theme) => ({\n    height: 360,\n    overflow: 'hidden',\n    display: 'grid',\n    gridTemplateRows: 'auto 1fr',\n    backgroundColor: theme.colors.backgroundPrimary,\n    padding: theme.spacing.md,\n    border: `1px solid ${theme.colors.border}`,\n    borderRadius: theme.general.borderRadiusBase,\n  }),\n  chartComponentWrapper: () => ({\n    overflow: 'hidden',\n  }),\n  subtitle: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    fontSize: 11,\n    marginRight: 4,\n    verticalAlign: 'middle',\n  }),\n};\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsMetricsBarPlot } from '../RunsMetricsBarPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport type { RunsChartsBarCardConfig } from '../../runs-charts.types';\nimport { useIsInViewport } from '../../hooks/useIsInViewport';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport {\n  RunsChartCardWrapper,\n  type RunsChartCardReorderProps,\n  RunsChartsChartsDragGroup,\n  ChartRunsCountIndicator,\n  RunsChartCardFullScreenProps,\n} from './ChartCard.common';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\n\nexport interface RunsChartsBarChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsBarCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const barChartCardDefaultMargin = {\n  t: 24,\n  b: 48,\n  r: 0,\n  l: 4,\n  pad: 0,\n};\n\nexport const RunsChartsBarChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsBarChartCardProps) => {\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: config.metricKey,\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  const { elementRef, isInViewport } = useIsInViewport();\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.barChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n      ref={elementRef}\n    >\n      {isInViewport ? (\n        <RunsMetricsBarPlot\n          runsData={slicedRuns}\n          metricKey={config.metricKey}\n          displayRunNames={false}\n          displayMetricKey={false}\n          useDefaultHoverBox={false}\n          margin={barChartCardDefaultMargin}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n          onSetDownloadHandler={setImageDownloadHandler}\n        />\n      ) : null}\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={config.metricKey}\n      subtitle={<ChartRunsCountIndicator runsOrGroups={slicedRuns} />}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        if (format === 'csv' || format === 'csv-full') {\n          const runsToExport = [...slicedRuns].reverse();\n          downloadChartDataCsv(runsToExport, [config.metricKey], [], config.metricKey);\n          return;\n        }\n        imageDownloadHandler?.(format, config.metricKey);\n      }}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  barChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { LegacySkeleton } from '@databricks/design-system';\nimport { ReactNode, useEffect, useMemo, useRef } from 'react';\nimport { RunsChartsRunData, RunsChartsLineChartXAxisType } from '../RunsCharts.common';\nimport { RunsMetricsLinePlot } from '../RunsMetricsLinePlot';\nimport { RunsChartsTooltipMode, useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport type { RunsChartsCardConfig, RunsChartsLineCardConfig } from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  ChartRunsCountIndicator,\n} from './ChartCard.common';\nimport { useSampledMetricHistory } from '../../hooks/useSampledMetricHistory';\nimport { compact, isEqual, pick, uniq } from 'lodash';\nimport { useIsInViewport } from '../../hooks/useIsInViewport';\nimport {\n  shouldEnableDeepLearningUIPhase3,\n  shouldUseNewRunRowsVisibilityModel,\n  shouldEnableRelativeTimeDateAxis,\n} from '../../../../../common/utils/FeatureUtils';\nimport { findAbsoluteTimestampRangeForRelativeRange } from '../../utils/findChartStepsByTimestamp';\nimport { Figure } from 'react-plotly.js';\nimport { ReduxState } from '../../../../../redux-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useCompareRunChartSelectedRange } from '../../hooks/useCompareRunChartSelectedRange';\nimport { MetricHistoryByName } from 'experiment-tracking/types';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { useGroupedChartRunData } from '../../../runs-compare/hooks/useGroupedChartRunData';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartMetricHistoryCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\n\nconst getV2ChartTitle = (cardConfig: RunsChartsLineCardConfig): string => {\n  if (!cardConfig.selectedMetricKeys || cardConfig.selectedMetricKeys.length === 0) {\n    return cardConfig.metricKey;\n  }\n\n  return cardConfig.selectedMetricKeys.join(' vs ');\n};\n\nexport interface RunsChartsLineChartCardProps extends RunsChartCardReorderProps {\n  config: RunsChartsLineCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  groupBy: RunsGroupByConfig | null;\n\n  onDelete: () => void;\n  onEdit: () => void;\n\n  fullScreen?: boolean;\n\n  autoRefreshEnabled?: boolean;\n\n  setFullScreenChart?: (chart: { config: RunsChartsCardConfig; title: string; subtitle: ReactNode }) => void;\n  onDownloadFullMetricHistoryCsv?: (runUuids: string[], metricKeys: string[]) => void;\n}\n\nexport const RunsChartsLineChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  onDownloadFullMetricHistoryCsv,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n  autoRefreshEnabled,\n}: RunsChartsLineChartCardProps) => {\n  const usingMultipleRunsHoverTooltip = shouldEnableDeepLearningUIPhase3();\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: getV2ChartTitle(config),\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const isGrouped = useMemo(() => slicedRuns.some((r) => r.groupParentInfo), [slicedRuns]);\n\n  const runUuidsToFetch = useMemo(() => {\n    if (isGrouped) {\n      // First, get all runs inside visible groups\n      const runsInGroups = compact(slicedRuns.map((r) => r.groupParentInfo)).flatMap((g) => g.runUuids);\n\n      // Finally, get \"remaining\" runs that are not grouped\n      const ungroupedRuns = compact(\n        slicedRuns.filter((r) => !r.groupParentInfo && !r.belongsToGroup).map((r) => r.runInfo?.runUuid),\n      );\n      return [...runsInGroups, ...ungroupedRuns];\n    }\n    // If grouping is disabled, just get all run UUIDs from runInfo\n    return compact(slicedRuns.map((r) => r.runInfo?.runUuid));\n  }, [slicedRuns, isGrouped]);\n\n  const metricKeys = useMemo(() => {\n    const fallback = [config.metricKey];\n\n    const yAxisKeys = config.selectedMetricKeys ?? fallback;\n    const xAxisKeys = !config.selectedXAxisMetricKey ? [] : [config.selectedXAxisMetricKey];\n\n    return yAxisKeys.concat(xAxisKeys);\n  }, [config.metricKey, config.selectedMetricKeys, config.selectedXAxisMetricKey]);\n\n  const { setTooltip, resetTooltip, destroyTooltip, selectedRunUuid } = useRunsChartsTooltip(\n    config,\n    usingMultipleRunsHoverTooltip ? RunsChartsTooltipMode.MultipleTracesWithScanline : RunsChartsTooltipMode.Simple,\n  );\n\n  const { elementRef, isInViewport } = useIsInViewport();\n\n  const { aggregateFunction } = groupBy || {};\n\n  const sampledMetricsByRunUuid = useSelector(\n    (state: ReduxState) => pick(state.entities.sampledMetricsByRunUuid, runUuidsToFetch),\n    shallowEqual,\n  );\n\n  const {\n    range: xRange,\n    setRange,\n    setOffsetTimestamp,\n    stepRange,\n  } = useCompareRunChartSelectedRange(\n    config.xAxisKey,\n    config.metricKey,\n    sampledMetricsByRunUuid,\n    runUuidsToFetch,\n    config.xAxisKey === RunsChartsLineChartXAxisType.STEP ? config.xAxisScaleType : 'linear',\n  );\n  // Memoizes last Y-axis range. Does't use stateful value, used only in the last immediate render dowstream.\n  const yRange = useRef<[number, number] | undefined>(undefined);\n\n  const { resultsByRunUuid, isLoading, isRefreshing } = useSampledMetricHistory({\n    runUuids: runUuidsToFetch,\n    metricKeys,\n    enabled: isInViewport,\n    maxResults: 320,\n    range: stepRange,\n    autoRefreshEnabled,\n  });\n\n  const chartLayoutUpdated = ({ layout }: Readonly<Figure>) => {\n    const { range: newYRange } = layout.yaxis || {};\n    const yRangeChanged = !isEqual(newYRange, yRange.current);\n\n    if (yRangeChanged) {\n      // When user zoomed in/out or changed the Y range manually, hide the tooltip\n      destroyTooltip();\n    }\n\n    // Save the last Y range value (copy the values since plotly works on mutable arrays)\n    yRange.current = [...(newYRange as [number, number])];\n\n    // Make sure that the x-axis is initialized\n    if (!layout.xaxis) {\n      return;\n    }\n    const { autorange, range: newXRange } = layout.xaxis;\n    if (autorange) {\n      // Remove saved range if chart is back to default viewport\n      setRange(undefined);\n      return;\n    }\n    if (isEqual(newXRange, xRange)) {\n      // If it's the same as previous, do nothing.\n      // Note: we're doing deep comparison here because the range has\n      // to be cloned due to plotly handling values in mutable way.\n      return;\n    }\n    // If the custom range is used, memoize it\n    if (!autorange && newXRange) {\n      const ungroupedRunUuids = compact(slicedRuns.map(({ runInfo }) => runInfo?.runUuid));\n      const groupedRunUuids = slicedRuns.flatMap(({ groupParentInfo }) => groupParentInfo?.runUuids ?? []);\n\n      if (!shouldEnableRelativeTimeDateAxis() && config.xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n        const timestampRange = findAbsoluteTimestampRangeForRelativeRange(\n          resultsByRunUuid,\n          [...ungroupedRunUuids, ...groupedRunUuids],\n          newXRange as [number, number],\n        );\n        setOffsetTimestamp([...(timestampRange as [number, number])]);\n      } else if (config.xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS) {\n        const timestampRange = findAbsoluteTimestampRangeForRelativeRange(\n          resultsByRunUuid,\n          [...ungroupedRunUuids, ...groupedRunUuids],\n          newXRange as [number, number],\n          1000 * 60 * 60, // Convert hours to milliseconds\n        );\n        setOffsetTimestamp([...(timestampRange as [number, number])]);\n      } else {\n        setOffsetTimestamp(undefined);\n      }\n      setRange([...(newXRange as [number, number])]);\n    }\n  };\n\n  useEffect(() => {\n    destroyTooltip();\n  }, [destroyTooltip, isLoading]);\n\n  const sampledData: RunsChartsRunData[] = useMemo(\n    () =>\n      slicedRuns.map((run) => {\n        const metricsHistory = metricKeys.reduce((acc: MetricHistoryByName, key) => {\n          const history = resultsByRunUuid[run.uuid]?.[key]?.metricsHistory;\n          if (history) {\n            acc[key] = history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...run,\n          metricsHistory,\n        };\n      }),\n    [metricKeys, resultsByRunUuid, slicedRuns],\n  );\n\n  const sampledGroupData = useGroupedChartRunData({\n    enabled: isGrouped,\n    ungroupedRunsData: sampledData,\n    metricKeys,\n    sampledDataResultsByRunUuid: resultsByRunUuid,\n    aggregateFunction,\n    selectedXAxisMetricKey:\n      config.xAxisKey === RunsChartsLineChartXAxisType.METRIC ? config.selectedXAxisMetricKey : undefined,\n  });\n\n  // Use grouped data traces only if enabled and if there are any groups\n  const chartData = isGrouped ? sampledGroupData : sampledData;\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.lineChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n      ref={elementRef}\n    >\n      {!isInViewport ? null : isLoading ? (\n        <LegacySkeleton />\n      ) : (\n        <RunsMetricsLinePlot\n          runsData={chartData}\n          metricKey={config.metricKey}\n          selectedMetricKeys={config.selectedMetricKeys}\n          scaleType={config.scaleType}\n          xAxisKey={config.xAxisKey}\n          xAxisScaleType={config.xAxisScaleType}\n          selectedXAxisMetricKey={config.selectedXAxisMetricKey}\n          lineSmoothness={config.lineSmoothness}\n          useDefaultHoverBox={false}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n          onUpdate={chartLayoutUpdated}\n          // X-axis is stateful since it's used for sampling recalculation. For Y-axis,\n          // the immediate value is sufficient. It will not kick off rerender, but in those\n          // cases the plotly will use last known range.\n          xRange={xRange}\n          yRange={yRange.current}\n          fullScreen={fullScreen}\n          displayPoints={config.displayPoints}\n          onSetDownloadHandler={setImageDownloadHandler}\n        />\n      )}\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={getV2ChartTitle(config)}\n      subtitle={<ChartRunsCountIndicator runsOrGroups={slicedRuns} />}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      supportedDownloadFormats={['png', 'svg', 'csv', 'csv-full']}\n      onClickDownload={(format) => {\n        const savedChartTitle = config.selectedMetricKeys?.join('-') ?? config.metricKey;\n        if (format === 'csv-full') {\n          const singleRunUuids = compact(chartData.map((d) => d.runInfo?.runUuid));\n          const runUuidsFromGroups = compact(\n            chartData\n              .filter(({ groupParentInfo }) => groupParentInfo)\n              .flatMap((group) => group.groupParentInfo?.runUuids),\n          );\n          const runUuids = [...singleRunUuids, ...runUuidsFromGroups];\n          onDownloadFullMetricHistoryCsv?.(runUuids, config.selectedMetricKeys || [config.metricKey]);\n          return;\n        }\n        if (format === 'csv') {\n          downloadChartMetricHistoryCsv(chartData, config.selectedMetricKeys || [config.metricKey], savedChartTitle);\n          return;\n        }\n        imageDownloadHandler?.(format, savedChartTitle);\n      }}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n      isRefreshing={isRefreshing}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  lineChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useMemo, useState } from 'react';\nimport { findChartStepsByTimestampForRuns } from '../utils/findChartStepsByTimestamp';\nimport { SampledMetricsByRunUuidState } from '../../../types';\nimport { isNumber, isString } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from '../components/RunsCharts.common';\n\n/**\n * Hook used in compare run charts. It's responsible for converting selected range\n * (which can be either step or timestamp) to step range, based on chart axis type.\n *\n * @param xAxisKey Can be 'step', 'time' or 'time-relative'\n * @param metricKey\n * @param sampledMetricsByRunUuid Recorded history for metrics for runs in compare chart\n * @param runUuids List of run UUIDs in compare chart\n */\nexport const useCompareRunChartSelectedRange = (\n  xAxisKey: RunsChartsLineChartXAxisType,\n  metricKey: string,\n  sampledMetricsByRunUuid: SampledMetricsByRunUuidState,\n  runUuids: string[],\n  scaleType: 'linear' | 'log' = 'linear',\n) => {\n  const [range, setRange] = useState<[number | string, number | string] | undefined>(undefined);\n  const [offsetTimestamp, setOffsetTimestamp] = useState<[number, number] | undefined>(undefined);\n  const stepRange = useMemo<[number, number] | undefined>(() => {\n    if (!range) {\n      return undefined;\n    }\n    if (xAxisKey === RunsChartsLineChartXAxisType.TIME && isString(range[0]) && isString(range[1])) {\n      // If we're dealing with absolute time-based chart axis, find corresponding steps based on timestamp\n      const bounds = findChartStepsByTimestampForRuns(\n        sampledMetricsByRunUuid,\n        runUuids,\n        metricKey,\n        range as [string, string],\n      );\n      return bounds;\n    }\n\n    if (\n      xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE &&\n      offsetTimestamp &&\n      isNumber(range[0]) &&\n      isNumber(range[1])\n    ) {\n      // If we're dealing with absolute time-based chart axis, find corresponding steps based on timestamp\n      const bounds = findChartStepsByTimestampForRuns(\n        sampledMetricsByRunUuid,\n        runUuids,\n        metricKey,\n        offsetTimestamp as [number, number],\n      );\n      return bounds;\n    }\n\n    if (xAxisKey === RunsChartsLineChartXAxisType.STEP && isNumber(range[0]) && isNumber(range[1])) {\n      // If we're dealing with step-based chart axis, use those steps but incremented/decremented\n      const lowerBound = Math.floor(scaleType === 'log' ? 10 ** range[0] : range[0]);\n      const upperBound = Math.ceil(scaleType === 'log' ? 10 ** range[1] : range[1]);\n      return lowerBound && upperBound ? [lowerBound - 1, upperBound + 1] : undefined;\n    }\n\n    // return undefined for xAxisKey === 'metric' because there isn't\n    // necessarily a mapping between value range and step range\n    return undefined;\n  }, [xAxisKey, metricKey, range, sampledMetricsByRunUuid, runUuids, offsetTimestamp, scaleType]);\n\n  return {\n    /**\n     * Sets actually selected range in chart (can be timestamp, seconds range or step range)\n     */\n    setRange,\n    /**\n     * If there's an offset timestamp calculated from relative runs, set it using this function\n     */\n    setOffsetTimestamp,\n    /**\n     * Resulting step range\n     */\n    stepRange,\n    /**\n     * Actual raw range to be passed down to the chart component\n     */\n    range,\n  };\n};\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsScatterCardConfig } from '../../runs-charts.types';\nimport {\n  ChartRunsCountIndicator,\n  RunsChartCardFullScreenProps,\n  RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n} from './ChartCard.common';\nimport { RunsScatterPlot } from '../RunsScatterPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { useIsInViewport } from '../../hooks/useIsInViewport';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\n\nexport interface RunsChartsScatterChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsScatterCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsChartsScatterChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsScatterChartCardProps) => {\n  const title = `${config.xaxis.key} vs. ${config.yaxis.key}`;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title,\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  const { elementRef, isInViewport } = useIsInViewport();\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.scatterChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n      ref={elementRef}\n    >\n      {isInViewport ? (\n        <RunsScatterPlot\n          runsData={slicedRuns}\n          xAxis={config.xaxis}\n          yAxis={config.yaxis}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          useDefaultHoverBox={false}\n          selectedRunUuid={selectedRunUuid}\n          onSetDownloadHandler={setImageDownloadHandler}\n        />\n      ) : null}\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={title}\n      subtitle={<ChartRunsCountIndicator runsOrGroups={slicedRuns} />}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [config.xaxis.key, config.yaxis.key].join('-');\n        if (format === 'csv' || format === 'csv-full') {\n          const paramsToExport = [];\n          const metricsToExport = [];\n          for (const axis of ['xaxis' as const, 'yaxis' as const]) {\n            if (config[axis].type === 'PARAM') {\n              paramsToExport.push(config[axis].key);\n            } else {\n              metricsToExport.push(config[axis].key);\n            }\n          }\n          downloadChartDataCsv(slicedRuns, metricsToExport, paramsToExport, savedChartTitle);\n          return;\n        }\n        imageDownloadHandler?.(format, savedChartTitle);\n      }}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  scatterChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsContourCardConfig } from '../../runs-charts.types';\nimport {\n  ChartRunsCountIndicator,\n  RunsChartCardFullScreenProps,\n  RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n} from './ChartCard.common';\nimport { RunsContourPlot } from '../RunsContourPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\n\nexport interface RunsChartsContourChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsContourCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsChartsContourChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsContourChartCardProps) => {\n  const title = `${config.xaxis.key} vs. ${config.yaxis.key} vs. ${config.zaxis.key}`;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title,\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.contourChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n    >\n      <RunsContourPlot\n        runsData={slicedRuns}\n        xAxis={config.xaxis}\n        yAxis={config.yaxis}\n        zAxis={config.zaxis}\n        useDefaultHoverBox={false}\n        onHover={setTooltip}\n        onUnhover={resetTooltip}\n        selectedRunUuid={selectedRunUuid}\n        onSetDownloadHandler={setImageDownloadHandler}\n      />\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={title}\n      subtitle={<ChartRunsCountIndicator runsOrGroups={slicedRuns} />}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [config.xaxis.key, config.yaxis.key, config.zaxis.key].join('-');\n        if (format === 'csv' || format === 'csv-full') {\n          const paramsToExport = [];\n          const metricsToExport = [];\n          for (const axis of ['xaxis' as const, 'yaxis' as const, 'zaxis' as const]) {\n            if (config[axis].type === 'PARAM') {\n              paramsToExport.push(config[axis].key);\n            } else {\n              metricsToExport.push(config[axis].key);\n            }\n          }\n          downloadChartDataCsv(slicedRuns, metricsToExport, paramsToExport, savedChartTitle);\n          return;\n        }\n        imageDownloadHandler?.(format, savedChartTitle);\n      }}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  contourChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","var _path, _path2, _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgParallelChartPlaceholder(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 80,\n    height: 42,\n    viewBox: \"0 0 80 42\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 2.34094L39.4998 17.0908L76.3746 7.87216\",\n    stroke: \"#CF797B\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.95459 20.443L40.1702 25.1361L77.045 21.1134M1.95459 36.5338L40.1702 35.1929L77.045 25.1361\",\n    stroke: \"#A88E6F\",\n    strokeLinecap: \"round\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.8\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 1V40.3341\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.6189 2.07251V39.9763\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.7156 2.07251V39.9763\",\n    stroke: \"url(#paint0_linear_2781_406689)\",\n    strokeWidth: 4,\n    strokeLinecap: \"square\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_2781_406689\",\n    x1: 78.2156,\n    y1: 2.07251,\n    x2: 78.2156,\n    y2: 39.9763,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#D04F5E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4D9734\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgParallelChartPlaceholder);\nexport default __webpack_public_path__ + \"static/media/parallel-chart-placeholder.234ef0c5b220ef2a5a6fa5bafff173f7.svg\";\nexport { ForwardRef as ReactComponent };","import { Button, DropdownMenu, Typography } from '@databricks/design-system';\nimport { useCallback, useMemo } from 'react';\nimport { ReactComponent as ParallelChartSvg } from '../../../../../common/static/parallel-chart-placeholder.svg';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport LazyParallelCoordinatesPlot, { processParallelCoordinateData } from '../charts/LazyParallelCoordinatesPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport type { RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n} from './ChartCard.common';\nimport { useIsInViewport } from '../../hooks/useIsInViewport';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { FormattedMessage } from 'react-intl';\nimport { useUpdateExperimentViewUIState } from '../../../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport interface RunsChartsParallelChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsParallelCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\n/**\n * A placeholder component displayed before parallel coords chart is being configured by user\n */\nconst EmptyParallelCoordsPlaceholder = ({ onEdit }: { onEdit: () => void }) => {\n  return (\n    <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n        <ParallelChartSvg />\n        <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n          Compare parameter importance\n        </Typography.Title>\n        <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n          Use the parallel coordinates chart to compare how various parameters in model affect your model metrics.\n        </Typography.Text>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_cards_runscompareparallelchartcard.tsx_51\"\n          type=\"primary\"\n          onClick={onEdit}\n        >\n          Configure chart\n        </Button>\n      </div>\n    </div>\n  );\n};\n\n/**\n * A placeholder component displayed before parallel coords chart is being configured by user\n */\nconst UnsupportedDataPlaceholder = () => (\n  <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n      <ParallelChartSvg />\n      <Typography.Title css={{ marginTop: 16, textAlign: 'center' }} color=\"secondary\" level={3}>\n        <FormattedMessage\n          defaultMessage=\"Parallel coordinates chart does not support aggregated string values.\"\n          description=\"Experiment page > compare runs > parallel coordinates chart > unsupported string values warning > title\"\n        />\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Use other parameters or disable run grouping to continue.\"\n          description=\"Experiment page > compare runs > parallel coordinates chart > unsupported string values warning > description\"\n        />\n      </Typography.Text>\n    </div>\n  </div>\n);\n\nexport const RunsChartsParallelChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsParallelChartCardProps) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: 'Parallel Coordinates',\n      subtitle: displaySubtitle ? subtitle : null,\n    });\n  };\n\n  const configuredChartRunData = useMemo(() => {\n    if (!shouldUseNewRunRowsVisibilityModel() || config?.showAllRuns) {\n      return chartRunData;\n    }\n    return chartRunData?.filter(({ hidden }) => !hidden);\n  }, [chartRunData, config?.showAllRuns]);\n\n  const containsStringValues = useMemo(\n    () =>\n      config.selectedParams?.some(\n        (paramKey) => configuredChartRunData?.some((dataTrace) => isNaN(Number(dataTrace.params[paramKey]?.value))),\n        [config.selectedParams, configuredChartRunData],\n      ),\n    [config.selectedParams, configuredChartRunData],\n  );\n\n  const updateVisibleOnlySetting = useCallback(\n    (showAllRuns: boolean) => {\n      updateUIState((state) => {\n        const newCompareRunCharts = state.compareRunCharts?.map((existingChartConfig) => {\n          if (existingChartConfig.uuid === config.uuid) {\n            const parallelChartConfig = existingChartConfig as RunsChartsParallelCardConfig;\n            return { ...parallelChartConfig, showAllRuns };\n          }\n          return existingChartConfig;\n        });\n\n        return { ...state, compareRunCharts: newCompareRunCharts };\n      });\n    },\n    [config.uuid, updateUIState],\n  );\n\n  const [isConfigured, parallelCoordsData] = useMemo(() => {\n    const selectedParamsCount = config.selectedParams?.length || 0;\n    const selectedMetricsCount = config.selectedMetrics?.length || 0;\n\n    const configured = selectedParamsCount + selectedMetricsCount >= 2;\n\n    // Prepare the data in the parcoord-es format\n    const data = configured\n      ? processParallelCoordinateData(configuredChartRunData, config.selectedParams, config.selectedMetrics)\n      : [];\n\n    return [configured, data];\n  }, [config, configuredChartRunData]);\n\n  const { elementRef, isInViewport } = useIsInViewport();\n\n  const { setTooltip, resetTooltip, selectedRunUuid, closeContextMenu } = useRunsChartsTooltip(config);\n\n  const containsUnsupportedValues = containsStringValues && groupBy;\n  const displaySubtitle = isConfigured && !containsUnsupportedValues;\n\n  const subtitle = shouldUseNewRunRowsVisibilityModel() ? (\n    <>\n      {config.showAllRuns ? (\n        <FormattedMessage\n          defaultMessage=\"Showing all runs\"\n          description=\"Experiment page > compare runs > parallel chart > header > indicator for all runs shown\"\n        />\n      ) : (\n        <FormattedMessage\n          defaultMessage=\"Showing only visible runs\"\n          description=\"Experiment page > compare runs > parallel chart > header > indicator for only visible runs shown\"\n        />\n      )}\n    </>\n  ) : (\n    <>Comparing {parallelCoordsData.length} runs</>\n  );\n\n  const chartBody = (\n    <>\n      {!isConfigured ? (\n        <EmptyParallelCoordsPlaceholder onEdit={onEdit} />\n      ) : containsUnsupportedValues ? (\n        <UnsupportedDataPlaceholder />\n      ) : parallelCoordsData.length ? (\n        // Avoid displaying empty set, otherwise parcoord-es goes crazy\n        <div\n          css={[\n            styles.parallelChartCardWrapper,\n            {\n              height: fullScreen ? '100%' : undefined,\n            },\n          ]}\n          ref={elementRef}\n        >\n          {isInViewport ? (\n            <LazyParallelCoordinatesPlot\n              data={parallelCoordsData}\n              selectedParams={config.selectedParams}\n              selectedMetrics={config.selectedMetrics}\n              onHover={setTooltip}\n              onUnhover={resetTooltip}\n              axesRotateThreshold={8}\n              selectedRunUuid={selectedRunUuid}\n              closeContextMenu={closeContextMenu}\n            />\n          ) : null}\n        </div>\n      ) : null}\n    </>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title=\"Parallel Coordinates\"\n      subtitle={displaySubtitle ? subtitle : null}\n      uuid={config.uuid}\n      tooltip=\"The Parallel Coordinates Chart now only shows runs with columns that are either numbers or strings. If a column has string entries, the runs corresponding to the 30 most recent unique values will be shown.\"\n      dragGroupKey={RunsChartsChartsDragGroup.PARALLEL_CHARTS_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={isConfigured && !containsUnsupportedValues ? toggleFullScreenChart : undefined}\n      additionalMenuContent={\n        shouldUseNewRunRowsVisibilityModel() ? (\n          <>\n            <DropdownMenu.Separator />\n            <DropdownMenu.CheckboxItem checked={!config.showAllRuns} onClick={() => updateVisibleOnlySetting(false)}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Show only visible\"\n                description=\"Experiment page > compare runs tab > chart header > move down option\"\n              />\n            </DropdownMenu.CheckboxItem>\n            <DropdownMenu.CheckboxItem checked={config.showAllRuns} onClick={() => updateVisibleOnlySetting(true)}>\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage\n                defaultMessage=\"Show all runs\"\n                description=\"Experiment page > compare runs tab > chart header > move down option\"\n              />\n            </DropdownMenu.CheckboxItem>\n          </>\n        ) : null\n      }\n      supportedDownloadFormats={['csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [...config.selectedMetrics, ...config.selectedParams].join('-');\n\n        if (format === 'csv') {\n          downloadChartDataCsv(configuredChartRunData, config.selectedMetrics, config.selectedParams, savedChartTitle);\n        }\n      }}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  parallelChartCardWrapper: {\n    // Set \"display: flex\" here (and \"flex: 1\" in the child element)\n    // so the chart will grow in width and height\n    display: 'flex',\n    overflow: 'hidden',\n    cursor: 'pointer',\n  },\n};\n","import { useCallback, useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  DISABLED_GROUP_WHEN_GROUPBY,\n  DifferenceCardConfigCompareGroup,\n  type RunsChartsCardConfig,\n  type RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n  ChartRunsCountIndicator,\n} from './ChartCard.common';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { DifferenceViewPlot } from '../charts/DifferenceViewPlot';\nimport { useConfirmChartCardConfigurationFn } from '../../hooks/useRunsChartsUIConfiguration';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport interface RunsChartsDifferenceChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsDifferenceCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\nexport const RunsChartsDifferenceChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsDifferenceChartCardProps) => {\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: config.chartName,\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const setCardConfig = (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => {\n    confirmChartCardConfiguration(setter(config));\n  };\n\n  const showChangeFromBaselineToggle = useCallback(() => {\n    confirmChartCardConfiguration({\n      ...config,\n      showChangeFromBaseline: !config.showChangeFromBaseline,\n    } as RunsChartsCardConfig);\n  }, [config, confirmChartCardConfiguration]);\n\n  const showDifferencesOnlyToggle = useCallback(() => {\n    confirmChartCardConfiguration({\n      ...config,\n      showDifferencesOnly: !config.showDifferencesOnly,\n    } as RunsChartsCardConfig);\n  }, [config, confirmChartCardConfiguration]);\n\n  const { formatMessage } = useIntl();\n\n  const chartBody = (\n    <div\n      css={{\n        display: 'flex',\n        overflow: 'auto hidden',\n        cursor: 'pointer',\n        height: fullScreen ? '100%' : undefined,\n        width: '100%',\n      }}\n    >\n      <div css={{ width: '100%' }}>\n        <DifferenceViewPlot\n          previewData={slicedRuns}\n          groupBy={groupBy}\n          cardConfig={config}\n          setCardConfig={setCardConfig}\n        />\n      </div>\n    </div>\n  );\n\n  let showTooltip = undefined;\n  if (groupBy && DISABLED_GROUP_WHEN_GROUPBY.some((group) => config.compareGroups.includes(group))) {\n    showTooltip = formatMessage({\n      defaultMessage: 'Disable grouped runs to compare parameters, tag, or attributes',\n      description:\n        'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > disable group runs tooltip message',\n    });\n  }\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={config.chartName}\n      subtitle={<ChartRunsCountIndicator runsOrGroups={slicedRuns} />}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n      toggles={[\n        {\n          toggleLabel: formatMessage({\n            defaultMessage: 'Show change from baseline',\n            description:\n              'Runs charts > components > cards > RunsChartsDifferenceChartCard > Show change from baseline toggle label',\n          }),\n          currentToggle: config.showChangeFromBaseline,\n          setToggle: showChangeFromBaselineToggle,\n        },\n        {\n          toggleLabel: formatMessage({\n            defaultMessage: 'Show differences only',\n            description:\n              'Runs charts > components > cards > RunsChartsDifferenceChartCard > Show differences only toggle label',\n          }),\n          currentToggle: config.showDifferencesOnly,\n          setToggle: showDifferencesOnlyToggle,\n        },\n      ]}\n      tooltip={showTooltip}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n  ChartRunsCountIndicator,\n} from './ChartCard.common';\nimport { shouldUseNewRunRowsVisibilityModel } from '../../../../../common/utils/FeatureUtils';\nimport { DifferenceViewPlot } from '../charts/DifferenceViewPlot';\nimport { useConfirmChartCardConfigurationFn } from '../../hooks/useRunsChartsUIConfiguration';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { ImageGridPlot } from '../charts/ImageGridPlot';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useImageSliderStepMarks } from '../../hooks/useImageSliderStepMarks';\nimport {\n  DEFAULT_IMAGE_GRID_CHART_NAME,\n  LOG_IMAGE_TAG_INDICATOR,\n  NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE,\n} from 'experiment-tracking/constants';\nimport { LineSmoothSlider } from 'experiment-tracking/components/LineSmoothSlider';\nimport { RunsGroupByConfig } from 'experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\n\nexport interface RunsChartsImageChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsImageCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\nexport const RunsChartsImageChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onReorderWith,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n}: RunsChartsImageChartCardProps) => {\n  const { theme } = useDesignSystemTheme();\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      setContainerWidth(entries[0].contentRect.width);\n    });\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [containerRef]);\n\n  // Optimizations for smoother slider experience. Maintain a local copy of config, and update\n  // the global state only after the user has finished dragging the slider.\n  const [tmpConfig, setTmpConfig] = useState(config);\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n  const updateStep = useCallback(\n    (step: number) => {\n      confirmChartCardConfiguration({ ...config, step } as RunsChartsImageCardConfig);\n    },\n    [config, confirmChartCardConfiguration],\n  );\n  const tmpStepChange = (step: number) => {\n    setTmpConfig((conf) => ({ ...conf, step }));\n  };\n\n  const chartName = config.imageKeys.length === 1 ? config.imageKeys[0] : DEFAULT_IMAGE_GRID_CHART_NAME;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: chartName,\n      subtitle: <ChartRunsCountIndicator runsOrGroups={chartRunData} />,\n    });\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, config.runsCountToCompare || 10).reverse();\n  }, [chartRunData, config]);\n\n  const setCardConfig = (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => {\n    confirmChartCardConfiguration(setter(config));\n  };\n\n  const { stepMarks, maxMark, minMark } = useImageSliderStepMarks({\n    data: slicedRuns,\n    selectedImageKeys: config.imageKeys || [],\n  });\n\n  const stepMarkLength = Object.keys(stepMarks).length;\n\n  useEffect(() => {\n    // If there is only one step mark, set the step to the min mark\n    if (stepMarkLength === 1 && tmpConfig.step !== minMark) {\n      updateStep(minMark);\n    }\n  }, [minMark, stepMarkLength, tmpConfig.step, updateStep]);\n\n  const shouldDisplayImageLimitIndicator =\n    slicedRuns.filter((run) => {\n      return run.tags[LOG_IMAGE_TAG_INDICATOR];\n    }).length > NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE;\n\n  const chartBody = (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: fullScreen ? '100%' : undefined,\n        width: '100%',\n        overflow: 'auto',\n      }}\n    >\n      <div\n        ref={containerRef}\n        css={{\n          cursor: 'pointer',\n          height: `calc(100% - ${theme.spacing.md * 2}px)`,\n          overflow: 'auto',\n        }}\n      >\n        <ImageGridPlot\n          previewData={slicedRuns}\n          groupBy={groupBy}\n          cardConfig={tmpConfig}\n          setCardConfig={setCardConfig}\n          containerWidth={containerWidth}\n        />\n      </div>\n      <div\n        css={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          display: 'inline-flex',\n          gap: theme.spacing.md,\n        }}\n      >\n        <div css={{ width: '350px' }}>\n          <LineSmoothSlider\n            defaultValue={tmpConfig.step}\n            onChange={tmpStepChange}\n            max={maxMark}\n            min={minMark}\n            marks={stepMarks}\n            step={null}\n            disabled={Object.keys(stepMarks).length <= 1}\n            onAfterChange={updateStep}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={chartName}\n      subtitle={\n        shouldDisplayImageLimitIndicator && `Displaying images from first ${NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE} runs`\n      }\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      onReorderWith={onReorderWith}\n      canMoveDown={canMoveDown}\n      canMoveUp={canMoveUp}\n      onMoveDown={onMoveDown}\n      onMoveUp={onMoveUp}\n      toggleFullScreenChart={toggleFullScreenChart}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n","import { useMemo } from 'react';\nimport { RunsChartType } from '../../runs-charts.types';\nimport type {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsDifferenceCardConfig,\n  RunsChartsImageCardConfig,\n  RunsChartsLineCardConfig,\n  RunsChartsParallelCardConfig,\n  RunsChartsScatterCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  shouldEnableDifferenceViewCharts,\n  shouldEnableImageGridCharts,\n  shouldUseNewRunRowsVisibilityModel,\n} from '../../../../../common/utils/FeatureUtils';\nimport { RunsChartsBarChartCard } from './RunsChartsBarChartCard';\nimport { RunsChartsLineChartCard } from './RunsChartsLineChartCard';\nimport { RunsChartsScatterChartCard } from './RunsChartsScatterChartCard';\nimport { RunsChartsContourChartCard } from './RunsChartsContourChartCard';\nimport { RunsChartsParallelChartCard } from './RunsChartsParallelChartCard';\nimport { RunsChartCardFullScreenProps, RunsChartCardReorderProps } from './ChartCard.common';\nimport { RunsChartsDifferenceChartCard } from './RunsChartsDifferenceChartCard';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsImageChartCard } from './RunsChartsImageChartCard';\n\nexport interface RunsChartsCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  cardConfig: RunsChartsCardConfig;\n  chartRunData: RunsChartsRunData[];\n  onStartEditChart: (chart: RunsChartsCardConfig) => void;\n  onRemoveChart: (chart: RunsChartsCardConfig) => void;\n  onReorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  onDownloadFullMetricHistoryCsv?: (runUuids: string[], metricKeys: string[]) => void;\n  index: number;\n  sectionIndex: number;\n  autoRefreshEnabled?: boolean;\n  groupBy: RunsGroupByConfig | null;\n}\n\nexport const RunsChartsCard = ({\n  cardConfig,\n  chartRunData,\n  index,\n  sectionIndex,\n  onStartEditChart,\n  onRemoveChart,\n  setFullScreenChart,\n  groupBy,\n  fullScreen,\n  canMoveDown,\n  canMoveUp,\n  onMoveDown,\n  onMoveUp,\n  onReorderWith,\n  autoRefreshEnabled,\n  onDownloadFullMetricHistoryCsv,\n}: RunsChartsCardProps) => {\n  const chartElementKey = `${cardConfig.uuid}-${index}-${sectionIndex}`;\n\n  const reorderProps = {\n    onReorderWith,\n    canMoveDown,\n    canMoveUp,\n    onMoveDown,\n    onMoveUp,\n  };\n\n  const editProps = {\n    onEdit: () => onStartEditChart(cardConfig),\n    onDelete: () => onRemoveChart(cardConfig),\n    setFullScreenChart,\n  };\n\n  const commonChartProps = {\n    fullScreen,\n    key: chartElementKey,\n    autoRefreshEnabled,\n    groupBy,\n    ...editProps,\n    ...reorderProps,\n  };\n\n  const slicedRuns = useMemo(() => {\n    if (shouldUseNewRunRowsVisibilityModel()) {\n      return chartRunData.filter(({ hidden }) => !hidden).reverse();\n    }\n    return chartRunData.slice(0, cardConfig.runsCountToCompare || 10).reverse();\n  }, [chartRunData, cardConfig]);\n\n  if (cardConfig.type === RunsChartType.PARALLEL) {\n    return (\n      <RunsChartsParallelChartCard\n        config={cardConfig as RunsChartsParallelCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (shouldEnableDifferenceViewCharts() && cardConfig.type === RunsChartType.DIFFERENCE) {\n    return (\n      <RunsChartsDifferenceChartCard\n        config={cardConfig as RunsChartsDifferenceCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (shouldEnableImageGridCharts() && cardConfig.type === RunsChartType.IMAGE) {\n    return (\n      <RunsChartsImageChartCard\n        config={cardConfig as RunsChartsImageCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (cardConfig.type === RunsChartType.BAR) {\n    return (\n      <RunsChartsBarChartCard\n        config={cardConfig as RunsChartsBarCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.LINE) {\n    return (\n      <RunsChartsLineChartCard\n        config={cardConfig as RunsChartsLineCardConfig}\n        chartRunData={slicedRuns}\n        onDownloadFullMetricHistoryCsv={onDownloadFullMetricHistoryCsv}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.SCATTER) {\n    return (\n      <RunsChartsScatterChartCard\n        config={cardConfig as RunsChartsScatterCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.CONTOUR) {\n    return (\n      <RunsChartsContourChartCard\n        config={cardConfig as RunsChartsContourCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  }\n  return null;\n};\n","import { MLFLOW_SYSTEM_METRIC_PREFIX } from 'experiment-tracking/constants';\nimport { KeyValueEntity, MetricEntitiesByName } from 'experiment-tracking/types';\nimport { useCallback, useMemo } from 'react';\nimport { RunsChartsRunData } from '../components/RunsCharts.common';\nimport { DifferenceCardAttributes, RunsChartsDifferenceCardConfig } from '../runs-charts.types';\nimport Utils from 'common/utils/Utils';\nimport { Run } from 'experiment-tracking/sdk/MlflowMessages';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\n\nconst DEFAULT_EMPTY_VALUE = '-';\nconst DIFFERENCE_EPSILON = 1e-6;\nexport const getFixedPointValue = (val: string | number, places = 2) =>\n  typeof val === 'number' ? val.toFixed(places) : val;\n\nexport const differenceView = (a: string | number, b: string | number) => {\n  if (typeof a === 'string' || typeof b === 'string') {\n    return undefined;\n  } else {\n    const diff = a - b;\n    if (diff >= 0) {\n      return `+${getFixedPointValue(diff)}`;\n    } else {\n      return getFixedPointValue(diff).toString();\n    }\n  }\n};\n\nexport const isDifferent = (a: string | number, b: string | number) => {\n  if (a === DEFAULT_EMPTY_VALUE || b === DEFAULT_EMPTY_VALUE) {\n    return false;\n  }\n  // Check if type a and b are the same\n  if (typeof a !== typeof b) {\n    return true;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return Math.abs(a - b) > DIFFERENCE_EPSILON;\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a !== b;\n  }\n  return false;\n};\n\nexport const getDifferenceViewDataGroups = (\n  previewData: RunsChartsRunData[],\n  cardConfig: RunsChartsDifferenceCardConfig,\n  headingColumnId: string,\n  groupBy: RunsGroupByConfig | null,\n) => {\n  const getMetrics = (\n    filterCondition: (metric: string) => boolean,\n    runDataKeys: (data: RunsChartsRunData) => string[],\n    runDataAttribute: (\n      data: RunsChartsRunData,\n    ) =>\n      | MetricEntitiesByName\n      | Record<string, KeyValueEntity>\n      | Record<string, { key: string; value: string | number }>,\n  ) => {\n    // Get array of sorted keys\n    const keys = Array.from(new Set(previewData.flatMap((runData) => runDataKeys(runData))))\n      .filter((key) => filterCondition(key))\n      .sort();\n    const values = keys.flatMap((key: string) => {\n      const data: Record<string, string | number> = {};\n      let hasDifference = false;\n\n      previewData.forEach((runData, index) => {\n        // Set the key as runData.uuid and the value as the metric's value or DEFAULT_EMPTY_VALUE\n        data[runData.uuid] = runDataAttribute(runData)[key]\n          ? runDataAttribute(runData)[key].value\n          : DEFAULT_EMPTY_VALUE;\n        if (index > 0) {\n          const prev = previewData[index - 1];\n          if (isDifferent(data[prev.uuid], data[runData.uuid])) {\n            hasDifference = true;\n          }\n        }\n      });\n      if (cardConfig.showDifferencesOnly && !hasDifference) {\n        return [];\n      }\n      return [\n        {\n          [headingColumnId]: key,\n          ...data,\n        },\n      ];\n    });\n    return values;\n  };\n\n  const modelMetrics = getMetrics(\n    (metric: string) => !metric.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX),\n    (runData: RunsChartsRunData) => Object.keys(runData.metrics),\n    (runData: RunsChartsRunData) => runData.metrics,\n  );\n\n  const systemMetrics = getMetrics(\n    (metric: string) => metric.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX),\n    (runData: RunsChartsRunData) => Object.keys(runData.metrics),\n    (runData: RunsChartsRunData) => runData.metrics,\n  );\n\n  if (groupBy) {\n    return { modelMetrics, systemMetrics, parameters: [], tags: [], attributes: [] };\n  }\n\n  const parameters = getMetrics(\n    () => true,\n    (runData: RunsChartsRunData) => Object.keys(runData.params),\n    (runData: RunsChartsRunData) => runData.params,\n  );\n\n  const tags = getMetrics(\n    () => true,\n    (runData: RunsChartsRunData) => Utils.getVisibleTagValues(runData.tags).map(([key]) => key),\n    (runData: RunsChartsRunData) => runData.tags,\n  );\n\n  // Get attributes\n  const attributeGroups = [\n    DifferenceCardAttributes.USER,\n    DifferenceCardAttributes.SOURCE,\n    DifferenceCardAttributes.VERSION,\n    DifferenceCardAttributes.MODELS,\n  ];\n  const attributes = attributeGroups.flatMap((attribute) => {\n    const attributeData: Record<string, string | number> = {};\n    let hasDifference = false;\n    previewData.forEach((runData, index) => {\n      if (attribute === DifferenceCardAttributes.USER) {\n        const user = Utils.getUser(runData.runInfo, runData.tags);\n        attributeData[runData.uuid] = user;\n      } else if (attribute === DifferenceCardAttributes.SOURCE) {\n        const source = Utils.getSourceName(runData.tags);\n        attributeData[runData.uuid] = source;\n      } else if (attribute === DifferenceCardAttributes.VERSION) {\n        const version = Utils.getSourceVersion(runData.tags);\n        attributeData[runData.uuid] = version;\n      } else {\n        const models = Utils.getLoggedModelsFromTags(runData.tags);\n        attributeData[runData.uuid] = models.join(',');\n      }\n      if (index > 0) {\n        const prev = previewData[index - 1];\n        if (isDifferent(attributeData[prev.uuid], attributeData[runData.uuid])) {\n          hasDifference = true;\n        }\n      }\n    });\n    if (cardConfig.showDifferencesOnly && !hasDifference) {\n      return [];\n    }\n    return [\n      {\n        [headingColumnId]: attribute,\n        ...attributeData,\n      },\n    ];\n  });\n  return { modelMetrics, systemMetrics, parameters, tags, attributes };\n};\n","import { ExperimentRunsSelectorResult } from 'experiment-tracking/components/experiment-page/utils/experimentRuns.selector';\nimport {\n  DifferenceCardAttributes,\n  DifferenceCardConfigCompareGroup,\n  RunsChartsCardConfig,\n  RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { ReactChild, ReactFragment, ReactPortal, useCallback, useMemo, useState } from 'react';\nimport { MLFLOW_SYSTEM_METRIC_PREFIX } from 'experiment-tracking/constants';\nimport { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport {\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  useDesignSystemTheme,\n  Typography,\n  Tag,\n  Tooltip,\n} from '@databricks/design-system';\nimport { RunColorPill } from 'experiment-tracking/components/experiment-page/components/RunColorPill';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { MetricEntitiesByName } from 'experiment-tracking/types';\nimport { differenceView, getDifferenceViewDataGroups, getFixedPointValue } from '../../utils/differenceView';\nimport { OverflowIcon, Button, DropdownMenu } from '@databricks/design-system';\nimport Utils from 'common/utils/Utils';\nimport { TableSkeletonRows } from '@databricks/design-system';\nimport { ArrowUpIcon } from '@databricks/design-system';\nimport { ArrowDownIcon } from '@databricks/design-system';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nconst HEADING_COLUMN_ID = 'headingColumn';\nconst COLUMN_WIDTH = 200;\n\nexport const DifferenceViewPlot = ({\n  previewData,\n  cardConfig,\n  groupBy,\n  setCardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsDifferenceCardConfig;\n  groupBy: RunsGroupByConfig | null;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const { modelMetrics, systemMetrics, parameters, tags, attributes } = useMemo(\n    () => getDifferenceViewDataGroups(previewData, cardConfig, HEADING_COLUMN_ID, groupBy),\n    [previewData, cardConfig, groupBy],\n  );\n  // Each metric/param is a row in the table\n  const getData = [\n    ...(cardConfig.compareGroups.includes(DifferenceCardConfigCompareGroup.MODEL_METRICS) ? modelMetrics : []),\n    ...(cardConfig.compareGroups.includes(DifferenceCardConfigCompareGroup.SYSTEM_METRICS) ? systemMetrics : []),\n    ...(cardConfig.compareGroups.includes(DifferenceCardConfigCompareGroup.PARAMETERS) ? parameters : []),\n    ...(cardConfig.compareGroups.includes(DifferenceCardConfigCompareGroup.ATTRIBUTES) ? attributes : []),\n    ...(cardConfig.compareGroups.includes(DifferenceCardConfigCompareGroup.TAGS) ? tags : []),\n  ];\n\n  const { baselineColumn, nonBaselineColumns } = useMemo(() => {\n    // baseline column (can be undefined if no baseline selected)\n    let baselineColumn = previewData.find((runData) => runData.uuid === cardConfig.baselineColumnUuid);\n    if (baselineColumn === undefined && previewData.length > 0) {\n      // Set the first column as baseline column\n      baselineColumn = previewData[0];\n    }\n    // non-baseline columns\n    const nonBaselineColumns = previewData.filter(\n      (runData) => baselineColumn === undefined || runData.uuid !== baselineColumn.uuid,\n    );\n\n    return { baselineColumn, nonBaselineColumns };\n  }, [previewData, cardConfig.baselineColumnUuid]);\n\n  // Split columns into baseline/non-baseline\n  const getColumns = useMemo(() => {\n    const convertRunToColumnInfo = (runData: RunsChartsRunData, isBaseline: boolean) => {\n      const accessorFn = (row: Record<string, string | number>) => {\n        return {\n          text: row[runData.uuid],\n          difference: baselineColumn ? differenceView(row[runData.uuid], row[baselineColumn.uuid]) : null,\n        };\n      };\n\n      const baselineAccessorFn = (row: Record<string, string | number>) => {\n        return row[runData.uuid];\n      };\n      if (isBaseline) {\n        return {\n          id: runData.uuid,\n          header: () => {\n            return (\n              <span css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n                <span css={{ display: 'inline-flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n                  <RunColorPill color={runData.color} />\n                  {runData.displayName}\n                  <Tag css={{ margin: 0 }}>\n                    <FormattedMessage\n                      defaultMessage=\"baseline\"\n                      description=\"Runs charts > components > charts > DifferenceViewPlot > baseline tag\"\n                    />\n                  </Tag>\n                </span>\n              </span>\n            );\n          },\n          size: COLUMN_WIDTH,\n          accessorFn: baselineAccessorFn,\n          cell: (row: any) => <span>{getFixedPointValue(row.getValue())}</span>,\n        };\n      }\n      return {\n        id: runData.uuid,\n        header: () => {\n          return (\n            <span css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n              <span css={{ display: 'inline-flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n                <RunColorPill color={runData.color} />\n                {runData.displayName}\n              </span>\n            </span>\n          );\n        },\n        size: COLUMN_WIDTH,\n        accessorFn: accessorFn,\n        cell: (row: any) => (\n          <span css={{ display: 'inline-flex', gap: theme.spacing.md, verticalAlign: 'middle' }}>\n            <Typography.Text>{getFixedPointValue(row.getValue().text)}</Typography.Text>\n            {baselineColumn &&\n              cardConfig.showChangeFromBaseline &&\n              row.getValue().difference &&\n              (row.getValue().difference[0] === '-' ? (\n                <div css={{ display: 'inline-flex', gap: theme.spacing.xs }}>\n                  <Typography.Paragraph color=\"error\">{row.getValue().difference}</Typography.Paragraph>\n                  <ArrowDownIcon color=\"danger\" />\n                </div>\n              ) : (\n                <div css={{ display: 'inline-flex', gap: theme.spacing.xs }}>\n                  <Typography.Paragraph color=\"success\">{row.getValue().difference}</Typography.Paragraph>\n                  <ArrowUpIcon color=\"success\" />\n                </div>\n              ))}\n          </span>\n        ),\n      };\n    };\n\n    return [\n      {\n        id: HEADING_COLUMN_ID,\n        header: formatMessage({\n          defaultMessage: 'Compare by',\n          description: 'Runs charts > components > charts > DifferenceViewPlot > Compare by column heading',\n        }),\n        accessorKey: HEADING_COLUMN_ID,\n        size: COLUMN_WIDTH,\n      },\n      ...(baselineColumn ? [convertRunToColumnInfo(baselineColumn, true)] : []),\n      ...nonBaselineColumns.map((runData) => convertRunToColumnInfo(runData, false)),\n    ];\n  }, [theme.spacing, formatMessage, baselineColumn, nonBaselineColumns, cardConfig.showChangeFromBaseline]);\n\n  const table = useReactTable({\n    data: getData,\n    columns: getColumns,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const updateBaselineColumnUuid = useCallback(\n    (baselineColumnUuid: string) => {\n      if (setCardConfig) {\n        setCardConfig((current) => ({\n          ...(current as RunsChartsDifferenceCardConfig),\n          baselineColumnUuid,\n        }));\n      }\n    },\n    [setCardConfig],\n  );\n\n  if (previewData.length === 0) {\n    return null;\n  }\n\n  return (\n    <Table style={{ width: table.getTotalSize() }} scrollable>\n      {table.getHeaderGroups().map((headerGroup) => (\n        <TableRow key={headerGroup.id} isHeader>\n          {headerGroup.headers.map((header, index) => {\n            return (\n              <TableHeader\n                key={header.id}\n                style={{\n                  maxWidth: header.column.getSize(),\n                }}\n                resizable={header.column.getCanResize()}\n                resizeHandler={header.getResizeHandler()}\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    gap: theme.spacing.xs,\n                    alignItems: 'center',\n                  }}\n                >\n                  <div css={{ flexShrink: 1, flexGrow: 1, overflow: 'hidden' }}>\n                    {flexRender(header.column.columnDef.header, header.getContext())}\n                  </div>\n                  {index !== 0 && setCardConfig && (\n                    <div>\n                      <DropdownMenu.Root>\n                        <DropdownMenu.Trigger asChild>\n                          <Button componentId=\"set_as_baseline_button\" icon={<OverflowIcon />} />\n                        </DropdownMenu.Trigger>\n                        <DropdownMenu.Content>\n                          <DropdownMenu.Item onClick={() => updateBaselineColumnUuid(header.id)}>\n                            <FormattedMessage\n                              defaultMessage=\"Set as baseline\"\n                              description=\"Runs charts > components > charts > DifferenceViewPlot > Set as baseline dropdown option\"\n                            />\n                          </DropdownMenu.Item>\n                        </DropdownMenu.Content>\n                      </DropdownMenu.Root>\n                    </div>\n                  )}\n                </div>\n              </TableHeader>\n            );\n          })}\n        </TableRow>\n      ))}\n      {table.getRowModel().rows.map((row) => (\n        <TableRow key={row.id}>\n          {row.getAllCells().map((cell) => (\n            <TableCell key={cell.id} style={{ maxWidth: cell.column.getSize() }} multiline>\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </TableCell>\n          ))}\n        </TableRow>\n      ))}\n    </Table>\n  );\n};\n","import { ImageIcon } from '@databricks/design-system';\nimport { GenericSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { getArtifactLocationUrl } from 'common/utils/ArtifactUtils';\nimport { ImageEntity } from 'experiment-tracking/types';\nimport { useState } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { ImagePreviewGroup, Image } from '../../../../../shared/building_blocks/Image';\n\nexport const MAX_IMAGE_SIZE = 225;\nexport const MIN_IMAGE_SIZE = 120;\nexport const IMAGE_GAP_SIZE = 10;\n\nexport const getImageSize = (numImages: number, width: number) => {\n  // Scale image size based on number of images\n  const maxImagesPerRow = Math.floor(width / MIN_IMAGE_SIZE);\n  if (numImages < maxImagesPerRow) {\n    return Math.min(width / numImages - IMAGE_GAP_SIZE, MAX_IMAGE_SIZE);\n  }\n  return width / maxImagesPerRow - IMAGE_GAP_SIZE;\n};\n\ntype ImagePlotProps = {\n  imageUrl: string;\n  compressedImageUrl: string;\n  imageSize?: number;\n  maxImageSize?: number;\n};\n\nexport const ImagePlot = ({ imageUrl, compressedImageUrl, imageSize, maxImageSize }: ImagePlotProps) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ width: imageSize, height: imageSize || '100%' }}>\n      <div css={{ height: imageSize || '100%' }}>\n        {compressedImageUrl === undefined ? (\n          <GenericSkeleton label=\"Loading...\" css={{ height: imageSize, width: imageSize }} />\n        ) : (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: imageSize || '100%',\n              height: imageSize || '100%',\n              maxWidth: maxImageSize,\n              maxHeight: maxImageSize,\n              backgroundColor: theme.colors.backgroundSecondary,\n              '& .ant-image': {\n                height: '100%',\n                display: 'flex',\n                alignItems: 'center',\n              },\n            }}\n          >\n            <ImagePreviewGroup visible={previewVisible} onVisibleChange={setPreviewVisible}>\n              <Image\n                src={compressedImageUrl}\n                preview={{ src: imageUrl }}\n                style={{ maxWidth: maxImageSize || '100%', maxHeight: maxImageSize || '100%' }}\n              />\n            </ImagePreviewGroup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const ImagePlotWithHistory = ({\n  metadataByStep,\n  imageSize,\n  step,\n  runUuid,\n}: {\n  metadataByStep: Record<number, ImageEntity>;\n  imageSize?: number;\n  step: number;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (metadataByStep[step] === undefined) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          width: imageSize,\n          height: imageSize,\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n        }}\n      >\n        <ImageIcon />\n        <FormattedMessage\n          defaultMessage=\"No image logged at this step\"\n          description=\"Experiment tracking > runs charts > charts > image plot with history > no image text\"\n        />\n      </div>\n    );\n  }\n  return (\n    <ImagePlot\n      imageUrl={getArtifactLocationUrl(metadataByStep[step].filepath, runUuid)}\n      compressedImageUrl={getArtifactLocationUrl(metadataByStep[step].compressed_filepath, runUuid)}\n      imageSize={imageSize}\n    />\n  );\n};\n\nexport const EmptyImageGridPlot = () => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        fontSize: 16,\n      }}\n    >\n      <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n        Compare logged images\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        Use the image grid chart to compare logged images across runs.\n      </Typography.Text>\n    </div>\n  );\n};\n","import { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunColorPill } from 'experiment-tracking/components/experiment-page/components/RunColorPill';\nimport { useMemo } from 'react';\nimport { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { EmptyImageGridPlot, IMAGE_GAP_SIZE, ImagePlotWithHistory, getImageSize } from './ImageGridPlot.common';\nimport { ImageEntity } from 'experiment-tracking/types';\n\nexport const ImageGridSingleKeyPlot = ({\n  previewData,\n  cardConfig,\n  width,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy?: string;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n  width: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const displayRuns = previewData.filter((run: RunsChartsRunData) => {\n    const imageMetadata = run.images[cardConfig.imageKeys[0]];\n    return imageMetadata && Object.keys(imageMetadata).length > 0;\n  });\n\n  const imageSize = useMemo(() => {\n    return getImageSize(displayRuns.length, width);\n  }, [displayRuns, width]);\n\n  if (displayRuns.length === 0) {\n    return <EmptyImageGridPlot />;\n  }\n  return (\n    <div css={{ display: 'flex', justifyContent: 'flex-start', flexWrap: 'wrap' }}>\n      {displayRuns.map((run: RunsChartsRunData) => {\n        // There is exactly one key in this plot\n        const imageMetadataByStep = Object.values(run.images[cardConfig.imageKeys[0]]).reduce(\n          (acc, metadata: ImageEntity) => {\n            if (metadata.step !== undefined) {\n              acc[metadata.step] = metadata;\n            }\n            return acc;\n          },\n          {} as Record<number, ImageEntity>,\n        );\n        return (\n          <div key={run.uuid} css={{ padding: `${IMAGE_GAP_SIZE / 2}px` }}>\n            <Tooltip title={run.displayName}>\n              <div\n                css={{\n                  width: imageSize,\n                  height: theme.typography.lineHeightMd,\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <RunColorPill color={run.color} />\n                {run.displayName}\n              </div>\n            </Tooltip>\n            <ImagePlotWithHistory\n              key={run.uuid}\n              step={cardConfig.step}\n              metadataByStep={imageMetadataByStep}\n              imageSize={imageSize}\n              runUuid={run.uuid}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import {\n  useDesignSystemTheme,\n  TableRow,\n  TableHeader,\n  TableCell,\n  Table,\n  Tooltip,\n  Typography,\n} from '@databricks/design-system';\nimport { RunColorPill } from 'experiment-tracking/components/experiment-page/components/RunColorPill';\nimport { useMemo } from 'react';\nimport { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { EmptyImageGridPlot, getImageSize, ImagePlotWithHistory } from './ImageGridPlot.common';\nimport { ImageEntity } from 'experiment-tracking/types';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ImageGridMultipleKeyPlot = ({\n  previewData,\n  cardConfig,\n  width,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy?: string;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n  width: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const displayRuns = previewData.filter((run: RunsChartsRunData) => Object.keys(run.images).length !== 0);\n\n  const imageSize = useMemo(() => {\n    return getImageSize(displayRuns.length, width);\n  }, [displayRuns, width]);\n\n  if (displayRuns.length === 0) {\n    return <EmptyImageGridPlot />;\n  }\n  return (\n    <div css={{ height: '100%', width: '100%' }}>\n      <Table grid scrollable>\n        <TableRow isHeader>\n          <TableHeader css={{ minWidth: imageSize + theme.spacing.md }}>\n            <FormattedMessage\n              defaultMessage=\"images\"\n              description=\"Experiment tracking > runs charts > charts > image grid multiple key > table header text\"\n            />\n          </TableHeader>\n          {displayRuns.map((run: RunsChartsRunData) => {\n            return (\n              <TableHeader key={run.uuid} css={{ minWidth: imageSize + theme.spacing.md }}>\n                <Tooltip title={run.displayName}>\n                  <div\n                    css={{\n                      height: theme.typography.lineHeightMd,\n                      whiteSpace: 'nowrap',\n                      display: 'inline-flex',\n                      alignItems: 'center',\n                      margin: 'auto',\n                      gap: theme.spacing.sm,\n                    }}\n                  >\n                    <RunColorPill color={run.color} />\n                    {run.displayName}\n                  </div>\n                </Tooltip>\n              </TableHeader>\n            );\n          })}\n        </TableRow>\n        {cardConfig.imageKeys.map((imageKey) => {\n          return (\n            <TableRow key={imageKey}>\n              <TableCell css={{ minWidth: imageSize + theme.spacing.md }}>\n                <div style={{ whiteSpace: 'normal' }}>{imageKey}</div>\n              </TableCell>\n              {displayRuns.map((run: RunsChartsRunData) => {\n                if (run.images[imageKey] && Object.keys(run.images[imageKey]).length > 0) {\n                  const metadataByStep = Object.values(run.images[imageKey]).reduce((acc, metadata) => {\n                    if (metadata.step !== undefined) {\n                      acc[metadata.step] = metadata;\n                    }\n                    return acc;\n                  }, {} as Record<number, ImageEntity>);\n                  return (\n                    <TableCell key={run.uuid} css={{ minWidth: imageSize + theme.spacing.md }}>\n                      <ImagePlotWithHistory\n                        metadataByStep={metadataByStep}\n                        imageSize={imageSize}\n                        step={cardConfig.step}\n                        runUuid={run.uuid}\n                      />\n                    </TableCell>\n                  );\n                }\n                return <TableCell key={run.uuid} css={{ minWidth: imageSize + theme.spacing.md }} />;\n              })}\n            </TableRow>\n          );\n        })}\n      </Table>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { ThunkDispatch } from 'redux-types';\nimport { useEffect } from 'react';\nimport { shouldEnableImageGridCharts } from 'common/utils/FeatureUtils';\nimport { ImageGridSingleKeyPlot } from './ImageGridSingleKeyPlot';\nimport { ImageGridMultipleKeyPlot } from './ImageGridMultipleKeyPlot';\nimport {\n  DEFAULT_IMAGE_GRID_CHART_NAME,\n  LOG_IMAGE_TAG_INDICATOR,\n  NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE,\n} from 'experiment-tracking/constants';\nimport { RunsGroupByConfig } from 'experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\n\nexport const ImageGridPlot = ({\n  previewData,\n  cardConfig,\n  groupBy,\n  setCardConfig,\n  containerWidth,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy: RunsGroupByConfig | null;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n  containerWidth: number;\n}) => {\n  const filteredPreviewData = previewData\n    .filter((run: RunsChartsRunData) => {\n      return run.tags[LOG_IMAGE_TAG_INDICATOR];\n    })\n    .slice(-NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE);\n\n  if (cardConfig.imageKeys.length === 1) {\n    return <ImageGridSingleKeyPlot previewData={filteredPreviewData} cardConfig={cardConfig} width={containerWidth} />;\n  } else if (cardConfig.imageKeys.length > 1) {\n    return (\n      <ImageGridMultipleKeyPlot previewData={filteredPreviewData} cardConfig={cardConfig} width={containerWidth} />\n    );\n  }\n  return null;\n};\n","import { LegacySkeleton } from '@databricks/design-system';\nimport React, { Suspense } from 'react';\nimport { RunsChartsRunData } from '../RunsCharts.common';\n\nconst ParallelCoordinatesPlot = React.lazy(() => import('./ParallelCoordinatesPlot'));\n\nexport const MAX_NUMBER_STRINGS = 30;\nexport type ParallelCoordinateDataEntry = Record<string, string | number | null>;\n\nconst LazyParallelCoordinatesPlot = (props: any) => {\n  return (\n    <Suspense fallback={<LegacySkeleton />}>\n      <ParallelCoordinatesPlot {...props}></ParallelCoordinatesPlot>\n    </Suspense>\n  );\n};\n\n// Map all metrics, params and run uuid\n// Filter data to only keep the selected params and metrics from each run\nexport function processParallelCoordinateData(\n  chartRunData: RunsChartsRunData[],\n  selectedParams: string[],\n  selectedMetrics: string[],\n): ParallelCoordinateDataEntry[] {\n  const allRuns = chartRunData.map((run) => {\n    const result: ParallelCoordinateDataEntry = {\n      uuid: run.uuid,\n    };\n    function computeSelectedAttrs(attrs: string[], runvalue: Record<string, any>) {\n      if (Array.isArray(attrs)) {\n        for (const attr of attrs) {\n          if (attr in runvalue) {\n            result[attr] = runvalue[attr].value;\n          } else {\n            result[attr] = null;\n          }\n        }\n      }\n    }\n    computeSelectedAttrs(selectedParams, run.params);\n    computeSelectedAttrs(selectedMetrics, run.metrics);\n    return result;\n  });\n\n  return filterParallelCoordinateData(allRuns);\n}\n\n// filter data so each column only shows #s or strs, whichever allows more to be displayed\nexport function filterParallelCoordinateData(allRuns: ParallelCoordinateDataEntry[]): ParallelCoordinateDataEntry[] {\n  if (allRuns.length === 0) {\n    return allRuns;\n  }\n\n  const keys = Object.keys(allRuns[0]);\n  keys.shift(); // remove uuid as a key\n  let stringRuns: ParallelCoordinateDataEntry[] = allRuns;\n\n  // add runs with any string values until 30 unique values in any column\n  keys.forEach((key) => {\n    const numberRuns = stringRuns.filter((x) => {\n      return !isNaN(Number(x[key])) && x[key] !== null;\n    }); // this logic should remain the same as in getAxesTypes() for casting\n\n    if (numberRuns.length >= stringRuns.length / 2) {\n      stringRuns = numberRuns;\n      return;\n    }\n\n    const seenVals: Set<string> = new Set();\n    const tempRuns = [];\n    for (const run of stringRuns) {\n      const value = run[key];\n      if (seenVals.size === MAX_NUMBER_STRINGS && seenVals.has(String(value))) {\n        tempRuns.push(run);\n      } else if (seenVals.size < MAX_NUMBER_STRINGS && isNaN(Number(value))) {\n        seenVals.add(String(value));\n        tempRuns.push(run);\n      }\n    }\n    stringRuns = tempRuns;\n  });\n\n  return stringRuns;\n}\n\nexport default LazyParallelCoordinatesPlot;\n","import { Accordion, useDesignSystemTheme } from '@databricks/design-system';\nimport { CSSObject, css } from '@emotion/react';\nimport { useMemo } from 'react';\n\nexport const METRIC_CHART_SECTION_HEADER_SIZE = 55;\n\ninterface MetricChartsAccordionProps {\n  activeKey?: string | string[];\n  onActiveKeyChange?: (key: string | string[]) => void;\n  children: React.ReactNode;\n  disableCollapse?: boolean;\n}\n\nconst MetricChartsAccordion = ({\n  activeKey,\n  onActiveKeyChange,\n  children,\n  disableCollapse = false,\n}: MetricChartsAccordionProps) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n  const clsPrefix = getPrefixedClassName('collapse');\n\n  const styles = useMemo(() => {\n    const classItem = `.${clsPrefix}-item`;\n    const classItemActive = `${classItem}-active`;\n    const classHeader = `.${clsPrefix}-header`;\n    const classContent = `.${clsPrefix}-content`;\n    const classContentBox = `.${clsPrefix}-content-box`;\n    const classArrow = `.${clsPrefix}-arrow`;\n\n    const styles: CSSObject = {\n      [classContent]: {\n        padding: '0px !important',\n        backgroundColor: 'transparent !important',\n      },\n\n      [classContentBox]: {\n        padding: '0 0 12px 0px !important',\n        backgroundColor: 'transparent !important',\n      },\n\n      [`& > ${classItem} > ${classHeader} > ${classArrow}`]: {\n        fontSize: theme.general.iconSize,\n        left: 12,\n        // TODO: This is needed currently because the rotated icon isn't centered, remove when accordion is fixed\n        verticalAlign: '-7px',\n        transform: 'rotate(-90deg)',\n        display: disableCollapse ? 'none' : undefined,\n      },\n\n      [`& > ${classItemActive} > ${classHeader} > ${classArrow}`]: {\n        transform: 'rotate(0deg)',\n      },\n\n      [classHeader]: {\n        display: 'flex',\n        color: theme.colors.textPrimary,\n        fontWeight: 600,\n        alignItems: 'center',\n\n        '&:focus-visible': {\n          outlineColor: `${theme.colors.primary} !important`,\n          outlineStyle: 'auto !important',\n        },\n      },\n\n      [`& > ${classItem}`]: {\n        borderBottom: `1px solid ${theme.colors.border}`,\n        borderRadius: 0,\n      },\n\n      [`& > ${classItem} > ${classHeader}`]: {\n        padding: 0,\n        lineHeight: '20px',\n        height: METRIC_CHART_SECTION_HEADER_SIZE,\n      },\n    };\n    return styles;\n  }, [theme, clsPrefix, disableCollapse]);\n\n  return (\n    <Accordion\n      {...(activeKey ? { activeKey } : {})}\n      {...(onActiveKeyChange ? { onChange: onActiveKeyChange } : {})}\n      dangerouslyAppendEmotionCSS={css(styles)}\n      dangerouslySetAntdProps={{ expandIconPosition: 'left' }}\n    >\n      {children}\n    </Accordion>\n  );\n};\n\nexport default MetricChartsAccordion;\n","import { Button, DropdownMenu, PlusIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\n\nimport { ReactComponent as ChartBarIcon } from '../../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../../common/static/chart-scatter.svg';\nimport { ReactComponent as ChartDifferenceIcon } from '../../../../common/static/chart-difference.svg';\nimport { ReactComponent as ChartImageIcon } from '../../../../common/static/chart-image.svg';\nimport { RunsChartType } from '../runs-charts.types';\nimport { shouldEnableDifferenceViewCharts, shouldEnableImageGridCharts } from 'common/utils/FeatureUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface RunsChartsAddChartMenuProps {\n  onAddChart: (type: RunsChartType) => void;\n  supportedChartTypes?: RunsChartType[];\n}\n\nexport const RunsChartsAddChartMenu = ({ onAddChart, supportedChartTypes }: RunsChartsAddChartMenuProps) => {\n  const isChartTypeSupported = (type: RunsChartType) => !supportedChartTypes || supportedChartTypes.includes(type);\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscompareaddchartmenu.tsx_19\"\n          css={styles.addChartButton}\n          icon={<PlusIcon />}\n          data-testid=\"experiment-view-compare-runs-add-chart\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Add chart\"\n            description=\"Experiment tracking > runs charts > add chart menu\"\n          />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content align=\"end\">\n        {isChartTypeSupported(RunsChartType.BAR) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.BAR)}\n            data-testid=\"experiment-view-compare-runs-chart-type-bar\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartBarIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Bar chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > bar chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.LINE) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.LINE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-line\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartLineIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Line chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > line chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.PARALLEL) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.PARALLEL)}\n            data-testid=\"experiment-view-compare-runs-chart-type-parallel\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartParallelIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Parallel coordinates\"\n              description=\"Experiment tracking > runs charts > add chart menu > parallel coordinates\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.SCATTER) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.SCATTER)}\n            data-testid=\"experiment-view-compare-runs-chart-type-scatter\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartScatterIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Scatter chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > scatter plot\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.CONTOUR) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.CONTOUR)}\n            data-testid=\"experiment-view-compare-runs-chart-type-contour\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartContourIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Contour chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > contour chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {shouldEnableDifferenceViewCharts() && isChartTypeSupported(RunsChartType.DIFFERENCE) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.DIFFERENCE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-difference\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartDifferenceIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Difference view\"\n              description=\"Experiment tracking > runs charts > add chart menu > difference view\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {shouldEnableImageGridCharts() && isChartTypeSupported(RunsChartType.IMAGE) && (\n          <DropdownMenu.Item\n            onClick={() => onAddChart(RunsChartType.IMAGE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-image\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartImageIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Image grid\"\n              description=\"Experiment tracking > runs charts > add chart menu > image grid\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n\nconst styles = {\n  addChartButton: (theme: Theme) => ({\n    // Overriden while waiting for design decision in DuBois (FEINF-1711)\n    backgroundColor: `${theme.colors.backgroundPrimary} !important`,\n  }),\n  iconWrapper: (theme: Theme) => ({\n    width: theme.general.iconSize + theme.spacing.xs,\n  }),\n};\n","import {\n  Button,\n  DangerModal,\n  DragIcon,\n  DropdownMenu,\n  Input,\n  Modal,\n  OverflowIcon,\n  PencilIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ChartSectionConfig } from '../../../../types';\nimport { RunsChartsAddChartMenu } from '../RunsChartsAddChartMenu';\nimport { RunsChartType } from '../../runs-charts.types';\nimport { useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useDragAndDropElement } from 'common/hooks/useDragAndDropElement';\nimport { CheckIcon } from '@databricks/design-system';\nimport { METRIC_CHART_SECTION_HEADER_SIZE } from '../../../MetricChartsAccordion';\nimport cx from 'classnames';\n\nexport interface RunsChartsSectionHeaderProps {\n  index: number;\n  section: ChartSectionConfig;\n  sectionChartsLength: number;\n  addNewChartCard: (metricSectionId: string) => (type: RunsChartType) => void;\n  onDeleteSection: (sectionId: string) => void;\n  onAddSection: (sectionId: string, above: boolean) => void;\n  editSection: number;\n  onSetEditSection: React.Dispatch<React.SetStateAction<number>>;\n  onSetSectionName: (sectionId: string, name: string) => void;\n  onSectionReorder: (sourceSectionId: string, targetSectionId: string) => void;\n  isExpanded: boolean;\n  supportedChartTypes?: RunsChartType[] | undefined;\n}\n\nexport const RunsChartsSectionHeader = ({\n  index,\n  section,\n  sectionChartsLength,\n  addNewChartCard,\n  onDeleteSection,\n  onAddSection,\n  editSection,\n  onSetEditSection,\n  onSetSectionName,\n  onSectionReorder,\n  isExpanded,\n  supportedChartTypes,\n}: RunsChartsSectionHeaderProps) => {\n  const { theme } = useDesignSystemTheme();\n  // Change name locally for better performance\n  const [tmpSectionName, setTmpSectionName] = useState(section.name);\n  // State to check if element is being dragged\n  const [isDraggingHandle, setIsDraggingHandle] = useState(false);\n\n  // Ref and state to measure the width of the section name\n  const sectionNameRef = useRef<HTMLDivElement>(null);\n  const confirmButtonRef = useRef<HTMLButtonElement>(null);\n  const [sectionNameWidth, setSectionNameWidth] = useState(0.0);\n\n  // Delete section modal\n  const [isDeleteSectionModalOpen, setIsDeleteSectionModalOpen] = useState(false);\n\n  const stopPropagation = (e: any) => {\n    e.stopPropagation();\n  };\n\n  const deleteModalConfirm = () => {\n    onDeleteSection(section.uuid);\n  };\n\n  const deleteModalCancel = () => {\n    setIsDeleteSectionModalOpen(false);\n  };\n\n  const deleteSection = () => {\n    setIsDeleteSectionModalOpen(true);\n  };\n\n  const addSectionAbove = () => {\n    onAddSection(section.uuid, true);\n  };\n\n  const addSectionBelow = () => {\n    onAddSection(section.uuid, false);\n  };\n\n  const onEdit = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    onSetEditSection(index);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTmpSectionName(e.target.value);\n  };\n\n  const onSubmit = (e: React.KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    if (!tmpSectionName.trim()) {\n      e.preventDefault();\n      return;\n    }\n    onSetEditSection(-1);\n    onSetSectionName(section.uuid, tmpSectionName);\n  };\n\n  const onEsc = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      e.stopPropagation();\n      onSetEditSection(-1);\n      setTmpSectionName(section.name);\n    }\n  };\n\n  const onBlur = (e: React.FocusEvent) => {\n    if (e.relatedTarget === confirmButtonRef.current) {\n      return;\n    }\n    onSetEditSection(-1);\n    onSetSectionName(section.uuid, tmpSectionName);\n  };\n\n  useEffect(() => {\n    if (!sectionNameRef.current) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      setSectionNameWidth(entry.contentRect.width);\n    });\n\n    resizeObserver.observe(sectionNameRef.current);\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  // For explicitness:\n  const EDITABLE_LABEL_PADDING_WIDTH = 6;\n  const EDITABLE_LABEL_BORDER_WIDTH = 1;\n  const EDITABLE_LABEL_OFFSET = EDITABLE_LABEL_PADDING_WIDTH + EDITABLE_LABEL_BORDER_WIDTH;\n\n  const isCurrentlyEdited = editSection === index;\n  const [isCurrentlyHovered, setIsCurrentlyHovered] = useState(false);\n\n  const { dragHandleRef, dragPreviewRef, dropTargetRef, isOver, isDragging } = useDragAndDropElement({\n    dragGroupKey: 'sections',\n    dragKey: section.uuid,\n    onDrop: onSectionReorder,\n  });\n\n  return (\n    <>\n      <div\n        role=\"figure\"\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0px`,\n          height: `${METRIC_CHART_SECTION_HEADER_SIZE}px`,\n          '.section-element-visibility-on-hover': {\n            visibility: isCurrentlyHovered ? 'visible' : 'hidden',\n            opacity: isCurrentlyHovered ? 1 : 0,\n          },\n          '.section-element-visibility-on-hover-and-not-drag': {\n            visibility: isCurrentlyHovered ? 'visible' : 'hidden',\n            opacity: isCurrentlyHovered ? (isDraggingHandle ? 0 : 1) : 0,\n          },\n          '.section-element-hidden-on-edit': { display: isCurrentlyEdited ? 'none' : 'inherit' },\n        }}\n        onMouseMove={() => setIsCurrentlyHovered(true)}\n        onMouseLeave={() => setIsCurrentlyHovered(false)}\n        ref={(element) => {\n          // Use this element for both drag preview and drop target\n          dropTargetRef?.(element);\n          dragPreviewRef?.(element);\n        }}\n        data-testid=\"experiment-view-compare-runs-section-header\"\n      >\n        {isOver && (\n          // Visual overlay for target drop element\n          <div\n            css={{\n              position: 'absolute',\n              inset: 0,\n              backgroundColor: theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100,\n              border: `2px dashed ${theme.colors.blue400}`,\n              opacity: 0.75,\n            }}\n          />\n        )}\n        <div\n          style={{\n            maxWidth: '40%',\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <div\n            ref={sectionNameRef}\n            style={{\n              position: !isCurrentlyEdited ? 'relative' : 'absolute',\n              visibility: !isCurrentlyEdited ? 'visible' : 'hidden',\n              textOverflow: isCurrentlyEdited ? undefined : 'ellipsis',\n              maxWidth: '100%',\n              overflow: 'clip',\n              paddingLeft: EDITABLE_LABEL_OFFSET,\n              whiteSpace: 'pre',\n            }}\n          >\n            {tmpSectionName}\n          </div>\n          {editSection === index && (\n            <Input\n              autoFocus\n              onClick={stopPropagation}\n              onMouseDown={stopPropagation}\n              onMouseUp={stopPropagation}\n              onDoubleClick={stopPropagation}\n              onChange={onChange}\n              value={tmpSectionName}\n              css={{\n                color: theme.colors.textPrimary,\n                fontWeight: 600,\n                padding: `1px ${EDITABLE_LABEL_PADDING_WIDTH}px 1px ${EDITABLE_LABEL_PADDING_WIDTH}px`,\n                background: theme.colors.backgroundSecondary,\n                minWidth: '50px',\n                width: sectionNameWidth + 2 * EDITABLE_LABEL_OFFSET,\n                position: 'relative',\n                lineHeight: theme.typography.lineHeightBase,\n                maxWidth: '100%',\n              }}\n              onKeyDown={onEsc}\n              onPressEnter={onSubmit}\n              dangerouslyAppendEmotionCSS={{ '&&': { minHeight: '20px !important' } }}\n              onBlur={onBlur}\n            />\n          )}\n          <div\n            css={{\n              padding: theme.spacing.xs,\n              position: 'relative',\n            }}\n            style={{\n              visibility: !isCurrentlyEdited ? 'visible' : 'hidden',\n              display: isCurrentlyEdited ? 'none' : 'inherit',\n            }}\n          >\n            {`(${sectionChartsLength})`}\n          </div>\n          <div className=\"section-element-visibility-on-hover-and-not-drag section-element-hidden-on-edit\">\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_246\"\n              onClick={onEdit}\n              aria-label=\"Icon label\"\n              icon={<PencilIcon />}\n            />\n          </div>\n        </div>\n        {editSection === index && (\n          <div style={{ padding: `0 ${theme.spacing.xs}px` }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_251\"\n              onClick={onSubmit}\n              icon={<CheckIcon />}\n              ref={confirmButtonRef}\n            />\n          </div>\n        )}\n        <div\n          className=\"section-element-visibility-on-hover section-element-hidden-on-edit\"\n          css={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', cursor: 'grab' }}\n        >\n          <DragIcon\n            rotate={90}\n            style={{ color: theme.colors.textSecondary }}\n            ref={dragHandleRef}\n            onMouseDown={() => setIsDraggingHandle(true)}\n            onMouseLeave={() => {\n              setIsDraggingHandle(false);\n            }}\n            data-testid=\"experiment-view-compare-runs-section-header-drag-handle\"\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            top: '50%',\n            right: '0',\n            transform: 'translate(0, -50%)',\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <div\n            onClick={stopPropagation}\n            onMouseDown={stopPropagation}\n            onMouseUp={stopPropagation}\n            onDoubleClick={stopPropagation}\n            className=\"section-element-visibility-on-hover-and-not-drag section-element-hidden-on-edit\"\n          >\n            <DropdownMenu.Root modal={false}>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_288\"\n                  icon={<OverflowIcon />}\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                <DropdownMenu.Item onClick={addSectionAbove}>\n                  <FormattedMessage\n                    defaultMessage=\"Add section above\"\n                    description=\"Experiment page > compare runs > chart section > add section above label\"\n                  />\n                </DropdownMenu.Item>\n                <DropdownMenu.Item onClick={addSectionBelow}>\n                  <FormattedMessage\n                    defaultMessage=\"Add section below\"\n                    description=\"Experiment page > compare runs > chart section > add section below label\"\n                  />\n                </DropdownMenu.Item>\n                <DropdownMenu.Item onClick={deleteSection}>\n                  <FormattedMessage\n                    defaultMessage=\"Delete section\"\n                    description=\"Experiment page > compare runs > chart section > delete section label\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n            <DangerModal\n              visible={isDeleteSectionModalOpen}\n              onOk={deleteModalConfirm}\n              onCancel={deleteModalCancel}\n              title=\"Delete section\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Deleting the section will permanently remove it and the charts it contains. This cannot be undone.\"\n                description=\"Experiment page > compare runs > chart section > delete section warning message\"\n              />\n            </DangerModal>\n          </div>\n          <div\n            onClick={stopPropagation}\n            onMouseDown={stopPropagation}\n            onMouseUp={stopPropagation}\n            onDoubleClick={stopPropagation}\n            className={cx(\n              {\n                'section-element-visibility-on-hover-and-not-drag': !isExpanded,\n              },\n              'section-element-hidden-on-edit',\n            )}\n            css={{\n              alignSelf: 'flex-end',\n              marginLeft: theme.spacing.xs,\n            }}\n          >\n            <RunsChartsAddChartMenu\n              onAddChart={addNewChartCard(section.uuid)}\n              supportedChartTypes={supportedChartTypes}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useMemo, useState } from 'react';\nimport type { RunsChartsRunData } from './RunsCharts.common';\nimport type { RunsChartsCardConfig } from '../runs-charts.types';\nimport { RunsChartType } from '../runs-charts.types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { getGridColumnSetup } from '../../../../common/utils/CssGrid.utils';\nimport { RunsChartCardSetFullscreenFn, RunsChartsChartsDragGroup } from './cards/ChartCard.common';\nimport { useDragAndDropElement } from 'common/hooks/useDragAndDropElement';\nimport { FormattedMessage } from 'react-intl';\nimport { Empty } from '@databricks/design-system';\nimport { RunsChartsCard } from './cards/RunsChartsCard';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\n\nexport interface RunsChartsProps {\n  sectionId: string;\n  chartRunData: RunsChartsRunData[];\n  cardsConfig: RunsChartsCardConfig[];\n  isMetricHistoryLoading?: boolean;\n  onRemoveChart: (chart: RunsChartsCardConfig) => void;\n  onStartEditChart: (chart: RunsChartsCardConfig) => void;\n  onReorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  onInsertCharts: (sourceChartUuid: string, targetSectionId: string) => void;\n  groupBy: RunsGroupByConfig | null;\n  sectionIndex: number;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n  autoRefreshEnabled?: boolean;\n}\n\nexport const RunsCharts = ({\n  sectionId,\n  chartRunData,\n  cardsConfig,\n  isMetricHistoryLoading,\n  onRemoveChart,\n  onStartEditChart,\n  onReorderCharts,\n  onInsertCharts,\n  groupBy,\n  sectionIndex,\n  setFullScreenChart,\n  autoRefreshEnabled,\n}: RunsChartsProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const [parallelChartCards, differenceChartCards, imageChartCards, remainingChartCards] = useMemo(() => {\n    // Play it safe in case that cards config somehow failed to load\n    if (!Array.isArray(cardsConfig)) {\n      return [[], [], [], []];\n    }\n    return [\n      cardsConfig.filter((c) => c.type === RunsChartType.PARALLEL),\n      cardsConfig.filter((c) => c.type === RunsChartType.DIFFERENCE),\n      cardsConfig.filter((c) => c.type === RunsChartType.IMAGE),\n      cardsConfig.filter(\n        (c) =>\n          c.type !== RunsChartType.PARALLEL && c.type !== RunsChartType.DIFFERENCE && c.type !== RunsChartType.IMAGE,\n      ),\n    ];\n  }, [cardsConfig]);\n\n  const gridSetup = useMemo(\n    () =>\n      getGridColumnSetup({\n        maxColumns: 3,\n        gap: theme.spacing.md,\n        additionalBreakpoints: [{ breakpointWidth: 3 * 720, minColumnWidthForBreakpoint: 600 }],\n      }),\n    [theme],\n  );\n\n  const { dropTargetRef: dropTargetGeneralRef, isOver: isOverGeneral } = useDragAndDropElement({\n    dragGroupKey: RunsChartsChartsDragGroup.GENERAL_AREA,\n    dragKey: sectionId,\n    onDrop: onInsertCharts,\n  });\n\n  const { dropTargetRef: dropTargetParallelRef, isOver: isOverParallel } = useDragAndDropElement({\n    dragGroupKey: RunsChartsChartsDragGroup.PARALLEL_CHARTS_AREA,\n    dragKey: sectionId,\n    onDrop: onInsertCharts,\n  });\n\n  const isChartsEmpty =\n    !parallelChartCards.length &&\n    !differenceChartCards.length &&\n    !imageChartCards.length &&\n    !remainingChartCards.length;\n\n  return (\n    <div\n      role=\"figure\"\n      ref={(element) => {\n        // Use this element for drop target\n        dropTargetGeneralRef?.(element);\n        dropTargetParallelRef?.(element);\n      }}\n      css={{\n        padding: cardsConfig.length === 0 ? theme.spacing.lg : 0,\n        position: 'relative',\n        overflow: 'hidden',\n      }}\n    >\n      {(isOverGeneral || isOverParallel) && cardsConfig.length === 0 && (\n        // Visual overlay for target drop element\n        <div\n          css={{\n            position: 'absolute',\n            inset: 0,\n            backgroundColor: theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100,\n            border: `2px dashed ${theme.colors.blue400}`,\n            opacity: 0.75,\n          }}\n        />\n      )}\n      {isChartsEmpty && (\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <Empty\n            title={\n              <FormattedMessage\n                defaultMessage=\"No charts in this section\"\n                description=\"Runs compare page > Charts tab > No charts placeholder title\"\n              />\n            }\n            description={\n              <FormattedMessage\n                defaultMessage=\"Click 'Add chart' or drag and drop to add charts here.\"\n                description=\"Runs compare page > Charts tab > No charts placeholder description\"\n              />\n            }\n          />\n        </div>\n      )}\n      {[differenceChartCards, parallelChartCards, imageChartCards].map((chartCards, index) => {\n        if (chartCards.length) {\n          return (\n            <div\n              key={`chart-cards-${index}`}\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.md,\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              {chartCards.map((cardConfig, index) => {\n                const reorderProps = {\n                  onReorderWith: onReorderCharts,\n                  canMoveDown: index < chartCards.length - 1,\n                  canMoveUp: index > 0,\n                  onMoveDown: () => onReorderCharts(cardConfig.uuid || '', chartCards[index + 1]?.uuid || ''),\n                  onMoveUp: () => onReorderCharts(cardConfig.uuid || '', chartCards[index - 1]?.uuid || ''),\n                };\n                return (\n                  <RunsChartsCard\n                    cardConfig={cardConfig}\n                    chartRunData={chartRunData}\n                    onStartEditChart={onStartEditChart}\n                    onRemoveChart={onRemoveChart}\n                    setFullScreenChart={setFullScreenChart}\n                    onReorderCharts={onReorderCharts}\n                    index={index}\n                    sectionIndex={sectionIndex}\n                    groupBy={groupBy}\n                    autoRefreshEnabled={autoRefreshEnabled}\n                    key={`${cardConfig.uuid}-${index}-${sectionIndex}`}\n                    {...reorderProps}\n                  />\n                );\n              })}\n            </div>\n          );\n        }\n        return null;\n      })}\n      <div css={gridSetup}>\n        {remainingChartCards.map((cardConfig, index) => {\n          const reorderProps = {\n            onReorderWith: onReorderCharts,\n            canMoveDown: index < remainingChartCards.length - 1,\n            canMoveUp: index > 0,\n            onMoveDown: () => onReorderCharts(cardConfig.uuid || '', remainingChartCards[index + 1]?.uuid || ''),\n            onMoveUp: () => onReorderCharts(cardConfig.uuid || '', remainingChartCards[index - 1]?.uuid || ''),\n          };\n\n          return (\n            <RunsChartsCard\n              cardConfig={cardConfig}\n              chartRunData={chartRunData}\n              onStartEditChart={onStartEditChart}\n              onRemoveChart={onRemoveChart}\n              setFullScreenChart={setFullScreenChart}\n              onReorderCharts={onReorderCharts}\n              index={index}\n              sectionIndex={sectionIndex}\n              groupBy={groupBy}\n              autoRefreshEnabled={autoRefreshEnabled}\n              key={`${cardConfig.uuid}-${index}-${sectionIndex}`}\n              {...reorderProps}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsCharts } from '../RunsCharts';\nimport type { RunsChartCardSetFullscreenFn } from '../cards/ChartCard.common';\n\nexport interface RunsChartsSectionProps {\n  sectionId: string;\n  sectionCharts: RunsChartsCardConfig[];\n  reorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  insertCharts: (sourceChartUuid: string, targetSectionId: string) => void;\n  isMetricHistoryLoading: boolean;\n  chartData: RunsChartsRunData[];\n  startEditChart: (chartCard: RunsChartsCardConfig) => void;\n  removeChart: (configToDelete: RunsChartsCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n  sectionIndex: number;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n  autoRefreshEnabled?: boolean;\n}\n\nexport const RunsChartsSection = ({\n  sectionId,\n  sectionCharts,\n  reorderCharts,\n  insertCharts,\n  isMetricHistoryLoading,\n  chartData,\n  startEditChart,\n  removeChart,\n  groupBy,\n  sectionIndex,\n  setFullScreenChart,\n  autoRefreshEnabled,\n}: RunsChartsSectionProps) => {\n  return (\n    <RunsCharts\n      sectionId={sectionId}\n      chartRunData={chartData}\n      cardsConfig={sectionCharts}\n      isMetricHistoryLoading={isMetricHistoryLoading}\n      onRemoveChart={removeChart}\n      onStartEditChart={startEditChart}\n      onReorderCharts={reorderCharts}\n      onInsertCharts={insertCharts}\n      groupBy={groupBy}\n      sectionIndex={sectionIndex}\n      setFullScreenChart={setFullScreenChart}\n      autoRefreshEnabled={autoRefreshEnabled}\n    />\n  );\n};\n","import { Accordion } from '@databricks/design-system';\nimport { ChartSectionConfig } from '../../../../types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsLineCardConfig,\n  RunsChartsScatterCardConfig,\n  RunsChartsContourCardConfig,\n  SerializedRunsChartsCardConfigCard,\n} from '../../runs-charts.types';\nimport MetricChartsAccordion, { METRIC_CHART_SECTION_HEADER_SIZE } from '../../../MetricChartsAccordion';\nimport { RunsChartsSectionHeader } from './RunsChartsSectionHeader';\nimport { RunsChartsSection } from './RunsChartsSection';\nimport { useEffect, useMemo } from 'react';\nimport { getUUID } from 'common/utils/ActionUtils';\nimport { useState } from 'react';\nimport { Button, PlusIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Empty } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { Spacer } from '@databricks/design-system';\nimport { useUpdateRunsChartsUIConfiguration } from '../../hooks/useRunsChartsUIConfiguration';\nimport { isArray } from 'lodash';\nimport { RunsChartCardSetFullscreenFn } from '../cards/ChartCard.common';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\nconst chartMatchesFilter = (filter: string, config: RunsChartsCardConfig) => {\n  const filterLowerCase = filter.toLowerCase();\n\n  if (config.type === RunsChartType.BAR) {\n    const barConfig = config as RunsChartsBarCardConfig;\n    return barConfig.metricKey.toLowerCase().includes(filterLowerCase);\n  } else if (config.type === RunsChartType.LINE) {\n    const lineConfig = config as RunsChartsLineCardConfig;\n    if (isArray(lineConfig.selectedMetricKeys)) {\n      return lineConfig.selectedMetricKeys.some((metricKey) => metricKey.toLowerCase().includes(filterLowerCase));\n    }\n    return lineConfig.metricKey.toLowerCase().includes(filterLowerCase);\n  } else if (config.type === RunsChartType.SCATTER) {\n    const scatterConfig = config as RunsChartsScatterCardConfig;\n    return (\n      scatterConfig.xaxis.key.toLowerCase().includes(filterLowerCase) ||\n      scatterConfig.yaxis.key.toLowerCase().includes(filterLowerCase)\n    );\n  } else if (config.type === RunsChartType.PARALLEL) {\n    return 'Parallel Coordinates'.toLowerCase().includes(filterLowerCase);\n  } else {\n    // Must be contour\n    const contourConfig = config as RunsChartsContourCardConfig;\n    return (\n      contourConfig.xaxis.key.toLowerCase().includes(filterLowerCase) ||\n      contourConfig.yaxis.key.toLowerCase().includes(filterLowerCase) ||\n      contourConfig.zaxis.key.toLowerCase().includes(filterLowerCase)\n    );\n  }\n};\n\nexport interface RunsChartsSectionAccordionProps {\n  compareRunSections?: ChartSectionConfig[];\n  compareRunCharts?: SerializedRunsChartsCardConfigCard[];\n  reorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  insertCharts: (sourceChartUuid: string, targetSectionId: string) => void;\n  chartData: RunsChartsRunData[];\n  isMetricHistoryLoading?: boolean;\n  startEditChart: (chartCard: RunsChartsCardConfig) => void;\n  removeChart: (configToDelete: RunsChartsCardConfig) => void;\n  addNewChartCard: (metricSectionId: string) => (type: RunsChartType) => void;\n  search: string;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  supportedChartTypes?: RunsChartType[] | undefined;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n}\n\nexport const RunsChartsSectionAccordion = ({\n  compareRunSections,\n  compareRunCharts,\n  reorderCharts,\n  insertCharts,\n  chartData,\n  isMetricHistoryLoading = false,\n  autoRefreshEnabled = false,\n  startEditChart,\n  removeChart,\n  addNewChartCard,\n  search,\n  groupBy,\n  supportedChartTypes,\n  setFullScreenChart = () => {},\n}: RunsChartsSectionAccordionProps) => {\n  const updateUIState = useUpdateRunsChartsUIConfiguration();\n  const [editSection, setEditSection] = useState(-1);\n  const { theme } = useDesignSystemTheme();\n\n  /**\n   * Get the active (expanded) panels for the accordion\n   */\n  const activeKey = useMemo(() => {\n    const activeSections = (compareRunSections || []).flatMap((sectionConfig: ChartSectionConfig) => {\n      if (sectionConfig.display) {\n        return [sectionConfig.uuid];\n      } else {\n        return [];\n      }\n    });\n    return activeSections;\n  }, [compareRunSections]);\n\n  /**\n   * Updates the active (expanded) panels for the accordion\n   */\n  const onActivePanelChange = (key: string | string[]) => {\n    updateUIState((current) => {\n      const newCompareRunPanels = (current.compareRunSections || []).map((sectionConfig: ChartSectionConfig) => {\n        const sectionId = sectionConfig.uuid;\n        const shouldDisplaySection =\n          (typeof key === 'string' && sectionId === key) || (Array.isArray(key) && key.includes(sectionId));\n        return {\n          ...sectionConfig,\n          display: shouldDisplaySection,\n        };\n      });\n      return {\n        ...current,\n        compareRunSections: newCompareRunPanels,\n      };\n    });\n  };\n\n  /**\n   * Deletes a section from the accordion\n   */\n  const deleteSection = (sectionId: string) => {\n    updateUIState((current) => {\n      const newCompareRunCharts = (current.compareRunCharts || [])\n        // Keep charts that are generated or not in section\n        .filter((chartConfig: RunsChartsCardConfig) => {\n          return chartConfig.isGenerated || chartConfig.metricSectionId !== sectionId;\n        })\n        // For charts that are generated and in section, set deleted to true\n        .map((chartConfig: RunsChartsCardConfig) => {\n          if (chartConfig.isGenerated && chartConfig.metricSectionId === sectionId) {\n            return { ...chartConfig, deleted: true };\n          } else {\n            return chartConfig;\n          }\n        });\n\n      // Delete section\n      const newCompareRunSections = (current.compareRunSections || [])\n        .slice()\n        .filter((sectionConfig: ChartSectionConfig) => {\n          return sectionConfig.uuid !== sectionId;\n        });\n\n      return {\n        ...current,\n        compareRunCharts: newCompareRunCharts,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n  };\n\n  /**\n   * Adds a section to the accordion\n   * @param sectionId indicates the section selected to anchor at\n   * @param above is a boolean value indicating whether to add the section above or below the anchor\n   */\n  const addSection = (sectionId: string, above: boolean) => {\n    let idx = -1;\n    updateUIState((current) => {\n      // Look for index\n      const newCompareRunSections = [...(current.compareRunSections || [])];\n      idx = newCompareRunSections.findIndex((sectionConfig: ChartSectionConfig) => sectionConfig.uuid === sectionId);\n      const newSection = { name: '', uuid: getUUID(), display: false, isReordered: false };\n      if (idx < 0) {\n        // Index not found, add to end\n        newCompareRunSections.push(newSection);\n      } else if (above) {\n        newCompareRunSections.splice(idx, 0, newSection);\n      } else {\n        idx += 1;\n        newCompareRunSections.splice(idx, 0, newSection);\n      }\n      return {\n        ...current,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n    return idx;\n  };\n\n  /**\n   * Appends a section to the end of the accordion\n   */\n  const appendSection = () => {\n    updateUIState((current) => {\n      const newCompareRunSections = [\n        ...(current.compareRunSections || []),\n        { name: '', uuid: getUUID(), display: false, isReordered: false },\n      ];\n      return {\n        ...current,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n    setEditSection(compareRunSections?.length || -1);\n  };\n\n  /**\n   * Updates the name of a section\n   * @param sectionId the section to update the name of\n   * @param name the new name of the section\n   */\n  const setSectionName = (sectionId: string, name: string) => {\n    updateUIState((current) => {\n      const newCompareRunSections = (current.compareRunSections || []).map((sectionConfig: ChartSectionConfig) => {\n        if (sectionConfig.uuid === sectionId) {\n          return { ...sectionConfig, name: name };\n        } else {\n          return sectionConfig;\n        }\n      });\n      return {\n        ...current,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n  };\n\n  /**\n   * Reorders the sections in the accordion\n   * @param sourceSectionId the section you are dragging\n   * @param targetSectionId the section to drop\n   */\n  const sectionReorder = (sourceSectionId: string, targetSectionId: string) => {\n    updateUIState((current) => {\n      const newCompareRunSections = (current.compareRunSections || []).slice();\n      const sourceSectionIdx = newCompareRunSections.findIndex(\n        (sectionConfig: ChartSectionConfig) => sectionConfig.uuid === sourceSectionId,\n      );\n      const targetSectionIdx = newCompareRunSections.findIndex(\n        (sectionConfig: ChartSectionConfig) => sectionConfig.uuid === targetSectionId,\n      );\n      const sourceSection = newCompareRunSections.splice(sourceSectionIdx, 1)[0];\n      // If the source section is above the target section, the target section index will be shifted down by 1\n      newCompareRunSections.splice(targetSectionIdx, 0, sourceSection);\n      return {\n        ...current,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n  };\n\n  if (!compareRunSections || !compareRunCharts) {\n    return null;\n  }\n\n  // If search is not empty, render the filtered charts\n  if (search !== '') {\n    const compareRunChartsFiltered = compareRunCharts.filter((config: RunsChartsCardConfig) => {\n      return !config.deleted && chartMatchesFilter(search, config);\n    });\n    // Get the sections that have these charts\n    const sectionsWithCharts = new Set<string>();\n    compareRunChartsFiltered.forEach((config: RunsChartsCardConfig) => {\n      if (config.metricSectionId) {\n        sectionsWithCharts.add(config.metricSectionId);\n      }\n    });\n    // Filter the sections\n    const compareRunSectionsFiltered = compareRunSections.filter((sectionConfig: ChartSectionConfig) => {\n      return sectionsWithCharts.has(sectionConfig.uuid);\n    });\n\n    if (compareRunChartsFiltered.length === 0) {\n      // Render empty in the center of the page\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            title={\n              <FormattedMessage\n                defaultMessage=\"No metric charts\"\n                description=\"Experiment page > compare runs > no metric charts\"\n              />\n            }\n            description={\n              <FormattedMessage\n                defaultMessage=\"All charts are filtered. Clear the search filter to see hidden metric charts.\"\n                description=\"Experiment page > compare runs > no metric charts > description\"\n              />\n            }\n          />\n        </>\n      );\n    }\n\n    return (\n      <>\n        <MetricChartsAccordion activeKey={compareRunSectionsFiltered.map(({ uuid }) => uuid)} disableCollapse>\n          {compareRunSectionsFiltered.map((sectionConfig: ChartSectionConfig, index: number) => {\n            const HEADING_PADDING_HEIGHT = 4;\n            const EDITABLE_LABEL_PADDING_WIDTH = 6;\n            const EDITABLE_LABEL_BORDER_WIDTH = 1;\n            const EDITABLE_LABEL_OFFSET = EDITABLE_LABEL_PADDING_WIDTH + EDITABLE_LABEL_BORDER_WIDTH;\n            // Get the charts in the section that are not deleted\n            const filteredSectionCharts = compareRunChartsFiltered.filter((config: RunsChartsCardConfig) => {\n              const section = (config as RunsChartsBarCardConfig).metricSectionId;\n              return section === sectionConfig.uuid;\n            });\n\n            const runsCompareSearchHeader = (\n              <div\n                role=\"figure\"\n                css={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  width: '100%',\n                  padding: `${HEADING_PADDING_HEIGHT}px 0px`,\n                  height: `${METRIC_CHART_SECTION_HEADER_SIZE}px`,\n                }}\n              >\n                <div\n                  css={{\n                    paddingLeft: EDITABLE_LABEL_OFFSET,\n                    whiteSpace: 'pre-wrap',\n                  }}\n                  data-testid=\"on-search-runs-compare-section-header\"\n                >\n                  {sectionConfig.name}\n                </div>\n                <div\n                  css={{\n                    padding: theme.spacing.xs,\n                    position: 'relative',\n                  }}\n                >\n                  {`(${filteredSectionCharts.length})`}\n                </div>\n              </div>\n            );\n\n            return (\n              <Accordion.Panel header={runsCompareSearchHeader} key={sectionConfig.uuid} collapsible=\"disabled\">\n                <RunsChartsSection\n                  sectionId={sectionConfig.uuid}\n                  sectionCharts={filteredSectionCharts}\n                  reorderCharts={reorderCharts}\n                  insertCharts={insertCharts}\n                  isMetricHistoryLoading={isMetricHistoryLoading}\n                  chartData={chartData}\n                  startEditChart={startEditChart}\n                  removeChart={removeChart}\n                  groupBy={groupBy}\n                  sectionIndex={index}\n                  setFullScreenChart={setFullScreenChart}\n                  autoRefreshEnabled={autoRefreshEnabled}\n                />\n              </Accordion.Panel>\n            );\n          })}\n        </MetricChartsAccordion>\n      </>\n    );\n  }\n  return (\n    <div>\n      <MetricChartsAccordion activeKey={activeKey} onActiveKeyChange={onActivePanelChange}>\n        {(compareRunSections || []).map((sectionConfig: ChartSectionConfig, index: number) => {\n          const sectionCharts = (compareRunCharts || []).filter((config: RunsChartsCardConfig) => {\n            const section = (config as RunsChartsBarCardConfig).metricSectionId;\n            return !config.deleted && section === sectionConfig.uuid;\n          });\n\n          return (\n            <Accordion.Panel\n              header={\n                <RunsChartsSectionHeader\n                  index={index}\n                  section={sectionConfig}\n                  onDeleteSection={deleteSection}\n                  onAddSection={addSection}\n                  editSection={editSection}\n                  onSetEditSection={setEditSection}\n                  onSetSectionName={setSectionName}\n                  sectionChartsLength={sectionCharts.length}\n                  addNewChartCard={addNewChartCard}\n                  onSectionReorder={sectionReorder}\n                  isExpanded={activeKey.includes(sectionConfig.uuid)}\n                  supportedChartTypes={supportedChartTypes}\n                />\n              }\n              key={sectionConfig.uuid}\n            >\n              <RunsChartsSection\n                sectionId={sectionConfig.uuid}\n                sectionCharts={sectionCharts}\n                reorderCharts={reorderCharts}\n                insertCharts={insertCharts}\n                isMetricHistoryLoading={isMetricHistoryLoading}\n                chartData={chartData}\n                startEditChart={startEditChart}\n                removeChart={removeChart}\n                groupBy={groupBy}\n                sectionIndex={index}\n                setFullScreenChart={setFullScreenChart}\n                autoRefreshEnabled={autoRefreshEnabled}\n              />\n            </Accordion.Panel>\n          );\n        })}\n      </MetricChartsAccordion>\n      <div>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionaccordion.tsx_405\"\n          block\n          onClick={appendSection}\n          icon={<PlusIcon />}\n          style={{ border: 'none', marginTop: '6px' }}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add section\"\n            description=\"Experiment page > compare runs > chart section > add section bar\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useRef, useState } from 'react';\nimport { type Data, type Layout, type Config, downloadImage } from 'plotly.js';\n\nexport type ExperimentChartImageDownloadFileFormat = 'svg' | 'png';\nexport type ExperimentChartImageDownloadHandler = (\n  format: ExperimentChartImageDownloadFileFormat,\n  chartTitle: string,\n) => void;\n\nconst experimentChartImageDefaultDownloadLayout: Partial<Layout> = {\n  paper_bgcolor: 'white',\n  plot_bgcolor: 'white',\n};\n\nconst experimentChartImageDefaultDownloadSettings = {\n  width: 1200,\n  height: 600,\n};\n\nconst experimentChartImageDefaultDownloadPlotConfig: Partial<Config> = {\n  displaylogo: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nexport const createChartImageDownloadHandler =\n  (data: Data[], layout: Partial<Layout>) => (format: 'svg' | 'png', title: string) =>\n    downloadImage(\n      {\n        data,\n        layout: { ...layout, ...experimentChartImageDefaultDownloadLayout },\n        config: experimentChartImageDefaultDownloadPlotConfig,\n      },\n      { ...experimentChartImageDefaultDownloadSettings, format, filename: title },\n    );\n\n/**\n * Returns a memoized download handler for chart images.\n * Uses ref-based caching to ensure that the download handler is not recreated on every render.\n */\nexport const useChartImageDownloadHandler = () => {\n  const downloadHandlerRef = useRef<ExperimentChartImageDownloadHandler | null>(null);\n  const [downloadHandler, setDownloadHandler] = useState<ExperimentChartImageDownloadHandler | null>(null);\n\n  const setDownloadHandlerCached = useCallback((downloadHandler: ExperimentChartImageDownloadHandler) => {\n    downloadHandlerRef.current = downloadHandler;\n    setDownloadHandler((existingHandler: ExperimentChartImageDownloadHandler | null) => {\n      if (existingHandler) {\n        return existingHandler;\n      }\n\n      return (format: ExperimentChartImageDownloadFileFormat, chartTitle: string) =>\n        downloadHandlerRef.current?.(format, chartTitle);\n    });\n  }, []);\n\n  return [downloadHandler, setDownloadHandlerCached] as const;\n};\n","import { ImageEntity } from 'experiment-tracking/types';\nimport { RunsChartsRunData } from '../components/RunsCharts.common';\n\nexport const useImageSliderStepMarks = ({\n  data,\n  selectedImageKeys,\n}: {\n  data: RunsChartsRunData[];\n  selectedImageKeys: string[];\n}) => {\n  const stepMarks = data.reduce((acc, run: RunsChartsRunData) => {\n    for (const imageKey of Object.keys(run.images)) {\n      if (selectedImageKeys?.includes(imageKey)) {\n        const metadata = run.images[imageKey];\n        for (const meta of Object.values(metadata)) {\n          if (meta.step !== undefined) {\n            acc[meta.step] = {\n              style: { display: 'none' },\n              label: '',\n            };\n          }\n        }\n      }\n    }\n    return acc;\n  }, {} as Record<number, any>);\n\n  return {\n    stepMarks,\n    maxMark: Math.max(...Object.keys(stepMarks).map(Number)),\n    minMark: Math.min(...Object.keys(stepMarks).map(Number)),\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\n/**\n * Checks if the element is currently visible within the viewport using IntersectionObserver.\n * If \"enabled\" is set to false, the returned value will always be true.\n */\nexport const useIsInViewport = ({ enabled = true }: { enabled?: boolean } = {}) => {\n  const internalElementRef = useRef<Element | null>();\n  const saveElementRef = (ref: Element | null) => {\n    internalElementRef.current = ref;\n  };\n  const [isInViewport, setIsInViewport] = useState(!enabled);\n  // Let's use IntersectionObserver to determine if the element is displayed within the viewport\n  useEffect(() => {\n    // If \"enabled\" is set to false or IntersectionObserver is not available, assume that the element is visible\n    if (!enabled || !internalElementRef.current || !window.IntersectionObserver) {\n      setIsInViewport(true);\n      return () => {};\n    }\n\n    // Set the state flag only if element is in viewport\n    const intersectionObserver = new IntersectionObserver(([entry]) => {\n      setIsInViewport(entry.isIntersecting);\n    });\n\n    // Run intersection observer as a macrotask, makes it wait for the next tick\n    // before start observing the element to make sure the observer will register the element\n    setTimeout(() => {\n      if (internalElementRef.current) {\n        intersectionObserver.observe(internalElementRef.current);\n      }\n    });\n\n    return () => intersectionObserver.disconnect();\n  }, [enabled]);\n\n  return { isInViewport, elementRef: saveElementRef };\n};\n","import type { PlotMouseEvent } from 'plotly.js';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n * so in order to achieve updated behavior we need to wrap each onHover callback with an\n * immutable callback that will call mutable implementation.\n */\nexport const useMutableChartHoverCallback = <T extends (event: Readonly<PlotMouseEvent>) => void>(callback: T) => {\n  const mutableRef = useRef<T>(callback);\n\n  useEffect(() => {\n    mutableRef.current = callback;\n  }, [callback]);\n\n  return (event: Readonly<PlotMouseEvent>) => {\n    mutableRef.current(event);\n  };\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { RunsChartsRunData } from '../components/RunsCharts.common';\n\n/**\n * Function used to highlight particular trace in the experiment runs chart,\n * for both hover and select scenarios.\n * Since implementation varies across chart types, the function is curryable where\n * two first-level parameters determine the target SVG selector paths to the trace within\n * target chart type.\n *\n * @param traceSelector selector path to the trace for a particular chart type\n * @param parentSelector selector path to the traces container for a particular chart type\n */\nconst highlightChartTracesFn =\n  (traceSelector: string, parentSelector: string) =>\n  /**\n   * @param parent a HTML element containing the chart\n   * @param hoverIndex index of a trace that should be hover-higlighted, set -1 to remove highlight\n   * @param selectIndex index of a trace that should be select-higlighted, set -1 to remove highlight\n   */\n  (parent: HTMLElement, hoverIndex: number, selectIndex: number, numberOfBands = 0) => {\n    const deselected = hoverIndex === -1 && selectIndex === -1;\n\n    parent.querySelector('.is-hover-highlight')?.classList.remove('is-hover-highlight');\n    if (hoverIndex > -1) {\n      parent.querySelectorAll(traceSelector)[hoverIndex]?.classList.add('is-hover-highlight');\n    }\n\n    parent.querySelector('.is-selection-highlight')?.classList.remove('is-selection-highlight');\n    if (selectIndex > -1) {\n      parent.querySelectorAll(traceSelector)[selectIndex]?.classList.add('is-selection-highlight');\n    }\n\n    if (numberOfBands > 0) {\n      const bandTraceIndex =\n        selectIndex > -1 ? selectIndex - numberOfBands : hoverIndex > -1 ? hoverIndex - numberOfBands : -1;\n      parent.querySelectorAll(traceSelector).forEach((e, index) => {\n        e.classList.toggle('is-band', index >= 0 && index < numberOfBands);\n        e.classList.toggle('is-band-highlighted', index === bandTraceIndex);\n      });\n    } else {\n      parent.querySelectorAll(traceSelector).forEach((e) => e.classList.remove('is-band'));\n    }\n\n    if (deselected) {\n      parent.querySelector(parentSelector)?.classList.remove('is-highlight');\n    } else {\n      parent.querySelector(parentSelector)?.classList.add('is-highlight');\n    }\n  };\n\n/**\n * Type-specific implementation of highlightChartTracesFn for bar charts\n */\nexport const highlightBarTraces = highlightChartTracesFn('svg .trace.bars g.point', '.trace.bars');\n\n/**\n * Type-specific implementation of highlightChartTracesFn for line charts\n */\nexport const highlightLineTraces = highlightChartTracesFn('svg .scatterlayer g.trace', '.scatterlayer');\n\n/**\n * Type-specific implementation of highlightChartTracesFn for scatter and contour charts\n */\nexport const highlightScatterTraces = highlightChartTracesFn('svg .scatterlayer path.point', '.trace.scatter');\n\n/**\n * This hook houses and exports various mechanisms necessary for highlighting traces\n * in experiment runs charts.\n *\n * @param containerDiv HTML element containing the chart\n * @param selectedRunUuid currently selected run UUID (set to -1 if none)\n * @param runsData array containing run informations, should be the same order as provided to the chart\n * @param highlightFn a styling function that will be called when the trace should be (un)highlighted, please refer to `highlightCallbackFn()`\n */\nexport const useRunsChartTraceHighlight = (\n  containerDiv: HTMLElement | null,\n  selectedRunUuid: string | null | undefined,\n  runsData: { uuid?: string }[],\n  highlightFn: ReturnType<typeof highlightChartTracesFn>,\n  numberOfBands = 0,\n) => {\n  const selectedTraceIndex = useMemo(() => {\n    if (!containerDiv || !selectedRunUuid) {\n      return -1;\n    }\n    return runsData.findIndex(({ uuid }) => uuid === selectedRunUuid);\n  }, [runsData, containerDiv, selectedRunUuid]);\n\n  const [hoveredPointIndex, setHoveredPointIndex] = useState(-1);\n\n  useEffect(() => {\n    if (!containerDiv) {\n      return;\n    }\n    highlightFn(containerDiv, hoveredPointIndex, selectedTraceIndex, numberOfBands);\n  }, [highlightFn, containerDiv, selectedTraceIndex, hoveredPointIndex, numberOfBands]);\n\n  return { selectedTraceIndex, hoveredPointIndex, setHoveredPointIndex };\n};\n","import { Interpolation, Theme } from '@emotion/react';\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../components/RunsMetricsLinePlot';\nimport { RunsMetricsBarPlotHoverData } from '../components/RunsMetricsBarPlot';\nimport { shouldEnableDeepLearningUIPhase3 } from '../../../../common/utils/FeatureUtils';\n\nexport interface RunsChartsTooltipBodyProps<TContext = any, TChartData = any, THoverData = any> {\n  runUuid: string;\n  hoverData: THoverData;\n  chartData: TChartData;\n  contextData: TContext;\n  closeContextMenu: () => void;\n  isHovering?: boolean;\n  mode: RunsChartsTooltipMode;\n}\n\nexport interface RunsChartsChartMouseEvent {\n  x: number;\n  y: number;\n  originalEvent?: MouseEvent;\n}\n\nexport enum RunsChartsTooltipMode {\n  Simple = 1,\n  MultipleTracesWithScanline = 2,\n}\n\nexport type RunsChartsTooltipBodyComponent<C = any, T = any> = React.ComponentType<RunsChartsTooltipBodyProps<C, T>>;\n\nconst RunsChartsTooltipContext = React.createContext<{\n  selectedRunUuid: string | null;\n  closeContextMenu: () => void;\n  resetTooltip: () => void;\n  destroyTooltip: () => void;\n  updateTooltip: (\n    runUuid: string,\n    mode: RunsChartsTooltipMode,\n    chartData?: any,\n    event?: RunsChartsChartMouseEvent,\n    additionalData?: any,\n  ) => void;\n} | null>(null);\n\nexport enum ContextMenuVisibility {\n  HIDDEN,\n  HOVER,\n  VISIBLE,\n}\n\nexport const containsMultipleRunsTooltipData = (\n  hoverData: RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData,\n): hoverData is RunsCompareMultipleTracesTooltipData => hoverData && 'tooltipLegendItems' in hoverData;\n\n/**\n * Extract first ancestor HTML element in the hierarchy, even if the target is an SVG element.\n * Necessary for proper behavior of '.contains()'\n */\nconst extractHTMLAncestorElement = (element: Element | EventTarget | null) => {\n  if (element === null || !(element instanceof Element)) {\n    return null;\n  }\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  let currentElement: Element | null = element;\n  while (currentElement && !(currentElement instanceof HTMLElement)) {\n    currentElement = currentElement.parentElement;\n  }\n\n  return currentElement;\n};\n\n/**\n * Context and DOM container necessary for chart context menu to work.\n * Can wrap multiple charts.\n */\nexport const RunsChartsTooltipWrapper = <\n  // Type for the context data passed to the tooltip, e.g. list of all runs\n  TContext = any,\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  THover = any,\n>({\n  className,\n  children,\n  contextData,\n  component: Component,\n  hoverOnly = false,\n}: React.PropsWithChildren<{\n  className?: string;\n  contextData: TContext;\n  component: React.ComponentType<RunsChartsTooltipBodyProps<TContext, THover>>;\n  hoverOnly?: boolean;\n}>) => {\n  // A reference to the viewport-wide element containing the context menu\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // A reference to the tooltip/context-menu element\n  const ctxMenuRef = useRef<HTMLDivElement>(null);\n\n  // Mutable value containing current mouse position\n  const currentPos = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const usingImprovedClickMechanism = shouldEnableDeepLearningUIPhase3();\n\n  // Mutable value containing current snapped mouse position, provided externally by the tooltip data providers\n  // Used instead of `currentPos` when the tooltip is in the \"multiple runs\" mode\n  const currentSnappedCoordinates = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const [mode, setMode] = useState<RunsChartsTooltipMode>(RunsChartsTooltipMode.Simple);\n\n  // Current visibility of the tooltip/context-menu\n  const [contextMenuShown, setContextMenuShown] = useState<ContextMenuVisibility>(ContextMenuVisibility.HIDDEN);\n\n  const [tooltipDisplayParams, setTooltipDisplayParams] = useState<any | null>(null);\n  const [hoveredRunUuid, setHoveredRunUuid] = useState<string>('');\n\n  // Apart from run uuid, It's also possible to set bonus axis data (helpful for line charts with data lineage)\n  const [additionalAxisData, setAdditionalAxisData] = useState<any>(null);\n\n  // Stores data about the run that has been clicked, but mouse has not been released.\n  const focusedRunData = useRef<{ x: number; y: number; runUuid: string } | null>(null);\n\n  // Mutable version of certain state values, used in processes outside the React event lifecycle\n  const mutableContextMenuShownRef = useRef<ContextMenuVisibility>(contextMenuShown);\n  const mutableHoveredRunUuid = useRef(hoveredRunUuid);\n  const mutableTooltipDisplayParams = useRef(tooltipDisplayParams);\n  const mutableAdditionalAxisData = useRef(additionalAxisData);\n\n  // This method applies the tooltip position basing on the mouse position\n  const applyPositioning = useCallback(\n    (isChangingVisibilityMode = false) => {\n      if (!ctxMenuRef.current || !containerRef.current) {\n        return;\n      }\n\n      // For the X coordinate, If the tooltip is in the \"multiple runs\" mode, use the snapped coordinates.\n      // Otherwise, use the current mouse position.\n      let targetX =\n        mode === RunsChartsTooltipMode.MultipleTracesWithScanline\n          ? currentSnappedCoordinates.current.x\n          : currentPos.current.x;\n\n      let targetY = currentPos.current.y;\n\n      const currentCtxMenu = ctxMenuRef.current;\n      const containerRect = containerRef.current.getBoundingClientRect();\n\n      if (mode === RunsChartsTooltipMode.MultipleTracesWithScanline) {\n        // In particular cases, the tooltip container can not take entire viewport size\n        // so we need to adjust the position of the tooltip\n        targetX -= containerRect.x;\n        targetY -= containerRect.y;\n      }\n\n      ctxMenuRef.current.style.left = '0px';\n      ctxMenuRef.current.style.top = '0px';\n      ctxMenuRef.current.style.transform = `translate3d(${targetX + 1}px, ${targetY + 1}px, 0)`;\n\n      // This function is used to reposition the tooltip if it's out of the viewport\n      const reposition = () => {\n        const menuRect = currentCtxMenu.getBoundingClientRect();\n\n        if (targetX + menuRect.width >= containerRect.width) {\n          targetX -= menuRect.width;\n        }\n\n        if (targetY + menuRect.height >= containerRect.height) {\n          targetY -= menuRect.height;\n        }\n\n        currentCtxMenu.style.transform = `translate3d(${targetX + 1}px, ${targetY + 1}px, 0)`;\n      };\n\n      // If the tooltip changes it's visibility mode during the process, defer repositioning to the next frame\n      // to make sure that the position is correct after possible change of the tooltip size.\n      // Otherwise, reposition immediately to save computation cycles.\n      if (isChangingVisibilityMode) {\n        requestAnimationFrame(reposition);\n      } else {\n        reposition();\n      }\n    },\n    [mode],\n  );\n\n  // Save mutable visibility each time a stateful one changes\n  useEffect(() => {\n    mutableContextMenuShownRef.current = contextMenuShown;\n  }, [contextMenuShown]);\n\n  // This function returns X and Y of the target element relative to the container\n  const getCoordinatesForTargetElement = useCallback((targetElement: HTMLElement, event: MouseEvent) => {\n    const targetRect = targetElement.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect() || { left: 0, top: 0 };\n    const x = event.offsetX + (targetRect.left - containerRect.left);\n    const y = event.offsetY + (targetRect.top - containerRect.top);\n    return { x, y };\n  }, []);\n\n  const mouseMove: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      // Apply only if the tooltip is in the hover mode\n      if (\n        mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER &&\n        ctxMenuRef.current &&\n        containerRef.current\n      ) {\n        focusedRunData.current = null;\n        const targetElement = extractHTMLAncestorElement(event.target);\n        if (targetElement) {\n          currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n          applyPositioning();\n        }\n      }\n    },\n    [applyPositioning, getCoordinatesForTargetElement],\n  );\n\n  // This callback is being fired on every new run being hovered\n  const updateTooltip = useCallback(\n    (\n      runUuid: string,\n      mode: RunsChartsTooltipMode,\n      chartData?: any,\n      event?: RunsChartsChartMouseEvent,\n      additionalRunData?: any,\n    ) => {\n      mutableHoveredRunUuid.current = runUuid;\n      mutableTooltipDisplayParams.current = chartData;\n      mutableAdditionalAxisData.current = additionalRunData;\n\n      // If the tooltip is visible and hardwired to the position, don't change it\n      if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      // Update the event-specific data in the state\n      setTooltipDisplayParams(chartData);\n\n      // If the mouse button has been clicked on a run but hover\n      // has been lost, do nothing\n      if (!runUuid && focusedRunData.current?.runUuid) {\n        return;\n      }\n\n      if (mode === RunsChartsTooltipMode.MultipleTracesWithScanline) {\n        currentSnappedCoordinates.current.x = event?.x || 0;\n      }\n\n      // Set the mode - single run or multiple runs\n      setMode(mode);\n\n      // Update the currently hovered run\n      setHoveredRunUuid((currentRunUuid) => {\n        if (additionalRunData) {\n          setAdditionalAxisData(additionalRunData);\n        }\n        // If the tooltip was hidden or it's shown but it's another run,\n        // make sure that the state is updated\n        if (\n          mutableContextMenuShownRef.current === ContextMenuVisibility.HIDDEN ||\n          (mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER && runUuid !== currentRunUuid)\n        ) {\n          setContextMenuShown(ContextMenuVisibility.HOVER);\n          return runUuid;\n        }\n        return currentRunUuid;\n      });\n    },\n    [],\n  );\n\n  const mouseDownCapture: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (hoverOnly) {\n        return;\n      }\n      // Saves the current position and hovered run ID after lowering the mouse button,\n      // we use it afterwards to confirm that user has clicked on the same run and scrubbing/zooming\n      // didn't occur in the meanwhile\n      if (event.button === 0 && mutableHoveredRunUuid.current) {\n        focusedRunData.current = {\n          x: event.pageX,\n          y: event.pageY,\n          runUuid: mutableHoveredRunUuid.current,\n        };\n      }\n    },\n    [hoverOnly],\n  );\n\n  // Callback for the click event for the tooltip area, checks if context menu needs to be shown.\n  // We're not using `mouseup` because plotly.js hijacks the event by appending drag cover to the document on `mousedown`.\n  const tooltipAreaClicked: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (hoverOnly) {\n        return;\n      }\n\n      const clickedInTheSamePlace = () => {\n        if (!usingImprovedClickMechanism) {\n          return (\n            focusedRunData.current?.runUuid &&\n            event.pageX === focusedRunData.current.x &&\n            event.pageY === focusedRunData.current.y\n          );\n        }\n        const epsilonPixels = 5;\n\n        return (\n          focusedRunData.current?.runUuid &&\n          Math.abs(event.pageX - focusedRunData.current.x) < epsilonPixels &&\n          Math.abs(event.pageY - focusedRunData.current.y) < epsilonPixels\n        );\n      };\n\n      // We're interested in displaying the context menu only if\n      // mouse is in the same position as when lowering the button,\n      // this way we won't display it when zooming on the chart.\n      if (focusedRunData.current && clickedInTheSamePlace()) {\n        // If the context menu is already visible, we need to reposition it and provide\n        // the updated run UUID\n        if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n          setHoveredRunUuid(focusedRunData.current.runUuid);\n          setAdditionalAxisData(mutableAdditionalAxisData.current);\n          const targetElement = extractHTMLAncestorElement(event.nativeEvent.target);\n          if (targetElement) {\n            currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n            applyPositioning(true);\n          }\n        } else {\n          // If the context menu was not visible before (it was a tooltip), just enable it.\n          setContextMenuShown(ContextMenuVisibility.VISIBLE);\n          applyPositioning(true);\n        }\n        event.stopPropagation();\n      }\n      // Since the mouse button is up, reset the currently focused run\n      focusedRunData.current = null;\n    },\n    [applyPositioning, hoverOnly, getCoordinatesForTargetElement, usingImprovedClickMechanism],\n  );\n\n  // Exposed function used to hide the context menu\n  const closeContextMenu = useCallback(() => setContextMenuShown(ContextMenuVisibility.HIDDEN), []);\n\n  // Set up main listeners in the useLayoutEffect hook\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return undefined;\n    }\n\n    // Find the DOM root - it can be either document or a shadow root\n    const domRoot = containerRef.current.getRootNode() as Document;\n\n    // This function is being called on every click in the document,\n    // it's used to dismiss the shown context menu\n    const rootClickListener = (e: MouseEvent) => {\n      // We're interested only in dismissing context menu mode, tooltip is fine\n      if (mutableContextMenuShownRef.current !== ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      const targetElement = extractHTMLAncestorElement(e.target);\n\n      if (!targetElement) {\n        return;\n      }\n\n      // Check if the click event occurred within the\n      // context menu\n      const contextMenuClicked =\n        targetElement instanceof HTMLElement &&\n        ctxMenuRef?.current instanceof HTMLElement &&\n        ctxMenuRef.current.contains(targetElement);\n\n      // Dismiss the context menu only if click didn't occur on\n      // the context menu content or on another run\n      if (!contextMenuClicked && !focusedRunData.current?.runUuid) {\n        setContextMenuShown(ContextMenuVisibility.HIDDEN);\n      }\n    };\n    domRoot.addEventListener('click', rootClickListener, { capture: true });\n\n    return () => {\n      domRoot.removeEventListener('click', rootClickListener, { capture: true });\n    };\n  }, [getCoordinatesForTargetElement, applyPositioning]);\n\n  // Callback used to reset the tooltip, fired when the mouse leaves the run\n  const resetTooltip = useCallback(() => {\n    mutableHoveredRunUuid.current = '';\n    if (focusedRunData.current?.runUuid || mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n      return;\n    }\n    setHoveredRunUuid('');\n    setContextMenuShown(ContextMenuVisibility.HIDDEN);\n  }, []);\n\n  // Callback used to remove the tooltip,\n  const destroyTooltip = useCallback((force = false) => {\n    mutableHoveredRunUuid.current = '';\n    setHoveredRunUuid('');\n    setContextMenuShown(ContextMenuVisibility.HIDDEN);\n  }, []);\n\n  // Export the currently selected run ID. Set to \"null\" if there is nothing selected.\n  const selectedRunUuid = useMemo(() => {\n    if (contextMenuShown !== ContextMenuVisibility.VISIBLE) {\n      return null;\n    }\n    return hoveredRunUuid;\n  }, [contextMenuShown, hoveredRunUuid]);\n\n  const contextValue = useMemo(\n    () => ({ updateTooltip, resetTooltip, destroyTooltip, selectedRunUuid, closeContextMenu }),\n    [updateTooltip, resetTooltip, destroyTooltip, selectedRunUuid, closeContextMenu],\n  );\n\n  // We're displaying tooltip if:\n  // - it's not in the hidden mode\n  // - it's in the single run tooltip mode and hovered run is not empty\n  // - it's in the multiple runs tooltip mode\n  const displayTooltip =\n    contextMenuShown !== ContextMenuVisibility.HIDDEN &&\n    (mode === RunsChartsTooltipMode.MultipleTracesWithScanline || hoveredRunUuid !== '');\n\n  return (\n    <RunsChartsTooltipContext.Provider value={contextValue}>\n      {/* The element below wraps all the children (where charts are expected to be mounted)\n      and tracks mouse movement inside */}\n      <div\n        onMouseMove={mouseMove}\n        onMouseDownCapture={mouseDownCapture}\n        onClickCapture={tooltipAreaClicked}\n        css={{ height: '100%' }}\n      >\n        {children}\n      </div>\n      {/* The element below houses the tooltip/context menu */}\n      <div css={styles.contextMenuContainer} className={className} ref={containerRef}>\n        {displayTooltip && (\n          <div\n            ref={ctxMenuRef}\n            css={styles.contextMenuWrapper}\n            data-testid=\"tooltip-container\"\n            style={{\n              userSelect: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'unset',\n              pointerEvents: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'all',\n            }}\n          >\n            {/* A tooltip body component passed from the props */}\n            <Component\n              runUuid={hoveredRunUuid}\n              hoverData={additionalAxisData}\n              chartData={tooltipDisplayParams}\n              contextData={contextData}\n              isHovering={contextMenuShown === ContextMenuVisibility.HOVER}\n              closeContextMenu={closeContextMenu}\n              mode={mode}\n            />\n          </div>\n        )}\n      </div>\n    </RunsChartsTooltipContext.Provider>\n  );\n};\n\n/**\n * This hook is used to wire up tooltip to particular experiment runs chart.\n * Returns \"setTooltip\" and \"resetTooltip\" functions that should be called\n * upon chart's \"onHover\" and \"onUnhover\" events. \"setTooltip\" function consumes\n * the runUuid that was hovered on.\n */\nexport const useRunsChartsTooltip = <\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  TChart = any,\n  TAxisData = any,\n>(\n  chartData?: TChart,\n  mode = RunsChartsTooltipMode.Simple,\n) => {\n  const contextValue = useContext(RunsChartsTooltipContext);\n\n  if (!contextValue) {\n    throw new Error(\n      'You must invoke useRunsChartsTooltip() in a component being ancestor of <RunsChartsTooltipWrapper />!',\n    );\n  }\n\n  const { updateTooltip, resetTooltip, selectedRunUuid, closeContextMenu, destroyTooltip } = contextValue;\n\n  const setTooltip = useCallback(\n    (runUuid = '', event?: RunsChartsChartMouseEvent, additionalAxisData?: TAxisData) => {\n      updateTooltip(runUuid, mode, chartData, event, additionalAxisData);\n    },\n    [updateTooltip, chartData, mode],\n  );\n\n  return { setTooltip, resetTooltip, selectedRunUuid, closeContextMenu, destroyTooltip };\n};\n\nconst styles = {\n  contextMenuContainer: {\n    overflow: 'hidden',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    position: 'fixed',\n    pointerEvents: 'none',\n  } as Interpolation<Theme>,\n  contextMenuWrapper: (theme: Theme) => ({\n    zIndex: 1,\n    position: 'absolute' as const,\n    padding: theme.spacing.sm,\n    backgroundColor: theme.colors.backgroundPrimary,\n    border: `1px solid ${theme.colors.border}`,\n    left: -999,\n    top: -999,\n    borderRadius: theme.general.borderRadiusBase,\n    boxShadow: theme.general.shadowLow,\n  }),\n  overlayElement: (): Interpolation<Theme> => ({\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'transparent',\n    },\n  }),\n};\n","import React from 'react';\nimport { ExperimentRunsChartsUIConfiguration } from '../../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { getUUID } from '../../../../common/utils/ActionUtils';\n\nexport type RunsChartsUIConfigurationSetter = (\n  state: ExperimentRunsChartsUIConfiguration,\n) => ExperimentRunsChartsUIConfiguration;\n\nconst RunsChartsUIConfigurationContext = React.createContext<(stateSetter: RunsChartsUIConfigurationSetter) => void>(\n  () => {},\n);\n\n/**\n * Creates a localized context to manage the UI state of the runs charts.\n * Accepts a function to update the state object, coming from simple state setter or a reducer.\n */\nexport const RunsChartsUIConfigurationContextProvider = ({\n  children,\n  updateChartsUIState,\n}: {\n  children: React.ReactNode;\n  updateChartsUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => (\n  <RunsChartsUIConfigurationContext.Provider value={updateChartsUIState}>\n    {children}\n  </RunsChartsUIConfigurationContext.Provider>\n);\n\n/**\n * Returns a function to update the current overarching UI state of the runs charts.\n */\nexport const useUpdateRunsChartsUIConfiguration = () => React.useContext(RunsChartsUIConfigurationContext);\n\nexport const useReorderRunsChartsFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  return (sourceChartUuid: string, targetChartUuid: string) => {\n    updateChartsUIState((current) => {\n      const newChartsOrder = current.compareRunCharts?.slice();\n      const newSectionsState = current.compareRunSections?.slice();\n      if (!newChartsOrder || !newSectionsState) {\n        return current;\n      }\n\n      const indexSource = newChartsOrder.findIndex((c) => c.uuid === sourceChartUuid);\n      const indexTarget = newChartsOrder.findIndex((c) => c.uuid === targetChartUuid);\n\n      // If one of the charts is not found, do nothing\n      if (indexSource < 0 || indexTarget < 0) {\n        return current;\n      }\n\n      const sourceChart = newChartsOrder[indexSource];\n      const targetChart = newChartsOrder[indexTarget];\n\n      const isSameMetricSection = targetChart.metricSectionId === sourceChart.metricSectionId;\n\n      // Update the sections to indicate that the charts have been reordered\n      const sourceSectionIdx = newSectionsState.findIndex((c) => c.uuid === sourceChart.metricSectionId);\n      const targetSectionIdx = newSectionsState.findIndex((c) => c.uuid === targetChart.metricSectionId);\n      newSectionsState.splice(sourceSectionIdx, 1, { ...newSectionsState[sourceSectionIdx], isReordered: true });\n      newSectionsState.splice(targetSectionIdx, 1, { ...newSectionsState[targetSectionIdx], isReordered: true });\n\n      // Set new chart metric group\n      const newSourceChart = { ...sourceChart };\n      newSourceChart.metricSectionId = targetChart.metricSectionId;\n\n      // Remove the source graph from array\n      newChartsOrder.splice(indexSource, 1);\n      if (!isSameMetricSection) {\n        // Insert the source graph into target\n        newChartsOrder.splice(\n          newChartsOrder.findIndex((c) => c.uuid === targetChartUuid),\n          0,\n          newSourceChart,\n        );\n      } else {\n        // The indexTarget is not neccessarily the target now, but it will work as the insert index\n        newChartsOrder.splice(indexTarget, 0, newSourceChart);\n      }\n\n      return {\n        ...current,\n        compareRunCharts: newChartsOrder,\n        compareRunSections: newSectionsState,\n      };\n    });\n  };\n};\n\nexport const useConfirmChartCardConfigurationFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  return (configuredCard: Partial<RunsChartsCardConfig>) => {\n    const serializedCard = RunsChartsCardConfig.serialize({\n      ...configuredCard,\n      uuid: getUUID(),\n    });\n\n    // Creating new chart\n    if (!configuredCard.uuid) {\n      updateChartsUIState((current) => ({\n        ...current,\n        // This condition ensures that chart collection will remain undefined if not set previously\n        compareRunCharts: current.compareRunCharts && [...current.compareRunCharts, serializedCard],\n      }));\n    } /* Editing existing chart */ else {\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: current.compareRunCharts?.map((existingChartCard) => {\n          if (existingChartCard.uuid === configuredCard.uuid) {\n            return serializedCard;\n          }\n          return existingChartCard;\n        }),\n      }));\n    }\n  };\n};\n\nexport const useInsertRunsChartsFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  return (sourceChartUuid: string, targetSectionId: string) => {\n    updateChartsUIState((current) => {\n      const newChartsOrder = current.compareRunCharts?.slice();\n      const newSectionsState = current.compareRunSections?.slice();\n      if (!newChartsOrder || !newSectionsState) {\n        return current;\n      }\n\n      const indexSource = newChartsOrder.findIndex((c) => c.uuid === sourceChartUuid);\n      if (indexSource < 0) {\n        return current;\n      }\n      const sourceChart = newChartsOrder[indexSource];\n      // Set new chart metric group\n      const newSourceChart = { ...sourceChart };\n      newSourceChart.metricSectionId = targetSectionId;\n\n      // Update the sections to indicate that the charts have been reordered\n      const sourceSectionIdx = newSectionsState.findIndex((c) => c.uuid === sourceChart.metricSectionId);\n      const targetSectionIdx = newSectionsState.findIndex((c) => c.uuid === targetSectionId);\n      newSectionsState.splice(sourceSectionIdx, 1, { ...newSectionsState[sourceSectionIdx], isReordered: true });\n      newSectionsState.splice(targetSectionIdx, 1, { ...newSectionsState[targetSectionIdx], isReordered: true });\n\n      // Remove the source graph from array and append\n      newChartsOrder.splice(indexSource, 1);\n      newChartsOrder.push(newSourceChart);\n\n      return {\n        ...current,\n        compareRunCharts: newChartsOrder,\n        compareRunSections: newSectionsState,\n      };\n    });\n  };\n};\n\nexport const useRemoveRunsChartFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  return (configToDelete: RunsChartsCardConfig) => {\n    updateChartsUIState((current) => ({\n      ...current,\n      compareRunCharts: configToDelete.isGenerated\n        ? current.compareRunCharts?.map((setup) =>\n            setup.uuid === configToDelete.uuid ? { ...setup, deleted: true } : setup,\n          )\n        : current.compareRunCharts?.filter((setup) => setup.uuid !== configToDelete.uuid),\n    }));\n  };\n};\n","import { chunk, keyBy } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { createChartAxisRangeKey } from '../components/RunsCharts.common';\nimport { getSampledMetricHistoryBulkAction } from '../../../sdk/SampledMetricHistoryService';\nimport { SampledMetricsByRunUuidState } from 'experiment-tracking/types';\nimport { EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL } from '../../../utils/MetricsUtils';\nimport Utils from '../../../../common/utils/Utils';\n\ntype SampledMetricData = SampledMetricsByRunUuidState[string][string][string];\n\nexport type SampledMetricsByRun = {\n  runUuid: string;\n} & {\n  [metricKey: string]: SampledMetricData;\n};\n\nconst SAMPLED_METRIC_HISTORY_API_RUN_LIMIT = 100;\n/**\n *\n * Automatically fetches sampled metric history for runs, used in run runs charts.\n * After updating list of metrics or runs, optimizes the request and fetches\n * only the missing entries.\n */\nexport const useSampledMetricHistory = (params: {\n  runUuids: string[];\n  metricKeys: string[];\n  maxResults?: number;\n  range?: [number, number];\n  enabled?: boolean;\n  autoRefreshEnabled?: boolean;\n}) => {\n  const { metricKeys, runUuids, enabled, maxResults, range, autoRefreshEnabled } = params;\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const { resultsByRunUuid, isLoading, isRefreshing } = useSelector((store: ReduxState) => {\n    const rangeKey = createChartAxisRangeKey(range);\n\n    let anyRunRefreshing = false;\n    let anyRunLoading = false;\n\n    const returnValues: SampledMetricsByRun[] = runUuids.map((runUuid) => {\n      const metricsByMetricKey = metricKeys.reduce(\n        (dataByMetricKey: { [key: string]: SampledMetricData }, metricKey: string) => {\n          const runMetricData = store.entities.sampledMetricsByRunUuid[runUuid]?.[metricKey]?.[rangeKey];\n\n          if (!runMetricData) {\n            return dataByMetricKey;\n          }\n\n          anyRunLoading = anyRunLoading || Boolean(runMetricData.loading);\n          anyRunRefreshing = anyRunRefreshing || Boolean(runMetricData.refreshing);\n\n          dataByMetricKey[metricKey] = runMetricData;\n          return dataByMetricKey;\n        },\n        {},\n      );\n\n      return {\n        runUuid,\n        ...metricsByMetricKey,\n      };\n    });\n\n    return {\n      isLoading: anyRunLoading,\n      isRefreshing: anyRunRefreshing,\n      resultsByRunUuid: keyBy(returnValues, 'runUuid'),\n    };\n  });\n\n  const refreshFn = useCallback(() => {\n    metricKeys.forEach((metricKey) => {\n      chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).forEach((runUuidsChunk) => {\n        const action = getSampledMetricHistoryBulkAction(runUuidsChunk, metricKey, maxResults, range, 'all');\n        dispatch(action);\n      });\n    });\n  }, [dispatch, maxResults, runUuids, metricKeys, range]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && params.enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled && params.enabled;\n\n  // Serialize runUuids to a string to use as a dependency in the effect,\n  // directly used runUuids can cause unnecessary re-fetches\n  const runUuidsSerialized = useMemo(() => runUuids.join(','), [runUuids]);\n\n  // Regular single fetch effect with no auto-refresh capabilities. Used if auto-refresh is disabled.\n  useEffect(() => {\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    metricKeys.forEach((metricKey) => {\n      chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).forEach((runUuidsChunk) => {\n        const action = getSampledMetricHistoryBulkAction(runUuidsChunk, metricKey, maxResults, range);\n        dispatch(action);\n      });\n    });\n  }, [dispatch, maxResults, runUuids, metricKeys, range, enabled, autoRefreshEnabled]);\n\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    // Base fetching function, used for both initial call and subsequent auto-refresh calls\n    const fetchMetricsFn = async (isAutoRefreshing = false) => {\n      const runUuids = runUuidsSerialized.split(',').filter((runUuid: string) => runUuid !== '');\n      await Promise.all(\n        metricKeys.map(async (metricKey) =>\n          Promise.all(\n            chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).map(async (runUuidsChunk) =>\n              dispatch(\n                getSampledMetricHistoryBulkAction(\n                  runUuidsChunk,\n                  metricKey,\n                  maxResults,\n                  range,\n                  isAutoRefreshing ? 'auto' : undefined,\n                ),\n              ),\n            ),\n          ),\n        ),\n      );\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchMetricsFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchMetricsFn().then(scheduleRefresh);\n\n    return () => {\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, maxResults, runUuidsSerialized, metricKeys, range, enabled, autoRefreshEnabled]);\n\n  return { isLoading, isRefreshing, resultsByRunUuid, refresh: refreshFn };\n};\n","import type { RunsChartAxisDef, RunsChartsRunData } from './components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from './components/RunsCharts.common';\nimport { getUUID } from '../../../common/utils/ActionUtils';\nimport { MetricEntitiesByName, ChartSectionConfig } from '../../types';\nimport {\n  MLFLOW_MODEL_METRIC_PREFIX,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  DEFAULT_IMAGE_GRID_CHART_NAME,\n} from '../../constants';\nimport { isNil, uniq } from 'lodash';\n\n/**\n * Enum for all recognized chart types used in runs charts\n */\nexport enum RunsChartType {\n  BAR = 'BAR',\n  LINE = 'LINE',\n  SCATTER = 'SCATTER',\n  CONTOUR = 'CONTOUR',\n  PARALLEL = 'PARALLEL',\n  DIFFERENCE = 'DIFFERENCE',\n  IMAGE = 'IMAGE',\n}\n\nconst MIN_NUMBER_OF_STEP_FOR_LINE_COMPARISON = 1;\n\n/**\n * Simple interface corresponding to `RunsChartsCardConfig`.\n * Its role is to distinguish between stateful class instance and a simple POJO,\n * it is meant to be contained in a serializable, persisted state.\n */\nexport type SerializedRunsChartsCardConfigCard = RunsChartsCardConfig;\n\n// A function to iterate across run/group data traces and determine if any metric has multiple epochs.\n// This helps to decide if we should seed the line chart or a bar chart.\nconst dataTraceMetricsContainMultipleEpochs = (dataTrace: RunsChartsRunData, metricKey: string): boolean =>\n  Boolean(dataTrace.metrics?.[metricKey]?.step >= MIN_NUMBER_OF_STEP_FOR_LINE_COMPARISON);\n\n/**\n * Main class used for represent a single configured chart card with its type, configuration options etc.\n * Meant to be extended by various chart type classes with `type` field being frozen to a single value.\n */\nexport abstract class RunsChartsCardConfig {\n  uuid?: string;\n  type: RunsChartType = RunsChartType.BAR;\n  runsCountToCompare?: number = 10;\n  metricSectionId?: string = '';\n  deleted = false;\n  isGenerated = false;\n\n  constructor(isGenerated: boolean, uuid?: string, metricSectionId?: string) {\n    this.isGenerated = isGenerated;\n    this.uuid = uuid;\n    this.metricSectionId = metricSectionId;\n  }\n\n  /**\n   * Serializes chart entry, i.e. strips all unnecessary fields (and/or methods) so\n   * it can be saved in persistable memory.\n   */\n  static serialize(entity: Partial<RunsChartsCardConfig>): SerializedRunsChartsCardConfigCard {\n    // TODO: strip unnecessary fields if any\n    return (Object.keys(entity) as (keyof SerializedRunsChartsCardConfigCard)[]).reduce(\n      (result, key) => ({ ...result, [key]: entity[key] }),\n      {} as SerializedRunsChartsCardConfigCard,\n    );\n  }\n\n  /**\n   * Creates empty chart (card) config basing on a type.\n   * TODO: consume visible run set and determine best configuration of metrics, params etc.\n   */\n  static getEmptyChartCardByType(type: RunsChartType, isGenerated: boolean, uuid?: string, metricSectionId?: string) {\n    if (type === RunsChartType.BAR) {\n      return new RunsChartsBarCardConfig(isGenerated, uuid, metricSectionId);\n    } else if (type === RunsChartType.SCATTER) {\n      return new RunsChartsScatterCardConfig(isGenerated, uuid, metricSectionId);\n    } else if (type === RunsChartType.PARALLEL) {\n      return new RunsChartsParallelCardConfig(isGenerated, uuid, metricSectionId);\n    } else if (type === RunsChartType.LINE) {\n      return new RunsChartsLineCardConfig(isGenerated, uuid, metricSectionId);\n    } else if (type === RunsChartType.DIFFERENCE) {\n      return new RunsChartsDifferenceCardConfig(isGenerated, uuid, metricSectionId);\n    } else if (type === RunsChartType.IMAGE) {\n      return new RunsChartsImageCardConfig(isGenerated, uuid, metricSectionId);\n    } else {\n      // Must be contour\n      return new RunsChartsContourCardConfig(isGenerated, uuid, metricSectionId);\n    }\n  }\n\n  static getBaseChartConfigs(primaryMetricKey: string, runsData: RunsChartsRunData[]) {\n    const resultChartSet: RunsChartsCardConfig[] = [];\n    const MAX_NUMBER_OF_METRICS_TO_RENDER = 30;\n\n    const allMetricKeys = uniq(runsData.flatMap((run) => Object.keys(run.metrics)));\n\n    const metricsToRender: Set<string> = new Set();\n    // Add primary_metric to render first\n    if (primaryMetricKey) {\n      metricsToRender.add(primaryMetricKey);\n    }\n\n    // Adding other metrics to render\n    for (const metricsKey of allMetricKeys) {\n      metricsToRender.add(metricsKey);\n    }\n\n    // Render only first N metrics\n    const renderFirstNMetrics: string[] = [...metricsToRender].slice(0, MAX_NUMBER_OF_METRICS_TO_RENDER);\n\n    renderFirstNMetrics.forEach((metricsKey) => {\n      // If the metric has multiple epochs, add a line chart. Otherwise, add a bar chart\n      const anyRunHasMultipleEpochs = runsData.some((dataTrace) =>\n        dataTraceMetricsContainMultipleEpochs(dataTrace, metricsKey),\n      );\n      const chartType = anyRunHasMultipleEpochs ? RunsChartType.LINE : RunsChartType.BAR;\n\n      // Add a bar metric chart only if at least one metric key is detected\n      resultChartSet.push({\n        ...RunsChartsCardConfig.getEmptyChartCardByType(chartType, true, getUUID()),\n        metricKey: metricsKey,\n      } as RunsChartsBarCardConfig);\n    });\n\n    // If no other charts exist, show empty parallel coordinates plot\n    if (resultChartSet.length === 0) {\n      resultChartSet.push(RunsChartsCardConfig.getEmptyChartCardByType(RunsChartType.PARALLEL, false, getUUID()));\n    }\n\n    return resultChartSet;\n  }\n\n  // Extract chart section from metric key\n  static extractChartSectionName = (metricKey: string, delimiter = '/') => {\n    const parts = metricKey.split(delimiter);\n    const section = parts.slice(0, -1).join(delimiter);\n    if (section === MLFLOW_MODEL_METRIC_PREFIX) {\n      return MLFLOW_MODEL_METRIC_NAME;\n    } else if (section + delimiter === MLFLOW_SYSTEM_METRIC_PREFIX) {\n      return MLFLOW_SYSTEM_METRIC_NAME;\n    }\n    return section;\n  };\n\n  static getBaseChartAndSectionConfigs({\n    primaryMetricKey,\n    runsData,\n    useParallelCoordinatesChart = false,\n    enabledSectionNames = [MLFLOW_MODEL_METRIC_NAME, MLFLOW_SYSTEM_METRIC_NAME],\n    filterMetricNames,\n  }: {\n    primaryMetricKey?: string;\n    useParallelCoordinatesChart?: boolean;\n    runsData: RunsChartsRunData[];\n    enabledSectionNames?: string[];\n    filterMetricNames?: (metricName: string) => boolean;\n  }) {\n    const resultChartSet: RunsChartsCardConfig[] = [];\n\n    const allMetricKeys = uniq(runsData.flatMap((run) => Object.keys(run.metrics))).filter((name) => {\n      if (!filterMetricNames) {\n        return true;\n      }\n      return filterMetricNames(name);\n    });\n\n    const metricsToRender: Set<string> = new Set();\n    // Add primary_metric to render first\n    if (primaryMetricKey) {\n      metricsToRender.add(primaryMetricKey);\n    }\n\n    const imagesToRender = uniq(runsData.flatMap((run) => Object.keys(run.images)));\n\n    // Adding other metrics to render\n    for (const metricsKey of allMetricKeys) {\n      metricsToRender.add(metricsKey);\n    }\n\n    const sectionName2Uuid: Record<string, string> = {};\n    enabledSectionNames.forEach((sectionName) => {\n      sectionName2Uuid[sectionName] = getUUID();\n    });\n\n    [...metricsToRender, ...imagesToRender].forEach((key) => {\n      if (!sectionName2Uuid[RunsChartsCardConfig.extractChartSectionName(key)]) {\n        sectionName2Uuid[RunsChartsCardConfig.extractChartSectionName(key)] = getUUID();\n      }\n    });\n\n    Array.from(metricsToRender)\n      .sort()\n      .forEach((metricsKey) => {\n        // If the metric has multiple epochs, add a line chart. Otherwise, add a bar chart\n        const anyRunHasMultipleEpochs = runsData.some((dataTrace) =>\n          dataTraceMetricsContainMultipleEpochs(dataTrace, metricsKey),\n        );\n        const chartType = anyRunHasMultipleEpochs ? RunsChartType.LINE : RunsChartType.BAR;\n\n        const sectionId = sectionName2Uuid[RunsChartsCardConfig.extractChartSectionName(metricsKey)];\n\n        // Add a bar metric chart only if at least one metric key is detected\n        resultChartSet.push({\n          ...RunsChartsCardConfig.getEmptyChartCardByType(chartType, true, getUUID(), sectionId),\n          metricKey: metricsKey,\n        } as RunsChartsBarCardConfig);\n      });\n\n    Array.from(imagesToRender)\n      .sort()\n      .forEach((imageKey) => {\n        const chartType = RunsChartType.IMAGE;\n        const sectionId = sectionName2Uuid[RunsChartsCardConfig.extractChartSectionName(imageKey)];\n\n        // Add an image chart\n        resultChartSet.push({\n          ...RunsChartsCardConfig.getEmptyChartCardByType(chartType, true, getUUID(), sectionId),\n          imageKeys: [imageKey],\n        } as RunsChartsImageCardConfig);\n      });\n\n    // If no other charts exist, show empty parallel coordinates plot\n    if (resultChartSet.length === 0 && useParallelCoordinatesChart) {\n      const sectionId = sectionName2Uuid[MLFLOW_MODEL_METRIC_NAME];\n      resultChartSet.push(\n        RunsChartsCardConfig.getEmptyChartCardByType(RunsChartType.PARALLEL, false, getUUID(), sectionId),\n      );\n    }\n    const rest = Object.keys(sectionName2Uuid)\n      .filter((sectionName) => sectionName !== MLFLOW_MODEL_METRIC_NAME && sectionName !== MLFLOW_SYSTEM_METRIC_NAME)\n      .sort();\n\n    const sortedSectionNames = [\n      ...rest,\n      ...[MLFLOW_MODEL_METRIC_NAME, MLFLOW_SYSTEM_METRIC_NAME].filter((name) => enabledSectionNames.includes(name)),\n    ];\n\n    // Create section configs\n    const resultSectionSet: ChartSectionConfig[] = sortedSectionNames.map((sectionName) => ({\n      uuid: sectionName2Uuid[sectionName],\n      name: sectionName,\n      display: true,\n      isReordered: false,\n      deleted: false,\n      isGenerated: true,\n    }));\n\n    return { resultChartSet, resultSectionSet };\n  }\n\n  static updateChartAndSectionConfigs({\n    compareRunCharts,\n    compareRunSections,\n    isAccordionReordered,\n    runsData,\n    filterMetricNames,\n  }: {\n    compareRunCharts: RunsChartsCardConfig[];\n    compareRunSections: ChartSectionConfig[];\n    runsData: RunsChartsRunData[];\n    isAccordionReordered: boolean;\n    filterMetricNames?: (metricName: string) => boolean;\n  }) {\n    // Make copies of the current charts and sections\n    const resultChartSet: RunsChartsCardConfig[] = compareRunCharts.slice();\n    let resultSectionSet: ChartSectionConfig[] = compareRunSections.slice();\n    // Flag for whether the section or chart set have been updated\n    let isResultUpdated = false;\n\n    const allMetricKeys = uniq(runsData.flatMap((run) => Object.keys(run.metrics))).filter((name) => {\n      if (!filterMetricNames) {\n        return true;\n      }\n      return filterMetricNames(name);\n    });\n\n    const imagesToRender = uniq(runsData.flatMap((run) => Object.keys(run.images)));\n\n    // Create set of metrics to render based on runsData\n    const metricsToRender: Set<string> = new Set();\n    // Adding other metrics to render\n    for (const metricsKey of allMetricKeys) {\n      metricsToRender.add(metricsKey);\n    }\n\n    // Create sectionName2Uuid mappings from existing sections\n    const sectionName2Uuid: Record<string, string> = {};\n    compareRunSections.forEach((section) => (sectionName2Uuid[section.name] = section.uuid));\n\n    imagesToRender.forEach((imageKey) => {\n      const doesImageKeyExist =\n        resultChartSet.findIndex((chart) => {\n          const chartImageKeys = (chart as RunsChartsImageCardConfig).imageKeys;\n          return chartImageKeys ? chartImageKeys.length === 1 && chartImageKeys.includes(imageKey) : false;\n        }) >= 0;\n\n      const chartType = RunsChartType.IMAGE;\n      if (!doesImageKeyExist) {\n        // result is updated when there is a new image key\n        isResultUpdated = true;\n\n        // Insert a new UUID if section doesn't exist\n        const sectionName = RunsChartsCardConfig.extractChartSectionName(imageKey);\n        if (!sectionName2Uuid[sectionName]) {\n          sectionName2Uuid[sectionName] = getUUID();\n        }\n\n        // Get section for imageKey and check if it has been reordered\n        const sectionId = sectionName2Uuid[sectionName];\n        // If section is undefined, it may be a new section, so its not reordered\n        const section = resultSectionSet.find((section) => section.uuid === sectionId);\n        const isSectionReordered = section ? section.isReordered : false;\n\n        const newChartConfig = {\n          ...RunsChartsCardConfig.getEmptyChartCardByType(chartType, true, getUUID(), sectionId),\n          imageKeys: [imageKey],\n        } as RunsChartsImageCardConfig;\n\n        if (isSectionReordered) {\n          // If the section has been reordered, then append to the end of the section\n          resultChartSet.push(newChartConfig);\n        } else {\n          // If section has not been reordered, then insert alphabetically\n          const insertIndex = resultChartSet.findIndex((chart) => {\n            const chartImageKeys = (chart as RunsChartsImageCardConfig).imageKeys;\n            return chartImageKeys ? chartImageKeys[0].localeCompare(imageKey) >= 0 : false;\n          });\n          resultChartSet.splice(insertIndex, 0, newChartConfig);\n        }\n      }\n    });\n\n    // Append new charts at the end instead of alphabetically\n    metricsToRender.forEach((metricKey) => {\n      // Check if metricKey exists in the current chart set\n      const doesMetricKeyExist =\n        resultChartSet.findIndex((chart) => {\n          const chartMetricKey = (chart as RunsChartsBarCardConfig).metricKey;\n          return chartMetricKey ? chartMetricKey === metricKey : false;\n        }) >= 0;\n\n      // Check if there is a generated chart with metricKey\n      const generatedChartIndex = resultChartSet.findIndex((chart) => {\n        const chartMetricKey = (chart as RunsChartsBarCardConfig).metricKey;\n        return chartMetricKey && chartMetricKey === metricKey && chart.isGenerated;\n      });\n\n      // If the metric has multiple epochs, add a line chart. Otherwise, add a bar chart\n      const anyRunHasMultipleEpochs = runsData.some((dataTrace) =>\n        dataTraceMetricsContainMultipleEpochs(dataTrace, metricKey),\n      );\n      const chartType = anyRunHasMultipleEpochs ? RunsChartType.LINE : RunsChartType.BAR;\n\n      // This is a new metric key, so add it to the chart set\n      if (!doesMetricKeyExist) {\n        // result is updated when there is a new metric key\n        isResultUpdated = true;\n\n        // Insert a new UUID if section doesn't exist\n        const sectionName = RunsChartsCardConfig.extractChartSectionName(metricKey);\n        if (!sectionName2Uuid[sectionName]) {\n          sectionName2Uuid[sectionName] = getUUID();\n        }\n\n        // Get section for metricKey and check if it has been reordered\n        const sectionId = sectionName2Uuid[sectionName];\n        // If section is undefined, it may be a new section, so its not reordered\n        const section = resultSectionSet.find((section) => section.uuid === sectionId);\n        const isSectionReordered = section ? section.isReordered : false;\n\n        const newChartConfig = {\n          ...RunsChartsCardConfig.getEmptyChartCardByType(chartType, true, getUUID(), sectionId),\n          metricKey: metricKey,\n        } as RunsChartsBarCardConfig;\n\n        if (isSectionReordered) {\n          // If the section has been reordered, then append to the end of the section\n          resultChartSet.push(newChartConfig);\n        } else {\n          // If section has not been reordered, then insert alphabetically\n          const insertIndex = resultChartSet.findIndex((chart) => {\n            const chartMetricKey = (chart as RunsChartsBarCardConfig).metricKey;\n            return chartMetricKey ? chartMetricKey.localeCompare(metricKey) >= 0 : false;\n          });\n          resultChartSet.splice(insertIndex, 0, newChartConfig);\n        }\n      } else if (\n        generatedChartIndex >= 0 &&\n        resultChartSet[generatedChartIndex].type === RunsChartType.BAR &&\n        chartType === RunsChartType.LINE\n      ) {\n        isResultUpdated = true;\n        // If the chart type has been updated to a line chart from a bar chart, then update the chart type\n        const prevChart = resultChartSet[generatedChartIndex];\n        resultChartSet[generatedChartIndex] = {\n          ...RunsChartsCardConfig.getEmptyChartCardByType(\n            chartType,\n            prevChart.isGenerated,\n            prevChart.uuid,\n            prevChart.metricSectionId,\n          ),\n          metricKey: metricKey,\n          deleted: prevChart.deleted,\n        } as RunsChartsLineCardConfig;\n      }\n    });\n\n    Object.keys(sectionName2Uuid).forEach((sectionName) => {\n      // Check if it is a new section\n      const doesSectionNameExist = resultSectionSet.findIndex((section) => section.name === sectionName) >= 0;\n      if (!doesSectionNameExist) {\n        resultSectionSet.push({\n          uuid: sectionName2Uuid[sectionName],\n          name: sectionName,\n          display: true,\n          isReordered: false,\n        });\n      }\n    });\n\n    if (!isAccordionReordered) {\n      // If sections are in order (not been reordered), then sort alphabetically\n      const rest = resultSectionSet.filter(\n        (section) => section.name !== MLFLOW_MODEL_METRIC_NAME && section.name !== MLFLOW_SYSTEM_METRIC_NAME,\n      );\n      rest.sort((a, b) => a.name.localeCompare(b.name));\n      resultSectionSet = [\n        ...rest,\n        compareRunSections[compareRunSections.length - 2],\n        compareRunSections[compareRunSections.length - 1],\n      ].filter((section) => !isNil(section));\n    }\n\n    return { resultChartSet, resultSectionSet, isResultUpdated };\n  }\n}\n\n// TODO: add configuration fields relevant to scatter chart\nexport class RunsChartsScatterCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType.SCATTER = RunsChartType.SCATTER;\n  xaxis: RunsChartAxisDef = { key: '', type: 'METRIC' };\n  yaxis: RunsChartAxisDef = { key: '', type: 'METRIC' };\n  runsCountToCompare = 100;\n}\n\n// TODO: add configuration fields relevant to line chart\nexport class RunsChartsLineCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType.LINE = RunsChartType.LINE;\n\n  /**\n   * A metric key used for chart's X axis\n   */\n  metricKey = '';\n\n  /**\n   * New key to support multiple metrics\n   * NOTE: This key will not be present in older charts\n   */\n  selectedMetricKeys?: string[];\n\n  /**\n   * Smoothness\n   */\n  lineSmoothness = 0;\n\n  /**\n   * Scale type for X axis\n   */\n  xAxisScaleType: 'linear' | 'log' = 'linear';\n\n  /**\n   * Y axis mode\n   */\n  scaleType: 'linear' | 'log' = 'linear';\n\n  /**\n   * Choose X axis mode - numeric step, relative time in seconds or absolute time value\n   */\n  xAxisKey: RunsChartsLineChartXAxisType = RunsChartsLineChartXAxisType.STEP;\n\n  /**\n   * Name of the metric to use for the X axis. Used when xAxisKey is set to 'metric'\n   */\n  selectedXAxisMetricKey = '';\n\n  /**\n   * Display points on the line chart. Undefined means \"auto\" mode, i.e. display points only when\n   * there are fewer than 60 datapoints on the chart.\n   */\n  displayPoints?: boolean = undefined;\n}\n\n// TODO: add configuration fields relevant to bar chart\nexport class RunsChartsBarCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType.BAR = RunsChartType.BAR;\n\n  /**\n   * A metric key used for chart's X axis\n   */\n  metricKey = '';\n}\n\n// TODO: add configuration fields relevant to contour chart\nexport class RunsChartsContourCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType.CONTOUR = RunsChartType.CONTOUR;\n  xaxis: RunsChartAxisDef = { key: '', type: 'METRIC' };\n  yaxis: RunsChartAxisDef = { key: '', type: 'METRIC' };\n  zaxis: RunsChartAxisDef = { key: '', type: 'METRIC' };\n}\n\n// TODO: add configuration fields relevant to parallel coords chart\nexport class RunsChartsParallelCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType.PARALLEL = RunsChartType.PARALLEL;\n  selectedParams: string[] = [];\n  selectedMetrics: string[] = [];\n  showAllRuns?: boolean = false;\n}\n\nexport enum DifferenceCardConfigCompareGroup {\n  MODEL_METRICS = 'Model metrics',\n  SYSTEM_METRICS = 'System metrics',\n  PARAMETERS = 'Parameters',\n  ATTRIBUTES = 'Attributes',\n  TAGS = 'Tags',\n}\n\nexport const DISABLED_GROUP_WHEN_GROUPBY = [\n  DifferenceCardConfigCompareGroup.PARAMETERS,\n  DifferenceCardConfigCompareGroup.TAGS,\n  DifferenceCardConfigCompareGroup.ATTRIBUTES,\n];\n\nexport enum DifferenceCardAttributes {\n  USER = 'User',\n  SOURCE = 'Source',\n  VERSION = 'Version',\n  MODELS = 'Models',\n}\n\n// TODO: add configuration fields relevant to difference view chart\nexport class RunsChartsDifferenceCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType = RunsChartType.DIFFERENCE;\n  compareGroups: DifferenceCardConfigCompareGroup[] = [];\n  chartName = 'Runs difference view';\n  showChangeFromBaseline = true;\n  showDifferencesOnly = true;\n  baselineColumnUuid = '';\n}\n\nexport class RunsChartsImageCardConfig extends RunsChartsCardConfig {\n  type: RunsChartType = RunsChartType.IMAGE;\n  // image keys to show\n  imageKeys: string[] = [];\n  step = 0;\n}\n","import { type Dictionary, compact, first, isUndefined, last, max, min, minBy, orderBy, values } from 'lodash';\nimport { MetricEntity, SampledMetricsByRunUuidState } from '../../../types';\nimport { SampledMetricsByRun } from '../hooks/useSampledMetricHistory';\n\n/**\n * This function consumes chart timestamp range and returns\n * corresponding step range for a given metric basing on a history.\n */\nexport const findChartStepsByTimestamp = (\n  // Currently fetched metric history\n  currentMetricHistory: {\n    [rangeKey: string]: {\n      loading?: boolean | undefined;\n      metricsHistory?: MetricEntity[] | undefined;\n    };\n  },\n  // Timestamp range - either textual (\"2022-10-23 10:00:00\") or numeric (milliseconds)\n  range: [string | number, string | number],\n  // If set to true, will return entire boundaries from history if timestamps are not found.\n  // Otherwise, will return undefined.\n  useDefaultIfNotFound = true,\n): [number, number] | undefined => {\n  // First, let's compile a history of all metric values from all ranges,\n  // then sort it by timestamp\n  const flatHistory = orderBy(\n    compact(\n      values(currentMetricHistory)\n        .map(({ metricsHistory }) => metricsHistory)\n        .flat(),\n    ),\n    'timestamp',\n  );\n\n  // If there's no sufficient entries, return nothing\n  if (flatHistory.length < 2) {\n    return undefined;\n  }\n\n  // We consume textual ranges produced by charts so we have\n  // to convert them to timestamps\n  const lowerBound = new Date(range[0]).valueOf();\n  const upperBound = new Date(range[1]).valueOf();\n\n  // First, try to find the lower entry using loop\n  let lowerEntry = useDefaultIfNotFound ? first(flatHistory) : undefined;\n\n  for (let index = 0; index < flatHistory.length; index++) {\n    const entry = flatHistory[index];\n    if (entry.timestamp > lowerBound) {\n      lowerEntry = flatHistory[index - 1] || entry;\n      break;\n    }\n  }\n\n  // Repeat for the upper entry\n  let upperEntry = useDefaultIfNotFound ? last(flatHistory) : undefined;\n\n  for (let index = flatHistory.length - 1; index >= 0; index--) {\n    const entry = flatHistory[index];\n    if (entry.timestamp < upperBound) {\n      upperEntry = flatHistory[index + 1] || entry;\n      break;\n    }\n  }\n\n  // If boundaries are not found, return nothing\n  if (isUndefined(lowerEntry) || isUndefined(upperEntry)) {\n    return undefined;\n  }\n\n  // Return found boundary entries\n  return [lowerEntry.step, upperEntry.step];\n};\n\n/**\n * Finds the chart steps by absolute timestamp for multiple runs.\n *\n * @param sampledMetrics - The sampled metrics by run UUID state.\n * @param runUuids - The array of run UUIDs.\n * @param metricKey - The metric key.\n * @param range - The range of timestamps.\n * @returns The lower and upper bounds of the chart steps, or undefined if not found.\n */\nexport const findChartStepsByTimestampForRuns = (\n  sampledMetrics: SampledMetricsByRunUuidState,\n  runUuids: string[],\n  metricKey: string,\n  range: [string | number, string | number],\n): [number, number] | undefined => {\n  const stepRangesPerRun = compact(\n    runUuids.map((runUuid) => {\n      const metricHistoryForRun = sampledMetrics[runUuid]?.[metricKey];\n      return metricHistoryForRun ? findChartStepsByTimestamp(metricHistoryForRun, range, false) : undefined;\n    }),\n  );\n  const lowerBound = min(stepRangesPerRun.map(([bound]) => bound));\n  const upperBound = max(stepRangesPerRun.map(([, bound]) => bound));\n\n  if (!isUndefined(lowerBound) && !isUndefined(upperBound)) {\n    return [lowerBound, upperBound];\n  }\n\n  return undefined;\n};\n\n/**\n * This function consumes chart relative time range and returns\n * corresponding step range for a given metric basing on a history.\n *\n * @param currentlyVisibleMetrics currentlyVisibleMetrics is a dictionary of currently rendered metric traces for run\n * @param runUuids a list of run UUIDs to process\n * @param relativeRange a relative time range in seconds\n * @returns a range of steps or undefined if no relevant are found\n */\nexport const findAbsoluteTimestampRangeForRelativeRange = (\n  currentlyVisibleMetrics: Dictionary<SampledMetricsByRun>,\n  runUuids: string[],\n  relativeRange: [number, number],\n  multiplier = 1000,\n): [number, number] | undefined => {\n  const stepRangesPerRun = compact(\n    runUuids.map((runUuid) => {\n      const runData = currentlyVisibleMetrics[runUuid];\n\n      if (!runData) {\n        return null;\n      }\n\n      // omit the \"runUuid\" key so we can conveniently access the metrics data\n      const { runUuid: _, ...runMetrics } = runData;\n\n      // concat all the metrics history for the run\n      const visibleMetricHistoryForRun = values(runMetrics).flatMap((metric) => metric.metricsHistory ?? []);\n\n      // Find the timestamp offset for the run. Should be equal to lowest timestamp value for each run.\n      const timestampOffset = minBy(visibleMetricHistoryForRun, 'timestamp')?.timestamp || 0;\n\n      // Convert relative time range to timestamp range. Relative range comes\n      // in seconds so we have to multiply it by 1000 to get milliseconds.\n      return [relativeRange[0] * multiplier + timestampOffset, relativeRange[1] * multiplier + timestampOffset] as [\n        number,\n        number,\n      ];\n    }),\n  );\n  const lowerBound = min(stepRangesPerRun.map(([bound]) => bound));\n  const upperBound = max(stepRangesPerRun.map(([, bound]) => bound));\n  if (!isUndefined(lowerBound) && !isUndefined(upperBound)) {\n    return [lowerBound, upperBound];\n  }\n\n  return undefined;\n};\n","import { useMemo } from 'react';\nimport type { RunGroupingAggregateFunction } from '../../experiment-page/utils/experimentPage.row-types';\nimport invariant from 'invariant';\nimport type { RunsChartsRunData } from '../../runs-charts/components/RunsCharts.common';\nimport {\n  createAggregatedMetricHistory,\n  createValueAggregatedMetricHistory,\n  type SyntheticMetricHistory,\n} from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport { uniq, type Dictionary, compact, pick, isNil } from 'lodash';\nimport type { SampledMetricsByRun } from '../../runs-charts/hooks/useSampledMetricHistory';\nimport type { MetricHistoryByName } from '../../../types';\n\nexport interface UseGroupedChartRunDataParams {\n  ungroupedRunsData: RunsChartsRunData[];\n  enabled: boolean;\n  aggregateFunction?: RunGroupingAggregateFunction;\n  metricKeys: string[];\n  sampledDataResultsByRunUuid: Dictionary<SampledMetricsByRun>;\n  selectedXAxisMetricKey?: string;\n}\n\n/**\n * Returns a new array of RunsChartsRunData with aggregated metrics for grouped runs.\n * In order to make rendering of the confidence interval possible, the returned dataset contains\n * min, max and average values for each metric while respecting the metric history.\n */\nexport const useGroupedChartRunData = ({\n  ungroupedRunsData,\n  enabled,\n  aggregateFunction,\n  metricKeys,\n  sampledDataResultsByRunUuid,\n  selectedXAxisMetricKey,\n}: UseGroupedChartRunDataParams) => {\n  return useMemo(() => {\n    if (!enabled || !aggregateFunction) {\n      return ungroupedRunsData;\n    }\n\n    // Extract groups from the result set and calculate aggregated metrics\n    const perGroupData: RunsChartsRunData[] = ungroupedRunsData\n      .filter(({ groupParentInfo }) => groupParentInfo)\n      .map((group) => {\n        const aggregatedMetricsHistory: Record<string, SyntheticMetricHistory> = {};\n        metricKeys.forEach((metricKey) => {\n          invariant(group.groupParentInfo, 'groupParentInfo should be defined');\n\n          let aggregatedMetricsHistoryForMetric;\n          if (!isNil(selectedXAxisMetricKey)) {\n            aggregatedMetricsHistoryForMetric = createValueAggregatedMetricHistory(\n              pick(sampledDataResultsByRunUuid, group.groupParentInfo.runUuids),\n              metricKey,\n              selectedXAxisMetricKey,\n            );\n          } else {\n            const metricsHistoryInGroup = compact(\n              group.groupParentInfo.runUuids.flatMap((runUuid) => {\n                const metricsHistory = sampledDataResultsByRunUuid[runUuid]?.[metricKey]?.metricsHistory;\n                return metricsHistory;\n              }),\n            );\n\n            // Get all step numbers from all runs in the group\n            const steps = uniq(metricsHistoryInGroup.map((h) => h.step));\n\n            aggregatedMetricsHistoryForMetric = createAggregatedMetricHistory(steps, metricKey, metricsHistoryInGroup);\n          }\n\n          aggregatedMetricsHistory[metricKey] = aggregatedMetricsHistoryForMetric;\n        });\n        const metricsHistory = metricKeys.reduce<MetricHistoryByName>((acc, key) => {\n          const history = aggregatedMetricsHistory[key][aggregateFunction];\n          if (history && history.length > 0) {\n            acc[key] = history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...group,\n          metricsHistory,\n          aggregatedMetricsHistory,\n        };\n      });\n\n    const ungroupedRuns = ungroupedRunsData.filter(({ belongsToGroup }) => belongsToGroup === false);\n\n    return [...perGroupData, ...ungroupedRuns];\n  }, [metricKeys, sampledDataResultsByRunUuid, ungroupedRunsData, enabled, aggregateFunction, selectedXAxisMetricKey]);\n};\n","import { DatasetSourceTypes, type DatasetSummary, type RunDatasetWithTags } from '../types';\n\nexport const datasetSummariesEqual = (summary1: DatasetSummary, summary2: DatasetSummary) =>\n  summary1.digest === summary2.digest && summary1.name === summary2.name && summary1.context === summary2.context;\n\nexport const getDatasetSourceUrl = (datasetWithTags: RunDatasetWithTags) => {\n  const { dataset } = datasetWithTags;\n  const sourceType = dataset.sourceType;\n  try {\n    if (sourceType === DatasetSourceTypes.HTTP) {\n      const { url } = JSON.parse(dataset.source);\n      return url;\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      const { uri } = JSON.parse(dataset.source);\n      return uri;\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      const { path } = JSON.parse(dataset.source);\n      return `https://huggingface.co/datasets/${path}`;\n    }\n  } catch {\n    return null;\n  }\n  return null;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { MLFLOW_INTERNAL_PREFIX } from '../../common/utils/TagUtils';\nimport { KeyValueEntity } from '../types';\n\nexport const NOTE_CONTENT_TAG = MLFLOW_INTERNAL_PREFIX + 'note.content';\n\nexport class NoteInfo {\n  constructor(content: any) {\n    this.content = content;\n  }\n\n  static fromTags = (tags: Record<string, KeyValueEntity>) => {\n    const contentTag = Object.values(tags).find((t) => t.key === NOTE_CONTENT_TAG);\n    if (contentTag === undefined) {\n      return undefined;\n    }\n    return new NoteInfo(contentTag.value);\n  };\n  content: any;\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, Tooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <Tooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_copybutton.tsx_35\"\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </Tooltip>\n  );\n};\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CloseIcon,\n  DesignSystemContext,\n  RedoIcon,\n  UndoIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from '@databricks/design-system';\nimport { useContext } from 'react';\nimport RcImage from 'rc-image';\nimport './Image.css';\n\nconst icons = {\n  rotateLeft: <UndoIcon />,\n  rotateRight: <RedoIcon />,\n  zoomIn: <ZoomInIcon />,\n  zoomOut: <ZoomOutIcon />,\n  close: <CloseIcon />,\n  left: <ArrowLeftIcon />,\n  right: <ArrowRightIcon />,\n};\n\nexport const ImagePreviewGroup = ({\n  children,\n  visible,\n  onVisibleChange,\n}: {\n  children: React.ReactNode;\n  visible: boolean;\n  onVisibleChange: (v: boolean) => void;\n}) => {\n  const { getPopupContainer } = useContext(DesignSystemContext);\n\n  return (\n    <RcImage.PreviewGroup\n      icons={icons}\n      preview={{\n        visible: visible,\n        getContainer: getPopupContainer,\n        onVisibleChange: (v) => onVisibleChange(v),\n      }}\n    >\n      {children}\n    </RcImage.PreviewGroup>\n  );\n};\n\nexport { RcImage as Image };\n","import React from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nfunction useMatchesMediaQuery(queryList: MediaQueryList) {\n  return useSyncExternalStore(\n    React.useCallback(\n      (callback) => {\n        queryList.addEventListener('change', callback);\n        return () => {\n          queryList.removeEventListener('change', callback);\n        };\n      },\n      [queryList],\n    ),\n    () => queryList.matches,\n  );\n}\n\n/**\n * React hook that listens for changes to a [media query][media-query]. Uses\n * [`window.matchMedia()`][match-media] under-the-hood.\n *\n * [media-query]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries\n * [match-media]: https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n *\n * @usage\n *\n * ```tsx\n * function FancyButton() {\n *   const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion)');\n *   return prefersReducedMotion ? <Button /> : <DancingButton />;\n * }\n * ```\n *\n * > **Note**\n * > The vast majority of use-cases can (and should) use vanilla CSS media\n * > queries instead of this hook — which will cause a re-render when the match\n * > state changes. Usage of this hook should be reserved for use-cases where\n * > CSS cannot be used instead.\n * >\n * > ```tsx\n * > <Button css={{ 'not (prefers-reduced-motion)': { animation: … } }} />\n * > ```\n */\nexport function useMediaQuery(query: string) {\n  // Note: a new MediaQueryList is created with every _usage_ of this hook.\n  // It's probably cheap to create many instances of MediaQueryList, and\n  // garbage collection will still clean up as expected, but consider using a\n  // [weak cache](https://github.com/tc39/proposal-weakrefs#weak-caches) to\n  // reuse MediaQueryLists where possible if performance is impacted.\n  const queryList = React.useMemo(() => window.matchMedia(query), [query]);\n  return useMatchesMediaQuery(queryList);\n}\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\n\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\n\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\n\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\n\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'python' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Whether or not to wrap long lines\n   */\n  wrapLongLines?: boolean;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n\n  return (\n    <>\n      <SyntaxHighlighter\n        showLineNumbers={showLineNumbers}\n        lineNumberStyle={lineNumberStyle}\n        language={language}\n        style={themesStyles[theme]}\n        customStyle={customStyle}\n        codeTagProps={{\n          style: pick(style, 'backgroundColor'),\n        }}\n        wrapLongLines={wrapLongLines}\n      >\n        {children}\n      </SyntaxHighlighter>\n    </>\n  );\n}\n"],"names":["_path","_rect","_rect2","_rect3","_rect4","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgChartBar","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","stroke","strokeLinecap","x","y","ForwardRef","_path2","_path3","SvgChartContour","_rect5","_rect6","_rect7","_rect8","_rect9","_rect10","_rect11","_rect12","_rect13","_rect14","_rect15","_rect16","_rect17","_rect18","SvgChartDifference","_line","_line2","_line3","SvgChartImage","x1","y1","x2","y2","SvgChartLine","strokeWidth","strokeLinejoin","_path4","_path5","SvgChartParallel","_circle","_ellipse","_circle2","_circle3","_ellipse2","_ellipse3","SvgChartScatter","cx","cy","r","rx","ry","fillOpacity","_g","_defs","SvgRegisteredModelGreyOk","clipPath","style","maskType","maskUnits","mask","fillRule","clipRule","JsonPreview","json","wrapperStyle","overlayStyle","codeSnippetStyle","formattedJson","isJsonContent","useFormattedJson","_jsx","position","maxHeight","overflow","children","_jsxs","_Fragment","CodeSnippet","language","padding","overflowX","css","_css","bottom","right","left","background","React","parsed","JSON","parse","isJson","isObject","Date","stringify","e","_ref3","name","styles","FormattedJsonDisplay","_ref2","wrapLongLines","ToggleIconButton","pressed","onClick","icon","onBlur","onFocus","onMouseEnter","onMouseLeave","componentId","analyticsEvents","type","remainingProps","theme","useDesignSystemTheme","eventContext","useDesignSystemEventComponentCallbacks","componentType","DesignSystemEventProviderComponentTypes","Button","DesignSystemEventProviderAnalyticsEventTypes","OnClick","event","cursor","general","heightSm","borderRadius","borders","borderRadiusMd","lineHeight","typography","lineHeightBase","border","display","alignItems","justifyContent","colors","actionDefaultBackgroundPress","color","actionDefaultTextPress","textSecondary","actionDefaultBackgroundHover","actionDefaultTextHover","useDragAndDropElement","dragGroupKey","dragKey","onDrop","disabled","dropListener","useRef","useEffect","current","isOver","draggedItem","dropTargetRef","useDrop","canDrop","accept","drop","monitor","sourceKey","didDrop","collect","shallow","getItem","isDragging","dragHandleRef","dragPreviewRef","useDrag","canDrag","item","groupKey","isDraggingOtherGroup","Boolean","_ref4","DragAndDropProvider","rootElementRef","manager","setManager","useState","useLayoutEffect","rootElement","dragDropManager","createDragDropManager","HTML5Backend","undefined","getBackend","teardown","DndProvider","useIsTabActive","isTabActive","setIsTabActive","document","visibilityState","addEventListener","DEFAULT_MIN_COLUMNS","DEFAULT_MAX_COLUMNS","DEFAULT_MIN_COLUMN_WIDTH","DEFAULT_GAP","getGridColumnSetup","minColumns","maxColumns","minColumnWidth","gap","additionalBreakpoints","gridTemplateColumns","reduce","acc","breakpointWidth","minColumnWidthForBreakpoint","LocalStorageUtils","getStoreForComponent","componentName","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","storageObj","window","localStorage","sessionStorage","loadComponentState","storedVal","reactComponentStateKey","saveComponentState","stateRecord","targetValue","toJSON","setItem","withScopePrefix","value","ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","NotebookIcon","LOCAL","HomeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","ErrorIcon","XCircleIcon","textValidationDanger","FinishedIcon","CheckCircleIcon","textValidationSuccess","RunStatusIcon","status","ClockIcon","HIGH_RESOLUTION_MEDIA_QUERY","RunColorPill","hidden","onChangeColor","colorValue","setColorValue","onChangeColorDebounced","useMemo","debounce","flexShrink","marginBottom","opacity","backgroundColor","visuallyHidden","onChange","list","COLORS_PALETTE_DATALIST_ID","ExperimentViewDatasetSchemaTable","schema","filter","filteredSchema","row","_","hasFilter","toLowerCase","includes","Table","scrollable","TableRow","isHeader","TableHeader","FormattedMessage","defaultMessage","onWheel","stopPropagation","TableCell","map","idx","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","ExperimentViewDatasetSchema","datasetWithTags","dataset","setFilter","Header","grey600","marginTop","spacing","sm","form","TableFilterInput","placeholder","onClear","containerProps","mlflow_colspec","TableIcon","fontSize","Typography","Text","marginLeft","lg","md","ExperimentViewDatasetLink","runTags","DatasetSourceTypes","HTTP","HUGGING_FACE","url","getDatasetSourceUrl","NewWindowIcon","href","S3","CopyButton","CopyIcon","copyText","EXTERNAL","ExperimentViewDatasetSourceType","typeLabel","Hint","values","ExperimentViewDatasetSourceURL","whiteSpace","fontSizeSm","columnGap","xs","Link","openInNewTab","uri","ExperimentViewDatasetDigest","digest","ExperimentViewDatasetDrawerImpl","_datasetWithTags$tags","isOpen","setIsOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","runData","contextTag","tags","find","tag","MLFLOW_RUN_DATASET_CONTEXT_TAG","fullProfile","profile","getRunColor","useGetExperimentRunColor","experimentId","Drawer","Root","open","onOpenChange","Content","Title","level","marginRight","to","Routes","getRunPageRoute","runUuid","runLink","runName","footer","Spacer","size","borderTop","flexDirection","borderRight","paddingLeft","datasets","backgroundSecondary","paddingBottom","paddingTop","ExperimentViewDatasetWithContext","displayTextAsLink","Tooltip","ellipsis","Tag","textTransform","substring","Divider","ExperimentViewDatasetDrawer","textOverflow","_tags$find","ExperimentPageUISetStateContext","state","ExperimentPageUIStateContextProvider","setUIState","Provider","useUpdateExperimentViewUIState","useExperimentIds","params","useParams","location","useLocation","normalizedLocationSearch","decodeURIComponent","search","compareExperimentIdsQueryParam","queryParams","qs","experimentIdsRaw","toString","Utils","logErrorAndNotifyUser","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","autoRefreshEnabled","enabled","dispatch","useDispatch","runUuidsSerialized","slice","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","split","forEach","listImagesApi","refreshTimeoutRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","async","activeRunUuids","autoRefresh","index","scheduleRefresh","clearTimeout","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","then","ConfirmModal","Component","super","isSubmitting","onRequestCloseHandler","handleSubmitWrapper","onClose","setState","handleSubmit","finally","render","Modal","visible","onOk","okText","confirmButtonText","confirmLoading","onCancel","centered","helpText","DeleteRunModalImpl","deletePromises","selectedRunIds","runId","push","deleteRunApi","Promise","all","catch","errorModalContent","intl","formatMessage","openErrorModal","_this$props$onSuccess","_this$props","onSuccess","number","pluralize","mapDispatchToProps","connect","injectIntl","GenericInputModal","formRef","onSubmit","validateFields","resetAndClearModalForm","handleSubmitFailure","reject","resetFields","handleCancel","cancelText","displayForm","child","innerRef","NEW_NAME_FIELD","RenameFormComponent","inputToAutoFocus","autoFocusInputRef","focus","select","autoFocus","prevProps","componentDidUpdate","Form","layout","Item","initialValue","rules","required","message","validator","label","Input","RenameForm","RenameRunModalImpl","handleRenameRun","newRunName","updateRunRequestId","getUUID","updateRunApi","trim","Error","RenameRunModalWithIntl","RenameRunModal","RunsChartsConfigureField","RunsChartsMetricParamSelect","metricKeyList","paramKeyList","useIntl","isEmpty","LegacySelect","selectFull","dangerouslySetAntdProps","showSearch","OptGroup","metric","Option","makeCanonicalSortKey","param","RunsChartsRunNumberSelect","options","shouldUseNewRunRowsVisibilityModel","countOption","optionValue","runsChartsRunCountDefaultOptions","RunsChartsConfigureBarChart","onStateChange","updateMetric","useCallback","metricKey","updateVisibleRunCount","runsCountToCompare","emptyMetricsList","RunsChartsConfigureParallelChart","updateSelectedParams","selectedParams","updateSelectedMetrics","selectedMetrics","emptyParamsList","mode","renderMetricSelectorV2","selectedMetricKeys","renderXAxisMetricSelector","selectedXAxisMetricKey","updateSelectedXAxisMetricKey","Radio","RunsChartsLineChartXAxisType","METRIC","preventDefault","RunsChartsConfigureLineChart","shouldEnableMetricsOnXAxis","shouldEnableDeepLearningUIPhase3","metricKeys","updateXAxisKey","xAxisKey","updateXAxisScaleType","isLogType","xAxisScaleType","updateYAxisType","scaleType","updateSmoothing","lineSmoothness","Group","STEP","TIME","placement","QuestionMarkIcon","timeStepQuestionMarkIcon","TIME_RELATIVE","Switch","checked","SegmentedControlGroup","displayPoints","SegmentedControlButton","InfoIcon","LineSmoothSlider","min","max","defaultValue","svg","RunsChartsConfigureLineChartPreview","entities","metricsByRunUuid","areStatesEqual","nextState","prevState","previewData","cardConfig","groupBy","usingMultipleRunsHoverTooltip","isGrouped","some","groupParentInfo","aggregateFunction","runUuidsToFetch","compact","flatMap","g","belongsToGroup","_r$runInfo","runInfo","metricKeysToFetch","_cardConfig$selectedM","fallback","yAxisKeys","xAxisKeys","concat","resultsByRunUuid","isLoading","useSampledMetricHistory","maxResults","sampledData","run","metricsHistory","_resultsByRunUuid$run","_resultsByRunUuid$run2","history","uuid","sampledGroupData","useGroupedChartRunData","ungroupedRunsData","sampledDataResultsByRunUuid","chartData","setTooltip","resetTooltip","useRunsChartsTooltip","RunsChartsTooltipMode","MultipleTracesWithScanline","Simple","LegacySkeleton","RunsMetricsLinePlot","runsData","useDefaultHoverBox","onHover","onUnhover","RunsChartsConfigureContourChart","updateAxis","canonicalKey","axis","isCanonicalSortKeyOfType","extractCanonicalSortKey","_state$xaxis","_state$yaxis","_state$zaxis","firstMetric","firstParam","xaxis","yaxis","zaxis","scatterPlotDefaultOptions","RunsChartsConfigureScatterChart","RunsChartsConfigureDifferenceChart","updateCompareGroups","compareGroup","compareGroups","group","updateChartName","chartName","updateShowChangeFromBaseline","showChangeFromBaseline","updateShowDifferencesOnly","showDifferencesOnly","Checkbox","DifferenceCardConfigCompareGroup","_state$compareGroups","groupedCondition","DISABLED_GROUP_WHEN_GROUPBY","isChecked","InfoTooltip","RunsChartsConfigureImageChart","imageKeyList","stepMarks","maxMark","minMark","useImageSliderStepMarks","data","selectedImageKeys","imageKeys","updateStep","step","handleUpdate","imageKey","_currentConfig$imageK","currentConfig","_currentConfig$imageK2","DialogCombobox","multiSelect","DialogComboboxTrigger","handleClear","minWidth","DialogComboboxContent","matchTriggerWidth","DialogComboboxOptionList","_state$imageKeys","DialogComboboxOptionListCheckboxItem","marks","keys","previewComponentsMap","RunsChartType","BAR","RunsMetricsBarPlot","displayRunNames","displayMetricKey","margin","barChartCardDefaultMargin","CONTOUR","RunsContourPlot","xAxis","yAxis","zAxis","LINE","PARALLEL","_cardConfig$selectedP","isConfigured","_cardConfig$selectedP2","paramKey","dataTrace","_dataTrace$params$par","isNaN","Number","filteredData","processParallelCoordinateData","LazyParallelCoordinatesPlot","axesRotateThreshold","SCATTER","RunsScatterPlot","DIFFERENCE","setCardConfig","DifferenceViewPlot","IMAGE","ImageGridPlot","containerWidth","RunsChartsConfigureModal","config","chartRunData","supportedChartTypes","isChartTypeSupported","currentFormState","setCurrentFormState","isEditing","updateChartType","emptyChartCard","RunsChartsCardConfig","getEmptyChartCardByType","reverse","Set","images","add","Array","from","sort","disableSaveButton","_lineCardConfig$selec","okButtonProps","wrapper","chartTypeOption","ChartBarIcon","ChartScatterIcon","ChartLineIcon","ChartParallelIcon","ChartContourIcon","shouldEnableDifferenceViewCharts","ChartDifferenceIcon","shouldEnableImageGridCharts","ChartImageIcon","RunsChartsTooltipWrapper","contextData","runs","component","RunsChartsTooltipBody","hoverOnly","chartWrapper","PreviewComponent","renderPreviewChartType","iconSize","field","RunsChartsFullScreenModal","isMetricHistoryLoading","fullScreenChart","tooltipContextValue","tooltipComponent","getPrefixedClassName","subtitle","verticalSizing","flex","RunsChartsCard","sectionIndex","fullScreen","onRemoveChart","onReorderCharts","onStartEditChart","setFullScreenChart","canMoveDown","canMoveUp","onMoveDown","onMoveUp","onReorderWith","createLineChartValuesBox","activeRun","hoverData","_hoverData$metricEnti","_hoverData$yValue","metricKeyFromConfig","metricEntity","metricValue","yValue","metrics","isNil","xValue","getTooltipXValue","_hoverData$xValue","_hoverData$xValue2","shouldEnableRelativeTimeDateAxis","ValuesBox","isHovering","createBarChartValuesBox","createScatterChartValuesBox","_activeRun$metrics$xK","_activeRun$params$xKe","_activeRun$metrics$yK","_activeRun$params$yKe","xKey","yKey","createContourChartValuesBox","_activeRun$metrics$xK2","_activeRun$params$xKe2","_activeRun$metrics$yK2","_activeRun$params$yKe2","_activeRun$metrics$zK","_activeRun$params$zKe","zKey","zValue","createParallelChartValuesBox","paramsList","metricsList","closeContextMenu","onTogglePin","onHideRun","containsMultipleRunsTooltipData","RunsMultipleTracesTooltipBody","singleTraceHoverData","hoveredDataPoint","displayName","metricSuffix","contentWrapper","header","colorPill","CloseIcon","actionsWrapper","pinnable","pinned","PinFillIcon","PinIcon","VisibleIcon","primary","maxWidth","PLOT_CONFIG","displaylogo","scrollZoom","modeBarButtonsToRemove","DEFAULT_COLOR_SCALE","markerSize","reverseScale","runsChartDefaultContourMargin","colorScale","onUpdate","selectedRunUuid","onSetDownloadHandler","layoutHeight","layoutWidth","setContainerDiv","containerDiv","isDynamicSizeSupported","useDynamicPlotSize","plotData","xValues","yValues","zValues","tooltipData","_xAxisData$xAxis$key","_yAxisData$yAxis$key","_zAxisData$zAxis$key","xAxisData","yAxisData","zAxisData","z","layers","customdata","text","hovertemplate","zAxisTitle","hoverinfo","hoverlabel","runsChartHoverlabel","textposition","marker","line","unshift","connectgaps","contours","coloring","colorscale","reversescale","colorbar","tickfont","family","plotlyThemedLayout","createThemedPlotlyLayout","setLayout","ticks","standoff","template","newLayout","setHoveredPointIndex","useRunsChartTraceHighlight","highlightScatterTraces","hoverCallback","_scatterPoints$pointI","_customdata","points","scatterPoints","curveNumber","pointIndex","pointCustomDataRunUuid","unhoverCallback","mutableHoverCallback","useMutableChartHoverCallback","legendLabelData","getLegendDataFromRuns","dataToExport","trace","createChartImageDownloadHandler","chart","commonRunsChartStyles","scatterChartHighlightStyles","LazyPlot","useResizeHandler","RunsMetricsLegendWrapper","labelData","doubleClick","showTips","runsChartDefaultMargin","barWidth","ids","names","_d$metrics$metricKey","normalizeChartValue","textValues","_d$metrics$metricKey2","val","places","toFixed","getFixedPointValue","textfont","orientation","showticklabels","fixedrange","highlightBarTraces","_points$0$data","_points$0$pointIndex","_points$","_points$2","layoutToExport","automargin","highlightStyles","transition","TraceLabel","dashStyle","TraceLabelColorIndicator","strokeDasharray","dashType","getDashArray","pathYOffset","STROKE_WIDTH","flexWrap","alignContent","overflowY","labelDatum","heightBuffer","RunsMetricsLegend","PLOTLY_DRAGLAYER_SELECTOR","parseMicroseconds","plotlyAxisBoundary","_plotlyAxisBoundary$m","microsecondsString","isString","match","orderBySteps","dataPoints","stepOrder","stepIndexes","a","b","createTooltipTemplate","prepareMetricHistoryByAxisType","metricHistory","axisType","timestamp","minTimestamp","minBy","_ref11","EPOCH_RELATIVE_TIME","_ref12","_ref13","TIME_RELATIVE_HOURS","_ref14","HOUR_IN_MILLISECONDS","_ref15","_ref16","prepareXAxisDataForMetricType","datapoint","_ref17","lineShape","xRange","yRange","lockXAxisZoom","dynamicXAxisKey","maxDiff","maxTimestamp","maxBy","diff","Math","LINE_CHART_RELATIVE_TIME_THRESHOLD","runEntry","_runEntry$metricsHist2","_runEntry$metricsHist","_yValues","_runEntry$runInfo","_yValues2","_runEntry$runInfo2","_runEntry$runInfo3","lineDash","sortedMetricsHistory","xValuesWithSteps","yValueHistory","optimizedLineShape","containsDuplicateXValues","shouldDisplayMarkers","containsSingleValue","EMA","hovertext","dash","shape","getDataTraceForRun","lineDashStyles","flat","bandsData","_ref18","_runEntry$runInfo4","aggregatedMetricsHistory","xMins","xMaxes","yMins","yMaxes","minReversed","bandValues","fillcolor","createFadedTraceColor","getBandTraceForRun","plotDataWithBands","highlightLineTraces","xAxisKeyLabel","getChartAxisLabelDescriptor","yAxisParams","showlegend","updatedLayout","isEqual","containsMultipleMetricKeys","_ref19","_hoveredPoint$curveNu","_hoveredPointData$met","hoveredPoint","hoveredPointData","themedPlotlyLayout","immediateLayout","getXAxisType","range","getXAxisRange","tickformat","getLineChartLegendData","scanlineElement","initHandler","updateHandler","updateHandlerMultipleRuns","onPointHover","hoverCallbackMultipleRuns","onPointUnhover","unhoverCallbackMultipleRuns","chartBoundaries","containerLeftPixels","plotWidthPixels","plotOffsetPixels","lowerBoundValue","valueRange","mainContainer","dragLayer","initialized","scanlineElementRef","currentHoveredDataPoint","visibleXValues","uniq","initializedFigure","setInitializedFigure","immediateHoverData","immediateLegendLabelData","immediateRunsData","immediatePlotData","immediateXValuesData","setupBoundaries","figure","_figure$layout$xaxis","_figure$layout$xaxis$","_figure$layout$xaxis2","_figure$layout$xaxis3","_lowerBoundary","_upperBoundary","lowerAxisValue","upperAxisValue","lowerBoundary","isNumber","getTime","upperBoundary","updateContainerPosition","containerRect","getBoundingClientRect","dragLayerRect","onUpdatePlotHandler","graphDiv","querySelector","onInitPlotHandler","pointerLeavePlotCallback","relatedTarget","Element","classList","contains","onPointHoverCallback","singleTraceData","traceUuid","onPointUnhoverCallback","getClosestXValue","pointerClientX","boundaries","resultX","currentStep","abs","tooltipDataUpdateHandler","throttle","closestXValue","clientX","legendEntry","_correspondingDataTra","_correspondingDataTra2","correspondingDataEntry","correspondingDataTrace","xIndex","indexOf","isUndefined","tooltipLegendItems","orderBy","leading","windowResizeHandler","hoverHandler","_immediateHoverData$c","_immediateHoverData$c2","closestXValueLeftInPixels","log10","clientY","originalEvent","removeEventListener","top","borderLeft","pointerEvents","useRunsMultipleTracesTooltipData","legend","onInitialized","PlotlyLikeFormattedTime","FormattedDate","year","month","day","FormattedTime","hour","hourCycle","minute","second","fractionalSecondDigits","PlotlyLikeFormattedTimestamp","hoveredTraceUuid","displayedXValueLabel","rowGap","textPlaceholder","fontWeight","_points$$customdata","RunsChartsChartsDragGroup","ChartRunsCountIndicator","runsOrGroups","containsGroups","containsRuns","count","RunsChartCardWrapper","onDelete","onEdit","tooltip","additionalMenuContent","toggleFullScreenChart","toggles","supportedDownloadFormats","onClickDownload","isRefreshing","gridTemplateRows","backgroundPrimary","borderRadiusBase","element","DragIcon","String","Spinner","toggle","currentToggle","setToggle","toggleLabel","FullscreenIcon","DropdownMenu","modal","Trigger","asChild","OverflowIcon","align","Separator","chartEntry","chartComponentWrapper","verticalAlign","t","l","pad","RunsChartsBarChartCard","slicedRuns","elementRef","isInViewport","useIsInViewport","imageDownloadHandler","setImageDownloadHandler","useChartImageDownloadHandler","chartBody","barChartCardWrapper","GENERAL_AREA","format","runsToExport","downloadChartDataCsv","getV2ChartTitle","RunsChartsLineChartCard","onDownloadFullMetricHistoryCsv","_r$runInfo2","_config$selectedMetri","destroyTooltip","sampledMetricsByRunUuid","useSelector","pick","shallowEqual","setRange","setOffsetTimestamp","stepRange","offsetTimestamp","findChartStepsByTimestampForRuns","lowerBound","floor","upperBound","ceil","useCompareRunChartSelectedRange","lineChartCardWrapper","newYRange","autorange","newXRange","ungroupedRunUuids","groupedRunUuids","_groupParentInfo$runU","timestampRange","findAbsoluteTimestampRangeForRelativeRange","_config$selectedMetri2","_config$selectedMetri3","savedChartTitle","downloadChartMetricHistoryCsv","singleRunUuids","_d$runInfo","runUuidsFromGroups","_group$groupParentInf","RunsChartsScatterChartCard","scatterChartCardWrapper","paramsToExport","metricsToExport","RunsChartsContourChartCard","contourChartCardWrapper","SvgParallelChartPlaceholder","gradientUnits","stopColor","offset","EmptyParallelCoordsPlaceholder","ParallelChartSvg","UnsupportedDataPlaceholder","RunsChartsParallelChartCard","updateUIState","configuredChartRunData","showAllRuns","containsStringValues","_config$selectedParam","updateVisibleOnlySetting","_state$compareRunChar","newCompareRunCharts","compareRunCharts","existingChartConfig","parallelCoordsData","_config$selectedParam2","configured","containsUnsupportedValues","displaySubtitle","parallelChartCardWrapper","PARALLEL_CHARTS_AREA","CheckboxItem","ItemIndicator","RunsChartsDifferenceChartCard","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","showChangeFromBaselineToggle","showDifferencesOnlyToggle","setter","showTooltip","RunsChartsImageChartCard","containerRef","setContainerWidth","resizeObserver","ResizeObserver","entries","contentRect","observe","disconnect","tmpConfig","setTmpConfig","DEFAULT_IMAGE_GRID_CHART_NAME","stepMarkLength","shouldDisplayImageLimitIndicator","LOG_IMAGE_TAG_INDICATOR","conf","onAfterChange","commonChartProps","differenceView","isDifferent","HEADING_COLUMN_ID","modelMetrics","systemMetrics","parameters","attributes","getDifferenceViewDataGroups","headingColumnId","getMetrics","filterCondition","runDataKeys","runDataAttribute","hasDifference","prev","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","getVisibleTagValues","DifferenceCardAttributes","USER","SOURCE","VERSION","MODELS","attribute","attributeData","user","getUser","getSourceName","getSourceVersion","models","getLoggedModelsFromTags","getData","MODEL_METRICS","SYSTEM_METRICS","PARAMETERS","ATTRIBUTES","TAGS","baselineColumn","nonBaselineColumns","baselineColumnUuid","getColumns","convertRunToColumnInfo","isBaseline","baselineAccessorFn","accessorFn","cell","getValue","difference","Paragraph","ArrowDownIcon","ArrowUpIcon","accessorKey","table","useReactTable","columns","enableColumnResizing","columnResizeMode","getCoreRowModel","updateBaselineColumnUuid","getTotalSize","getHeaderGroups","headerGroup","headers","column","getSize","resizable","getCanResize","resizeHandler","getResizeHandler","flexRender","columnDef","getContext","getRowModel","rows","getAllCells","multiline","IMAGE_GAP_SIZE","getImageSize","numImages","maxImagesPerRow","ImagePlot","imageUrl","compressedImageUrl","imageSize","maxImageSize","previewVisible","setPreviewVisible","GenericSkeleton","ImagePreviewGroup","onVisibleChange","Image","src","preview","ImagePlotWithHistory","metadataByStep","textAlign","ImageIcon","getArtifactLocationUrl","filepath","compressed_filepath","EmptyImageGridPlot","ImageGridSingleKeyPlot","displayRuns","imageMetadata","imageMetadataByStep","metadata","lineHeightMd","ImageGridMultipleKeyPlot","grid","filteredPreviewData","ParallelCoordinatesPlot","MAX_NUMBER_STRINGS","allRuns","shift","stringRuns","numberRuns","seenVals","tempRuns","has","filterParallelCoordinateData","result","computeSelectedAttrs","attrs","runvalue","isArray","attr","Suspense","activeKey","onActiveKeyChange","disableCollapse","clsPrefix","classItem","classItemActive","classHeader","classContent","classContentBox","classArrow","transform","textPrimary","outlineColor","outlineStyle","borderBottom","Accordion","dangerouslyAppendEmotionCSS","expandIconPosition","RunsChartsAddChartMenu","onAddChart","addChartButton","PlusIcon","IconWrapper","iconWrapper","RunsChartsSectionHeader","section","sectionChartsLength","addNewChartCard","onDeleteSection","onAddSection","editSection","onSetEditSection","onSetSectionName","onSectionReorder","isExpanded","tmpSectionName","setTmpSectionName","isDraggingHandle","setIsDraggingHandle","sectionNameRef","confirmButtonRef","sectionNameWidth","setSectionNameWidth","isDeleteSectionModalOpen","setIsDeleteSectionModalOpen","entry","isCurrentlyEdited","isCurrentlyHovered","setIsCurrentlyHovered","role","visibility","onMouseMove","inset","isDarkMode","blue800","blue100","blue400","EDITABLE_LABEL_PADDING_WIDTH","onMouseDown","onMouseUp","onDoubleClick","onKeyDown","onPressEnter","minHeight","PencilIcon","CheckIcon","rotate","addSectionAbove","addSectionBelow","deleteSection","DangerModal","deleteModalConfirm","deleteModalCancel","alignSelf","RunsCharts","sectionId","cardsConfig","onInsertCharts","parallelChartCards","differenceChartCards","imageChartCards","remainingChartCards","c","gridSetup","dropTargetGeneralRef","isOverGeneral","dropTargetParallelRef","isOverParallel","isChartsEmpty","Empty","description","chartCards","reorderProps","_chartCards","_chartCards2","_remainingChartCards","_remainingChartCards2","RunsChartsSection","sectionCharts","reorderCharts","insertCharts","startEditChart","removeChart","RunsChartsSectionAccordion","compareRunSections","useUpdateRunsChartsUIConfiguration","setEditSection","sectionConfig","chartConfig","isGenerated","metricSectionId","deleted","newCompareRunSections","isAccordionReordered","addSection","above","findIndex","newSection","isReordered","splice","setSectionName","sectionReorder","sourceSectionId","targetSectionId","sourceSectionIdx","targetSectionIdx","sourceSection","compareRunChartsFiltered","chartMatchesFilter","filterLowerCase","lineConfig","scatterConfig","contourConfig","sectionsWithCharts","compareRunSectionsFiltered","MetricChartsAccordion","filteredSectionCharts","runsCompareSearchHeader","Panel","collapsible","newCompareRunPanels","shouldDisplaySection","block","appendSection","experimentChartImageDefaultDownloadLayout","paper_bgcolor","plot_bgcolor","experimentChartImageDefaultDownloadSettings","experimentChartImageDefaultDownloadPlotConfig","downloadImage","filename","downloadHandlerRef","downloadHandler","setDownloadHandler","setDownloadHandlerCached","existingHandler","chartTitle","_downloadHandlerRef$c","meta","internalElementRef","setIsInViewport","IntersectionObserver","intersectionObserver","isIntersecting","callback","mutableRef","highlightChartTracesFn","traceSelector","parentSelector","parent","hoverIndex","selectIndex","_parent$querySelector","_parent$querySelector3","numberOfBands","deselected","_parent$querySelector2","_parent$querySelector4","_parent$querySelector5","_parent$querySelector6","remove","querySelectorAll","bandTraceIndex","highlightFn","selectedTraceIndex","hoveredPointIndex","RunsChartsTooltipContext","ContextMenuVisibility","extractHTMLAncestorElement","HTMLElement","currentElement","parentElement","ctxMenuRef","currentPos","usingImprovedClickMechanism","currentSnappedCoordinates","setMode","contextMenuShown","setContextMenuShown","HIDDEN","tooltipDisplayParams","setTooltipDisplayParams","hoveredRunUuid","setHoveredRunUuid","additionalAxisData","setAdditionalAxisData","focusedRunData","mutableContextMenuShownRef","mutableHoveredRunUuid","mutableTooltipDisplayParams","mutableAdditionalAxisData","applyPositioning","isChangingVisibilityMode","targetX","targetY","currentCtxMenu","reposition","menuRect","requestAnimationFrame","getCoordinatesForTargetElement","targetElement","_containerRef$current","targetRect","offsetX","offsetY","mouseMove","HOVER","nativeEvent","updateTooltip","additionalRunData","_focusedRunData$curre","VISIBLE","currentRunUuid","mouseDownCapture","button","pageX","pageY","tooltipAreaClicked","clickedInTheSamePlace","_focusedRunData$curre3","_focusedRunData$curre2","domRoot","getRootNode","rootClickListener","_focusedRunData$curre4","capture","_focusedRunData$curre5","contextValue","displayTooltip","onMouseDownCapture","onClickCapture","contextMenuContainer","contextMenuWrapper","userSelect","useContext","zIndex","boxShadow","shadowLow","overlayElement","content","RunsChartsUIConfigurationContext","RunsChartsUIConfigurationContextProvider","updateChartsUIState","useReorderRunsChartsFn","sourceChartUuid","targetChartUuid","_current$compareRunCh","_current$compareRunSe","newChartsOrder","newSectionsState","indexSource","indexTarget","sourceChart","targetChart","isSameMetricSection","newSourceChart","configuredCard","serializedCard","serialize","_current$compareRunCh2","existingChartCard","useInsertRunsChartsFn","_current$compareRunCh3","_current$compareRunSe2","useRemoveRunsChartFn","configToDelete","_current$compareRunCh4","_current$compareRunCh5","setup","store","rangeKey","createChartAxisRangeKey","anyRunRefreshing","anyRunLoading","returnValues","metricsByMetricKey","dataByMetricKey","_store$entities$sampl","_store$entities$sampl2","runMetricData","loading","refreshing","keyBy","refreshFn","chunk","runUuidsChunk","action","getSampledMetricHistoryBulkAction","fetchMetricsFn","isAutoRefreshing","EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL","refresh","dataTraceMetricsContainMultipleEpochs","_dataTrace$metrics","_dataTrace$metrics$me","entity","RunsChartsBarCardConfig","RunsChartsScatterCardConfig","RunsChartsParallelCardConfig","RunsChartsLineCardConfig","RunsChartsDifferenceCardConfig","RunsChartsImageCardConfig","RunsChartsContourCardConfig","getBaseChartConfigs","primaryMetricKey","resultChartSet","allMetricKeys","metricsToRender","metricsKey","chartType","getBaseChartAndSectionConfigs","useParallelCoordinatesChart","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","imagesToRender","sectionName2Uuid","sectionName","extractChartSectionName","resultSectionSet","updateChartAndSectionConfigs","isResultUpdated","doesImageKeyExist","chartImageKeys","isSectionReordered","newChartConfig","insertIndex","localeCompare","doesMetricKeyExist","chartMetricKey","generatedChartIndex","prevChart","rest","delimiter","MLFLOW_MODEL_METRIC_PREFIX","findChartStepsByTimestamp","currentMetricHistory","useDefaultIfNotFound","flatHistory","valueOf","lowerEntry","first","upperEntry","last","sampledMetrics","stepRangesPerRun","_sampledMetrics$runUu","metricHistoryForRun","bound","currentlyVisibleMetrics","relativeRange","multiplier","_minBy","runMetrics","visibleMetricHistoryForRun","_metric$metricsHistor","timestampOffset","aggregatedMetricsHistoryForMetric","invariant","metricsHistoryInGroup","_sampledDataResultsBy","_sampledDataResultsBy2","steps","h","createAggregatedMetricHistory","createValueAggregatedMetricHistory","datasetSummariesEqual","summary1","summary2","context","path","NOTE_CONTENT_TAG","MLFLOW_INTERNAL_PREFIX","NoteInfo","_class","fromTags","contentTag","showLabel","buttonProps","setShowTooltip","handleClick","navigator","clipboard","writeText","handleMouseLeave","icons","rotateLeft","UndoIcon","rotateRight","RedoIcon","zoomIn","ZoomInIcon","zoomOut","ZoomOutIcon","close","ArrowLeftIcon","ArrowRightIcon","getPopupContainer","DesignSystemContext","RcImage","PreviewGroup","getContainer","v","useMediaQuery","query","queryList","useSyncExternalStore","matches","useMatchesMediaQuery","matchMedia","fontFamily","direction","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","textShadow","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","operator","property","function","selector","boolean","string","keyword","control","directive","unit","statement","regex","atrule","variable","textDecoration","inserted","italic","fontStyle","important","bold","Outline","OutlineOffset","borderRightColor","wordWrap","builtin","char","class","constant","hexcode","symbol","SyntaxHighlighter","registerLanguage","python","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","actions","showLineNumbers","lineNumberStyle","customStyle","codeTagProps"],"sourceRoot":""}